"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[7428],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var r=a.createContext({}),d=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(r.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),u=s,g=p["".concat(r,".").concat(u)]||p[u]||m[u]||i;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l[p]="string"==typeof e?e:s,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9563:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=t(7462),s=(t(7294),t(3905));const i={title:"session",e2eSpecific:!0},o=void 0,l={unversionedId:"api/commands/session",id:"api/commands/session",title:"session",description:"Cache and restore cookies,",source:"@site/docs/api/commands/session.mdx",sourceDirName:"api/commands",slug:"/api/commands/session",permalink:"/cypress-documentation/api/commands/session",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/commands/session.mdx",tags:[],version:"current",frontMatter:{title:"session",e2eSpecific:!0},sidebar:"api",previous:{title:"screenshot",permalink:"/cypress-documentation/api/commands/screenshot"},next:{title:"setCookie",permalink:"/cypress-documentation/api/commands/setcookie"}},r={},d=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Arguments",id:"Arguments",level:3},{value:'Yields <Icon name="question-circle"/>',id:"Yields-Icon-namequestion-circle",level:3},{value:"Examples",id:"Examples",level:2},{value:"Updating an existing login custom command",id:"Updating-an-existing-login-custom-command",level:3},{value:"Updating an existing login helper function",id:"Updating-an-existing-login-helper-function",level:3},{value:"Switching sessions inside tests",id:"Switching-sessions-inside-tests",level:3},{value:"Validating the session",id:"Validating-the-session",level:3},{value:"Modifying session data before caching",id:"Modifying-session-data-before-caching",level:3},{value:"Caching session data across specs",id:"Caching-session-data-across-specs",level:3},{value:"Multiple login commands",id:"Multiple-login-commands",level:3},{value:"Where to call <code>cy.visit()</code>",id:"Where-to-call-cyvisit",level:3},{value:"Updating a login function that returns a value",id:"Updating-a-login-function-that-returns-a-value",level:3},{value:"Cross-domain sessions",id:"Cross-domain-sessions",level:3},{value:"Notes",id:"Notes",level:2},{value:"When the page and session data are cleared",id:"When-the-page-and-session-data-are-cleared",level:3},{value:"Test Isolation Enabled",id:"Test-Isolation-Enabled",level:3},{value:"Test Isolation Disabled",id:"Test-Isolation-Disabled",level:3},{value:"Session caching",id:"Session-caching",level:3},{value:"Explicitly clearing sessions",id:"Explicitly-clearing-sessions",level:3},{value:"Where to call <code>cy.session()</code>",id:"Where-to-call-cysession",level:3},{value:"Choosing the correct id to cache a session",id:"Choosing-the-correct-id-to-cache-a-session",level:3},{value:"Common Questions",id:"Common-Questions",level:3},{value:"Why are all my Cypress commands failing after calling <code>cy.session()</code>?",id:"Why-are-all-my-Cypress-commands-failing-after-calling-cysession",level:4},{value:"Why am I seeing <code>401</code> errors after calling <code>cy.session()</code>?",id:"Why-am-I-seeing-401-errors-after-calling-cysession",level:4},{value:"Command Log",id:"Command-Log",level:2},{value:"The Instrument Panel",id:"The-Instrument-Panel",level:3},{value:"The command log",id:"The-command-log",level:3},{value:"Printing to the console",id:"Printing-to-the-console",level:3},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",n)},p=c("Icon"),m=c("DocsImage"),u={toc:d};function g(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Cache and restore ",(0,s.kt)("a",{parentName:"p",href:"/api/cypress-api/cookies"},"cookies"),",\n",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"},(0,s.kt)("inlineCode",{parentName:"a"},"localStorage")),",\nand\n",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"},(0,s.kt)("inlineCode",{parentName:"a"},"sessionStorage")),"\n(i.e. session data) in order to recreate a consistent browser context between\ntests."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," command will inherit the\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/writing-and-organizing-tests#Test-Isolation"},(0,s.kt)("inlineCode",{parentName:"a"},"testIsolation")),"\nvalue to determine whether or not the page is cleared when caching and restoring\nthe browser context."),(0,s.kt)("h2",{id:"Syntax"},"Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.session(id, setup)\ncy.session(id, setup, options)\n")),(0,s.kt)("h3",{id:"Usage"},"Usage"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(p,{name:"check-circle",color:"green",mdxType:"Icon"})," Correct Usage")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// Caching session when logging in via page visit\ncy.session(name, () => {\n  cy.visit('/login')\n  cy.get('[data-test=name]').type(name)\n  cy.get('[data-test=password]').type('s3cr3t')\n  cy.get('form').contains('Log In').click()\n  cy.url().should('contain', '/login-successful')\n})\n\n// Caching session when logging in via API\ncy.session(username, () => {\n  cy.request({\n    method: 'POST',\n    url: '/login',\n    body: { username, password },\n  }).then(({ body }) => {\n    window.localStorage.setItem('authToken', body.token)\n  })\n})\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(p,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Incorrect Usage")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// visiting before calling cy.session() is redundant, it needs to\n// be done inside the setup function\ncy.visit('/login')\ncy.session(name, () => {\n  // need to call cy.visit() here because the page is blank when\n  // the setup function runs\n  cy.get('[data-test=name]').type(name)\n  cy.get('[data-test=password]').type('s3cr3t')\n  cy.get('form').contains('Log In').click()\n  // should assert that login was successful here to guarantee the\n  // login process completes before it is cached\n})\n// should have asserted this inside the cy.session() setup\n// function because the page is blank here\ncy.url().should('contain', '/login-successful')\n")),(0,s.kt)("h3",{id:"Arguments"},"Arguments"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(p,{name:"angle-right",mdxType:"Icon"})," id")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(String, Array, Object)"))),(0,s.kt)("p",null,"A unique identifier that will be used to cache and restore a given session. In\nsimple cases, a ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," value is sufficient. In order to simplify generation of\nmore complex ids, if you pass an ",(0,s.kt)("inlineCode",{parentName:"p"},"Array")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"Object"),", Cypress will generate an\nid for you by deterministically stringifying the value you pass in. For example,\nif you pass ",(0,s.kt)("inlineCode",{parentName:"p"},"['Jane', '123', 'admin']"),", an id of ",(0,s.kt)("inlineCode",{parentName:"p"},'["Jane","123","admin"]')," will\nbe generated for you."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"See the\n",(0,s.kt)("a",{parentName:"p",href:"#Choosing-the-correct-id-to-cache-a-session"},"choosing the correct id to cache a session"),"\nsection for a more thorough explanation with examples.")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"Note that large or cyclical data structures may be slow or difficult to\nserialize into an identifier, so exercise care with the data you specify.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(p,{name:"angle-right",mdxType:"Icon"})," setup")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(Function)"))),(0,s.kt)("p",null,"This function is called whenever a session for the given ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," hasn't yet been\ncached, or if it's no longer valid (see the ",(0,s.kt)("inlineCode",{parentName:"p"},"validate")," option). After ",(0,s.kt)("inlineCode",{parentName:"p"},"setup"),"\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"validate")," runs for the first time, Cypress will preserve all cookies,\n",(0,s.kt)("inlineCode",{parentName:"p"},"sessionStorage"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"localStorage"),", so that subsequent calls to ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()"),"\nwith the same ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," will bypass setup and just restore and validate the cached\nsession data."),(0,s.kt)("p",null,"The page is cleared before ",(0,s.kt)("inlineCode",{parentName:"p"},"setup")," when ",(0,s.kt)("inlineCode",{parentName:"p"},"testIsolation")," is enabled and is not\ncleared when ",(0,s.kt)("inlineCode",{parentName:"p"},"testIsolation")," is disabled."),(0,s.kt)("p",null,"Cookies, local storage and session storage in all domains are always cleared\nbefore ",(0,s.kt)("inlineCode",{parentName:"p"},"setup")," runs, regardless of the ",(0,s.kt)("inlineCode",{parentName:"p"},"testIsolation")," configuration."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(p,{name:"angle-right",mdxType:"Icon"})," options")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(Object)"))),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Option"),(0,s.kt)("th",{parentName:"tr",align:null},"Default"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"validate")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"undefined")),(0,s.kt)("td",{parentName:"tr",align:null},"Validates the newly-created or restored session. Function to run immediately after the session is created and ",(0,s.kt)("inlineCode",{parentName:"td"},"setup")," function runs or after a session is restored and the page is cleared. If it throws an exception, contains any failing Cypress command, returns a Promise which rejects or resolves to ",(0,s.kt)("inlineCode",{parentName:"td"},"false"),", or the last Cypress command yielded ",(0,s.kt)("inlineCode",{parentName:"td"},"false"),", the session is considered invalid.",(0,s.kt)("br",null),(0,s.kt)("br",null),"- If validation fails immediately after ",(0,s.kt)("inlineCode",{parentName:"td"},"setup"),", the test will fail.",(0,s.kt)("br",null),"- If validation fails after restoring a session, ",(0,s.kt)("inlineCode",{parentName:"td"},"setup")," will re-run.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"cacheAcrossSpecs")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"false")),(0,s.kt)("td",{parentName:"tr",align:null},'When enabled, the newly created session is considered "global" and can be restored in any spec during the test execution in the same Cypress run on the same machine. Use this option for a session that will be used multiple times, across many specs.')))),(0,s.kt)("h3",{id:"Yields-Icon-namequestion-circle"},"Yields ",(0,s.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Subject-Management"},(0,s.kt)(p,{name:"question-circle",mdxType:"Icon"}))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"cy.session()")," yields ",(0,s.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,s.kt)("h2",{id:"Examples"},"Examples"),(0,s.kt)("h3",{id:"Updating-an-existing-login-custom-command"},"Updating an existing login custom command"),(0,s.kt)("p",null,"You can add session caching to your login\n",(0,s.kt)("a",{parentName:"p",href:"/api/cypress-api/custom-commands"},"custom command"),". Wrap the inside of the\ncommand with a call to ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Before")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Commands.add('login', (username, password) => {\n  cy.visit('/login')\n  cy.get('[data-test=name]').type(username)\n  cy.get('[data-test=password]').type(password)\n  cy.get('form').contains('Log In').click()\n  cy.url().should('contain', '/login-successful')\n})\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"After")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Commands.add('login', (username, password) => {\n  cy.session([username, password], () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(username)\n    cy.get('[data-test=password]').type(password)\n    cy.get('form').contains('Log In').click()\n    cy.url().should('contain', '/login-successful')\n  })\n})\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"With session validation")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Commands.add('login', (username, password) => {\n  cy.session(\n    [username, password],\n    () => {\n      cy.visit('/login')\n      cy.get('[data-test=name]').type(username)\n      cy.get('[data-test=password]').type(password)\n      cy.get('form').contains('Log In').click()\n      cy.url().should('contain', '/login-successful')\n    },\n    {\n      validate() {\n        cy.request('/whoami').its('status').should('eq', 200)\n      },\n    }\n  )\n})\n")),(0,s.kt)("h3",{id:"Updating-an-existing-login-helper-function"},"Updating an existing login helper function"),(0,s.kt)("p",null,"You can add session caching to a login helper function by wrapping the inside of\nthe function with a call to ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Before")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const login = (name, password) => {\n  cy.visit('/login')\n  cy.get('[data-test=name]').type(name)\n  cy.get('[data-test=password]').type(password)\n  cy.get('#submit').click()\n  cy.url().should('contain', '/home')\n}\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"After")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const login = (name, password) => {\n  cy.session([name, password], () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(name)\n    cy.get('[data-test=password]').type(password)\n    cy.get('#submit').click()\n    cy.url().should('contain', '/home')\n  })\n}\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"With session validation")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const login = (name, password) => {\n  cy.session(\n    [name, password],\n    () => {\n      cy.visit('/login')\n      cy.get('[data-test=name]').type(name)\n      cy.get('[data-test=password]').type(password)\n      cy.get('#submit').click()\n      cy.url().should('contain', '/home')\n    },\n    {\n      validate() {\n        // Protected URLs should return a 40x http code if user is unauthorized,\n        // and by default this will cause cy.visit() to fail\n        cy.visit('/account-details')\n      },\n    }\n  )\n}\n")),(0,s.kt)("h3",{id:"Switching-sessions-inside-tests"},"Switching sessions inside tests"),(0,s.kt)("p",null,"Because ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," clears the page and all session data before running\n",(0,s.kt)("inlineCode",{parentName:"p"},"setup"),", you can use it to easily switch between sessions without first needing\nto log the previous user out. This allows tests to more accurately represent\nreal-world scenarios and helps keep test run times short."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"const login = (name) => {\n  cy.session(name, () => {\n    cy.request({\n      method: 'POST',\n      url: '/login',\n      body: { name, password: 's3cr3t' },\n    }).then(({ body }) => {\n      window.localStorage.setItem('authToken', body.token)\n    })\n  })\n}\n\nit('should transfer money between users', () => {\n  login('user')\n  cy.visit('/transfer')\n  cy.get('#amount').type('100.00')\n  cy.get('#send-money').click()\n\n  login('other-user')\n  cy.visit('/account_balance')\n  cy.get('#balance').should('eq', '100.00')\n})\n")),(0,s.kt)("h3",{id:"Validating-the-session"},"Validating the session"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"validate")," function is used to ensure the session has been correctly\nestablished. This is especially helpful when a cached session is being restored,\nbecause if the session is not valid, ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," will recreate the session by\nre-running ",(0,s.kt)("inlineCode",{parentName:"p"},"setup"),"."),(0,s.kt)("p",null,"The following scenarios will mark the session as invalid:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"the ",(0,s.kt)("inlineCode",{parentName:"li"},"validate")," function throws an exception"),(0,s.kt)("li",{parentName:"ul"},"the ",(0,s.kt)("inlineCode",{parentName:"li"},"validate")," function returns a Promise that resolves to ",(0,s.kt)("inlineCode",{parentName:"li"},"false")," or rejects"),(0,s.kt)("li",{parentName:"ul"},"the ",(0,s.kt)("inlineCode",{parentName:"li"},"validate")," function contains failing Cypress command"),(0,s.kt)("li",{parentName:"ul"},"the last Cypress command in the ",(0,s.kt)("inlineCode",{parentName:"li"},"validate")," function yielded ",(0,s.kt)("inlineCode",{parentName:"li"},"false"))),(0,s.kt)("p",null,"Here are a few ",(0,s.kt)("inlineCode",{parentName:"p"},"validate")," examples:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// Attempt to visit a page that only a logged-in user can see\nfunction validate() {\n  cy.visit('/private')\n}\n\n// Make an API request that returns a 200 only when logged in\nfunction validate() {\n  cy.request('/api/user').its('status').should('eq', 200)\n}\n\n// Run any Cypress command that fails if the user is not logged in\nfunction validate() {\n  cy.visit('/account', { failOnStatusCode: false })\n  cy.url().should('match', /^/account/)\n}\n")),(0,s.kt)("h3",{id:"Modifying-session-data-before-caching"},"Modifying session data before caching"),(0,s.kt)("p",null,"If you want to change which session data is cached, you can modify cookies,\n",(0,s.kt)("inlineCode",{parentName:"p"},"localStorage"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"sessionStorage")," as-necessary in ",(0,s.kt)("inlineCode",{parentName:"p"},"setup"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.session('user', () => {\n  cy.visit('/login')\n  cy.get('name').type('user')\n  cy.get('password').type('p4ssw0rd123')\n  cy.get('#submit').click()\n  cy.url().should('contain', '/home')\n  // Remove session data we don't want to cache\n  cy.clearCookie('authId')\n  cy.window().then((win) => {\n    win.localStorage.removeItem('authToken')\n  })\n  // Add session data we do want to cache\n  cy.setCookie('session_id', '189jd09sufh33aaiidhf99d09')\n})\n")),(0,s.kt)("h3",{id:"Caching-session-data-across-specs"},"Caching session data across specs"),(0,s.kt)("p",null,"If you want to use the same session across multiple specs in the same Cypress\nrun on the same machine, add ",(0,s.kt)("inlineCode",{parentName:"p"},"cacheAcrossSpecs=true")," to the session options to\nleverage the session through the run."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const login = (name = 'user1') => {\n  cy.session(\n    name,\n    () => {\n      cy.request({\n        method: 'POST',\n        url: '/login',\n        body: { name, password: 's3cr3t' },\n      }).then(({ body }) => {\n        window.localStorage.setItem('authToken', body.token)\n      })\n    },\n    {\n      validate() {\n        cy.visit('/user_profile')\n        cy.contains(`Hello ${name}`)\n      },\n      cacheAcrossSpecs: true,\n    }\n  )\n}\n\n// profile.cy.js\nit('can view profile', () => {\n  login()\n})\n\n// add_blog.cy.js\nit('can create a blog post', () => {\n  login()\n})\n")),(0,s.kt)("h3",{id:"Multiple-login-commands"},"Multiple login commands"),(0,s.kt)("p",null,"A more complex app may require multiple login commands, which may require\nmultiple uses of ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()"),". However, because the ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," value is used as a\nunique identifier to save and restore sessions, it's very important that it's\nactually unique per session."),(0,s.kt)("p",null,"In the following example, if the resulting session data that ",(0,s.kt)("inlineCode",{parentName:"p"},"loginByForm")," and\n",(0,s.kt)("inlineCode",{parentName:"p"},"loginByApi")," create is different ",(0,s.kt)("em",{parentName:"p"},"in any way"),", it would be a mistake to specify\n",(0,s.kt)("inlineCode",{parentName:"p"},"[name, password]")," as the ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," for both, because there would be no way to\ndistinguish between the sessions created by ",(0,s.kt)("inlineCode",{parentName:"p"},'loginByForm("user", "p4ssw0rd")'),"\nand ",(0,s.kt)("inlineCode",{parentName:"p"},'loginByApi("user", "p4ssw0rd")'),". Instead, you can modify the ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," to\ndifferentiate its value between both login functions, so that each will always\nbe cached uniquely."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const loginByForm = (name, password) => {\n  cy.session(['loginByForm', name], () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(name)\n    cy.get('[data-test=password]').type(password)\n    cy.get('#submit').click()\n    cy.url().should('contain', '/home')\n  })\n}\n\nconst loginByApi = (name, password) => {\n  cy.session(['loginByApi', name], () => {\n    cy.request({\n      method: 'POST',\n      url: '/api/login',\n      body: { name, password },\n    }).then(({ body }) => {\n      window.localStorage.setItem('authToken', body.token)\n    })\n  })\n}\n")),(0,s.kt)("h3",{id:"Where-to-call-cyvisit"},"Where to call ",(0,s.kt)("inlineCode",{parentName:"h3"},"cy.visit()")),(0,s.kt)("p",null,"Intuitively it seems that you should call ",(0,s.kt)("a",{parentName:"p",href:"/api/commands/visit"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.visit()")),"\nimmediately after ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," in your login function or custom command, so it\nbehaves (from the point of view of the subsequent test) exactly the same as a\nlogin function without ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const login = (name) => {\n  cy.session(name, () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(name)\n    cy.get('[data-test=password]').type('s3cr3t')\n    cy.get('#submit').click()\n    cy.url().should('contain', '/home')\n  })\n  cy.visit('/home')\n}\n\nbeforeEach(() => {\n  login('user')\n})\n\nit('should test something on the /home page', () => {\n  // assertions\n})\n\nit('should test something else on the /home page', () => {\n  // assertions\n})\n")),(0,s.kt)("p",null,"However, if you want to test something on a different page, you will need to\ncall ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.visit()")," at the beginning of that test, which means you will be calling\n",(0,s.kt)("inlineCode",{parentName:"p"},"cy.visit()")," a ",(0,s.kt)("strong",{parentName:"p"},"second")," time in your test. Since ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.visit()")," waits for the\nvisited page to become active before continuing, this could add up to an\nunacceptable waste of time."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// ...continued...\n\nit('should test something on the /other page', () => {\n  cy.visit('/other')\n  // assertions\n})\n")),(0,s.kt)("p",null,"Tests will obviously be faster if you call ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.visit()")," only when necessary.\nThis can be easily realised by\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/writing-and-organizing-tests#Test-Structure"},"organizing tests into suites"),"\nand calling ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.visit()")," ",(0,s.kt)("strong",{parentName:"p"},"after")," logging in, inside a\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/writing-and-organizing-tests#Hooks"},(0,s.kt)("inlineCode",{parentName:"a"},"beforeEach"))," hook."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const login = (name) => {\n  cy.session(name, () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(name)\n    cy.get('[data-test=password]').type('s3cr3t')\n    cy.get('#submit').click()\n    cy.url().should('contain', '/home')\n  })\n  // no visit here\n}\n\ndescribe('home page tests', () => {\n  beforeEach(() => {\n    login('user')\n    cy.visit('/home')\n  })\n\n  it('should test something on the /home page', () => {\n    // assertions\n  })\n\n  it('should test something else on the /home page', () => {\n    // assertions\n  })\n})\n\ndescribe('other page tests', () => {\n  beforeEach(() => {\n    login('user')\n    cy.visit('/other')\n  })\n\n  it('should test something on the /other page', () => {\n    // assertions\n  })\n})\n")),(0,s.kt)("h3",{id:"Updating-a-login-function-that-returns-a-value"},"Updating a login function that returns a value"),(0,s.kt)("p",null,"If your custom login command returns a value that you use to assert in a test,\nwrapping it with ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," will break that test. However, it's usually easy\nto solve this by refactoring the login code to assert directly inside ",(0,s.kt)("inlineCode",{parentName:"p"},"setup"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Before")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Commands.add('loginByApi', (username, password) => {\n  return cy.request('POST', `/api/login`, {\n    username,\n    password,\n  })\n})\n\nit('should return the correct value', () => {\n  cy.loginByApi('user', 's3cr3t').then((response) => {\n    expect(response.status).to.eq(200)\n  })\n})\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"After")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Commands.add('loginByApi', (username, password) => {\n  cy.session(username, () => {\n    cy.request('POST', `/api/login`, {\n      username,\n      password,\n    }).then((response) => {\n      expect(response.status).to.eq(200)\n    })\n  })\n})\n\nit('is a redundant test', () => {\n  /* which you can now delete! */\n})\n")),(0,s.kt)("h3",{id:"Cross-domain-sessions"},"Cross-domain sessions"),(0,s.kt)("p",null,"It's possible to switch domains while caching sessions, just be sure to\nexplicitly visit the domain in your login command before calling ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx"},"const login = (name) => {\n  if (location.hostname !== 'example.com') {\n    cy.visit('example.com')\n  }\n  cy.session(name, () => {\n    cy.visit('/login')\n    // etc\n  }, {\n    validate() {\n      cy.request('/whoami', {\n        headers: { 'Authorization' : localStorage.token }\n        method: 'POST'\n      }).its('status').should('equal', 200)\n    }\n  })\n}\n\nit('t1', () => {\n  login('bob')\n  // do things on example.com\n})\n\nit('t2', () => {\n  cy.visit('anotherexample.com')\n  // do things on anotherexample.com\n})\n\nit('t3', () => {\n  login('bob')\n  // do things on example.com\n})\n")),(0,s.kt)("h2",{id:"Notes"},"Notes"),(0,s.kt)("h3",{id:"When-the-page-and-session-data-are-cleared"},"When the page and session data are cleared"),(0,s.kt)("h3",{id:"Test-Isolation-Enabled"},"Test Isolation Enabled"),(0,s.kt)("p",null,"The page is cleared and cookies, local storage and session storage (session\ndata) in all domains are cleared automatically when ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," runs and test\nisolation is enabled with ",(0,s.kt)("inlineCode",{parentName:"p"},"testIsolation=true")," (default in Cypress 12), This\nguarantees consistent behavior whether a session is being created or restored\nand allows you to switch sessions without first having to explicitly log out."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:"center"},"Page cleared (test)"),(0,s.kt)("th",{parentName:"tr",align:"center"},"Session data cleared"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Before ",(0,s.kt)("inlineCode",{parentName:"td"},"setup")),(0,s.kt)("td",{parentName:"tr",align:"center"},(0,s.kt)(p,{name:"check-circle",color:"green",mdxType:"Icon"})),(0,s.kt)("td",{parentName:"tr",align:"center"},(0,s.kt)(p,{name:"check-circle",color:"green",mdxType:"Icon"}))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Before ",(0,s.kt)("inlineCode",{parentName:"td"},"cy.session()")," ends"),(0,s.kt)("td",{parentName:"tr",align:"center"},(0,s.kt)(p,{name:"check-circle",color:"green",mdxType:"Icon"})),(0,s.kt)("td",{parentName:"tr",align:"center"})))),(0,s.kt)("p",null,"Note: ",(0,s.kt)("a",{parentName:"p",href:"/api/commands/visit"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.visit()"))," must be explicitly called afterwards\nto ensure the page to test is loaded."),(0,s.kt)("h3",{id:"Test-Isolation-Disabled"},"Test Isolation Disabled"),(0,s.kt)("p",null,"When test isolation is disabled with ",(0,s.kt)("inlineCode",{parentName:"p"},"testIsolation=false"),", the page will not\nclear, however, the session data will clear when ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," runs."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:"center"},"Page cleared (test)"),(0,s.kt)("th",{parentName:"tr",align:"center"},"Session data cleared"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Before ",(0,s.kt)("inlineCode",{parentName:"td"},"setup")),(0,s.kt)("td",{parentName:"tr",align:"center"}),(0,s.kt)("td",{parentName:"tr",align:"center"},(0,s.kt)(p,{name:"check-circle",color:"green",mdxType:"Icon"}))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Before ",(0,s.kt)("inlineCode",{parentName:"td"},"cy.session()")," ends"),(0,s.kt)("td",{parentName:"tr",align:"center"}),(0,s.kt)("td",{parentName:"tr",align:"center"})))),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/api/commands/visit"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.visit()"))," does not need to be called afterwards to\nensure the page to test is loaded."),(0,s.kt)("p",null,"NOTE: Disabling test isolation may improve performance of end-to-end tests,\nhowever, previous tests could impact the browser state of the next test and\ncause inconsistency when using .only(). Be mindful to write isolated tests when\ntest isolation is disabled."),(0,s.kt)("p",null,"When test isolation is disabled, it is encouraged to setup your session in a\nbefore hook or in the first test to ensure a clean setup."),(0,s.kt)("h3",{id:"Session-caching"},"Session caching"),(0,s.kt)("p",null,"Once created, a session for a given ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," is cached for the duration of the spec\nfile. You can't modify a stored session after it has been cached, but you can\nalways create a new session with a different ",(0,s.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,s.kt)("p",null,'In order to reduce development time, when running Cypress in "open" mode,\nsessions will be cached ',(0,s.kt)("em",{parentName:"p"},"for spec file reruns"),"."),(0,s.kt)("p",null,"To persist a session across multiple specs, use the option\n",(0,s.kt)("inlineCode",{parentName:"p"},"cacheAcrossSpecs=true"),"."),(0,s.kt)("h3",{id:"Explicitly-clearing-sessions"},"Explicitly clearing sessions"),(0,s.kt)("p",null,'When running Cypress in "open" mode, you can explicitly clear all spec and\nglobal sessions and re-run the spec file by clicking the "Clear All Sessions"\nbutton in the ',(0,s.kt)("a",{parentName:"p",href:"#The-Instrument-Panel"},"Instrument Panel"),"."),(0,s.kt)(m,{src:"/img/api/session/sessions-panel.png",alt:"Sessions Instrument Panel",mdxType:"DocsImage"}),(0,s.kt)("p",null,"For debugging purposes, all spec and global sessions can be cleared with the\n",(0,s.kt)("a",{parentName:"p",href:"/api/cypress-api/session"},(0,s.kt)("inlineCode",{parentName:"a"},"Cypress.session.clearAllSavedSessions()"))," method."),(0,s.kt)("h3",{id:"Where-to-call-cysession"},"Where to call ",(0,s.kt)("inlineCode",{parentName:"h3"},"cy.session()")),(0,s.kt)("p",null,"While it is possible to call ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," explicitly inside a test or\n",(0,s.kt)("inlineCode",{parentName:"p"},"beforeEach"),", it is considered a best practice to call ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," inside a\nlogin ",(0,s.kt)("a",{parentName:"p",href:"/api/cypress-api/custom-commands"},"custom command")," or reusable wrapper\nfunction. See the\n",(0,s.kt)("a",{parentName:"p",href:"#Updating-an-existing-login-custom-command"},"Updating an existing login custom command"),"\nand\n",(0,s.kt)("a",{parentName:"p",href:"#Updating-an-existing-login-helper-function"},"Updating an existing login helper function"),"\nexamples for more details."),(0,s.kt)("h3",{id:"Choosing-the-correct-id-to-cache-a-session"},"Choosing the correct id to cache a session"),(0,s.kt)("p",null,"In order for sessions to be cached uniquely, the ",(0,s.kt)("a",{parentName:"p",href:"#Arguments"},(0,s.kt)("inlineCode",{parentName:"a"},"id")," argument"),"\nmust be unique for each new session created. The ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," provided to ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()"),"\nwill display in the reporter, thus we do not recommend using sensitive data like\npasswords or tokens as unique identifiers."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// If your session setup code uses a string variable, pass in the\n// string as the id\nconst login = (name) => {\n  cy.session(name, () => {\n    loginWith(name)\n  })\n}\n\n// If your session setup code uses a single object, pass in the\n// object as the id and it will be serialized into an identifier\nconst login = (params = {}) => {\n  cy.session(params, () => {\n    loginWith(params)\n  })\n}\n\n// If your session setup code uses multiple variables, pass in an\n// array of those variables and it will be serialized into an\n// identifier\nconst login = (name, email, params = {}) => {\n  cy.session([name, email, params], () => {\n    loginWith(name, email, params)\n  })\n}\n\n// If your session setup code uses external constants, they don't\n// need to be included in the id, since they will never change\nconst API_KEY = 'I_AM_AN_API_KEY'\nconst login = (name, email) => {\n  cy.session([name, email], () => {\n    loginWith(name, email, API_KEY)\n  })\n}\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(p,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Incorrect Usage")),(0,s.kt)("p",null,"If you have custom ",(0,s.kt)("inlineCode",{parentName:"p"},"login")," code that uses multiple parameters (in this example,\na name, a token, and a password), in order to be able to log in many different\nusers, but the ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," only included one of them (in this example, ",(0,s.kt)("inlineCode",{parentName:"p"},"name"),"):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const login = (name, token, password) => {\n  cy.session(name, () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(name)\n    cy.get('[data-test=token]').type(token)\n    cy.get('[data-test=password]').type(password)\n    cy.get('#submit').click()\n  })\n}\n")),(0,s.kt)("p",null,"If you ran this, ",(0,s.kt)("inlineCode",{parentName:"p"},"user1")," would be logged in with ",(0,s.kt)("inlineCode",{parentName:"p"},"token1")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"p4ssw0rd"),", and a\nsession would be created and cached using ",(0,s.kt)("inlineCode",{parentName:"p"},'"user1"')," as the ",(0,s.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"login('user1', 'token1', 'p4ssw0rd')\n")),(0,s.kt)("p",null,"Now let's say you wanted to try to log in the same user, but with a different\ntoken and/or password, and expect a different session to be created and cached.\nYou run this, but because ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," is only being passed ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," as its\n",(0,s.kt)("inlineCode",{parentName:"p"},"id"),", it won't create a new session, but will instead load the saved session for\n",(0,s.kt)("inlineCode",{parentName:"p"},'"user1"'),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"login('user1', 'different-token', 'p4ssw0rd')\n")),(0,s.kt)("p",null,"In summary, you need to ensure that the ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," is unique. Create it from all the\nparameters used inside the ",(0,s.kt)("inlineCode",{parentName:"p"},"setup")," function that may change, otherwise ",(0,s.kt)("inlineCode",{parentName:"p"},"id"),"\nvalues may collide and create unexpected results."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(p,{name:"check-circle",color:"green",mdxType:"Icon"})," Correct Usage")),(0,s.kt)("p",null,"In this example, setting the ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," to ",(0,s.kt)("inlineCode",{parentName:"p"},"[name, uniqueKey]")," guarantees that calling\n",(0,s.kt)("inlineCode",{parentName:"p"},"login()")," with different ",(0,s.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"token")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"password")," values will create and\ncache unique sessions."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const login = (name, token, password, uniqueKey) => {\n  cy.session([name, uniqueKey], () => {\n    cy.visit('/login')\n    cy.get('[data-test=name]').type(name)\n    cy.get('[data-test=token]').type(token)\n    cy.get('[data-test=password]').type(password)\n    cy.get('#submit').click()\n  })\n}\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/uuid"},(0,s.kt)("inlineCode",{parentName:"a"},"uuid"))," npm package can be used to\ngenerate random unique ids if an arbitrary name-space does not meet your needs."),(0,s.kt)("h3",{id:"Common-Questions"},"Common Questions"),(0,s.kt)("h4",{id:"Why-are-all-my-Cypress-commands-failing-after-calling-cysession"},"Why are all my Cypress commands failing after calling ",(0,s.kt)("inlineCode",{parentName:"h4"},"cy.session()"),"?"),(0,s.kt)("p",null,"When\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/writing-and-organizing-tests#Test-Isolation"},(0,s.kt)("inlineCode",{parentName:"a"},"testIsolation")),"\nis enabled, ensure that you're calling ",(0,s.kt)("a",{parentName:"p",href:"/api/commands/visit"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.visit()"))," after\ncalling ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()"),", otherwise your tests will be running on a blank page."),(0,s.kt)("h4",{id:"Why-am-I-seeing-401-errors-after-calling-cysession"},"Why am I seeing ",(0,s.kt)("inlineCode",{parentName:"h4"},"401")," errors after calling ",(0,s.kt)("inlineCode",{parentName:"h4"},"cy.session()"),"?"),(0,s.kt)("p",null,"It's possible that your session is not valid or was not fully established before\nthe session was saved and the command ended. Be sure to specify a ",(0,s.kt)("inlineCode",{parentName:"p"},"validate"),"\nfunction so that ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," can validate and recreate the session if\nnecessary."),(0,s.kt)("h2",{id:"Command-Log"},"Command Log"),(0,s.kt)("h3",{id:"The-Instrument-Panel"},"The Instrument Panel"),(0,s.kt)("p",null,"Whenever a session is created or restored inside a test, an extra instrument\npanel is displayed at the top of the test to give more information about the\nstate of your sessions."),(0,s.kt)("p",null,"Clicking any session ",(0,s.kt)("inlineCode",{parentName:"p"},"id"),' in the panel will print that session\'s details to the\nconsole, and clicking the "Clear All Sessions" button will clear all saved spec\nand global sessions and re-run the spec file (see\n',(0,s.kt)("a",{parentName:"p",href:"#Session-caching"},"Session caching")," for more details)."),(0,s.kt)(m,{src:"/img/api/session/sessions-panel.png",alt:"Sessions Instrument Panel",mdxType:"DocsImage"}),(0,s.kt)("h3",{id:"The-command-log"},"The command log"),(0,s.kt)("p",null,"Whenever ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.session()")," is called, the command log will show one of the\nfollowing lines, which includes the status of the session call along with the\nsession ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," value:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"No saved session was found, so a new session was created and saved:"),(0,s.kt)(m,{src:"/img/api/session/session-collapsed-new.png",alt:"New session (collapsed)",mdxType:"DocsImage"})),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"A saved session was found, and used:"),(0,s.kt)(m,{src:"/img/api/session/session-collapsed-restored.png",alt:"Saved session (collapsed)",mdxType:"DocsImage"})),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"A saved session was found, but the ",(0,s.kt)("inlineCode",{parentName:"p"},"validate")," function failed, so the session\nwas recreated and saved:"),(0,s.kt)(m,{src:"/img/api/session/session-collapsed-recreated.png",alt:"Recreated session (collapsed)",mdxType:"DocsImage"}))),(0,s.kt)("p",null,"Note that in cases where the ",(0,s.kt)("inlineCode",{parentName:"p"},"validate")," function fails immediately after ",(0,s.kt)("inlineCode",{parentName:"p"},"setup"),"\ncreates the session, the test will fail with an error."),(0,s.kt)("p",null,"Expanding the session group in the command log will show all of the commands\nthat were run when creating and/or validating the session."),(0,s.kt)("p",null,"In this image, a saved session is restored, but when ",(0,s.kt)("inlineCode",{parentName:"p"},"/personal")," is visited in\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"validate")," function, the app redirects to ",(0,s.kt)("inlineCode",{parentName:"p"},"/signin"),", which invalidates the\nsession. A new session is created by visiting ",(0,s.kt)("inlineCode",{parentName:"p"},"/signin")," where the user is logged\nin, after which, validation succeeds, and the session is available for the\nremainder of the test."),(0,s.kt)(m,{src:"/img/api/session/session-expanded.png",alt:"Recreated session (expanded)",mdxType:"DocsImage"}),(0,s.kt)("h3",{id:"Printing-to-the-console"},"Printing to the console"),(0,s.kt)("p",null,"Clicking a session ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," in the Instrument Panel or clicking the first line under\nan expanded session group in the command log will print that session's details\nto the console. This information contains the ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," along with any cached session\ndata, including cookies, ",(0,s.kt)("inlineCode",{parentName:"p"},"localStorage")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"sessionStorage"),"."),(0,s.kt)(m,{src:"/img/api/session/print-session-to-console.png",alt:"Session console output",mdxType:"DocsImage"}),(0,s.kt)("h2",{id:"History"},"History"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Version"),(0,s.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/guides/references/changelog#12-0-0"},"12.0.0")),(0,s.kt)("td",{parentName:"tr",align:null},"Removed ",(0,s.kt)("inlineCode",{parentName:"td"},"experimentalSessionAndOrigin")," and made the command available by default.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/guides/references/changelog#11-0-0"},"11.0.0")),(0,s.kt)("td",{parentName:"tr",align:null},"The ",(0,s.kt)("inlineCode",{parentName:"td"},"setup")," option is now required.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/guides/references/changelog#10-9-0"},"10.9.0")),(0,s.kt)("td",{parentName:"tr",align:null},"Added ",(0,s.kt)("inlineCode",{parentName:"td"},"cacheAcrossSpecs")," property.")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/guides/references/changelog#9-6-0"},"9.6.0")),(0,s.kt)("td",{parentName:"tr",align:null},"Added support for ",(0,s.kt)("inlineCode",{parentName:"td"},"experimentalSessionAndOrigin")," and removed ",(0,s.kt)("inlineCode",{parentName:"td"},"experimentalSessionSupport"),".")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/guides/references/changelog#8-2-0"},"8.2.0")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"cy.session()")," command added and can be used when ",(0,s.kt)("inlineCode",{parentName:"td"},"experimentalSessionSupport")," is enabled.")))),(0,s.kt)("h2",{id:"See-also"},"See also"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://cypress.io/blog/2021/08/04/authenticate-faster-in-tests-cy-session-command/"},"Authenticate faster in tests with the cy.session command")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/cypress-api/custom-commands"},"Custom Commands")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/cypress-api/session"},(0,s.kt)("inlineCode",{parentName:"a"},"Cypress.session"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/commands/visit"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.visit()")))))}g.isMDXComponent=!0}}]);