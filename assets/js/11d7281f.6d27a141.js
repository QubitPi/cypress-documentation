"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[7460],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||o;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},522:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={title:"Trade-offs",e2eSpecific:!0},s=void 0,i={unversionedId:"guides/references/trade-offs",id:"guides/references/trade-offs",title:"Trade-offs",description:"Cypress automates the browser with its own unique architecture. While this",source:"@site/docs/guides/references/trade-offs.mdx",sourceDirName:"guides/references",slug:"/guides/references/trade-offs",permalink:"/cypress-documentation/guides/references/trade-offs",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/references/trade-offs.mdx",tags:[],version:"current",lastUpdatedAt:1702621628,formattedLastUpdatedAt:"Dec 15, 2023",frontMatter:{title:"Trade-offs",e2eSpecific:!0},sidebar:"guides",previous:{title:"Roadmap",permalink:"/cypress-documentation/guides/references/roadmap"},next:{title:"Troubleshooting",permalink:"/cypress-documentation/guides/references/troubleshooting"}},l={},c=[{value:"Permanent trade-offs:",id:"Permanent-trade-offs",level:4},{value:"Temporary trade-offs:",id:"Temporary-trade-offs",level:4},{value:"Permanent trade-offs",id:"Permanent-trade-offs-1",level:2},{value:"Automation restrictions",id:"Automation-restrictions",level:3},{value:"Inside the browser",id:"Inside-the-browser",level:3},{value:"Multiple browsers open at the same time",id:"Multiple-browsers-open-at-the-same-time",level:3},{value:"1. Use only the browser:",id:"1-Use-only-the-browser",level:4},{value:"2. Stub the other connection:",id:"2-Stub-the-other-connection",level:4},{value:"3: Introduce another connection:",id:"3-Introduce-another-connection",level:4}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Cypress automates the browser with its own unique architecture. While this\nunlocks the power to do things you will not find anywhere else, there are\nspecific trade-offs that are made. There is no free lunch!"),(0,a.kt)("p",null,"In this guide we will lay out what some of the trade-offs are - and specifically\nhow you can work around them."),(0,a.kt)("p",null,"While at first it may seem like these are strict limitations in Cypress - we\nthink you will soon realize that many of these boundaries are actually ",(0,a.kt)("strong",{parentName:"p"},"good"),"\nto have. In a sense they prevent you from writing bad, slow, or flaky tests."),(0,a.kt)("h4",{id:"Permanent-trade-offs"},"Permanent trade-offs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cypress is not a general purpose ",(0,a.kt)("a",{parentName:"li",href:"#Automation-restrictions"},"automation tool"),"."),(0,a.kt)("li",{parentName:"ul"},"Cypress commands run ",(0,a.kt)("a",{parentName:"li",href:"#Inside-the-browser"},"inside of a browser"),"."),(0,a.kt)("li",{parentName:"ul"},"You cannot use Cypress to drive\n",(0,a.kt)("a",{parentName:"li",href:"#Multiple-browsers-open-at-the-same-time"},"two browsers at the same time"),"."),(0,a.kt)("li",{parentName:"ul"},"Each test is bound to a single superdomain. Cross-origin navigation inside\ntests can be enabled by using the ",(0,a.kt)("a",{parentName:"li",href:"/api/commands/origin"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.origin"))," command.\nPlease read our\n",(0,a.kt)("a",{parentName:"li",href:"/guides/guides/cross-origin-testing"},"Cross Origin Testing Guide"),".")),(0,a.kt)("h4",{id:"Temporary-trade-offs"},"Temporary trade-offs:"),(0,a.kt)("p",null,"We have ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/issues"},"open issues")," where you\ncan find a full list of things Cypress will eventually address, we wanted to\nhighlight some of the more important ",(0,a.kt)("em",{parentName:"p"},"temporary")," restrictions that Cypress will\neventually address. ",(0,a.kt)("a",{parentName:"p",href:"https://on.cypress.io/contributing"},"PRs are welcome ;-)")),(0,a.kt)("p",null,"Many of these issues are currently being worked on or are on our\n",(0,a.kt)("a",{parentName:"p",href:"/guides/references/roadmap"},"Roadmap"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/commands/hover"},"Workarounds for the lack of a ",(0,a.kt)("inlineCode",{parentName:"a"},"cy.hover()")," command.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress/issues/299"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.tab()")," command.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress/issues/311#issuecomment-339824191"},"There is not any native or mobile events support.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress/issues/136"},"iframe support is somewhat limited, but does work."))),(0,a.kt)("h2",{id:"Permanent-trade-offs-1"},"Permanent trade-offs"),(0,a.kt)("h3",{id:"Automation-restrictions"},"Automation restrictions"),(0,a.kt)("p",null,"Cypress is a specialized tool that does one thing really well: end-to-end\ntesting web applications while they are under development. You should not use\nCypress for things it is not designed for such as:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Indexing the web"),(0,a.kt)("li",{parentName:"ul"},"Spidering links"),(0,a.kt)("li",{parentName:"ul"},"Performance testing"),(0,a.kt)("li",{parentName:"ul"},"Scripting 3rd party sites")),(0,a.kt)("p",null,"There are other excellent tools that are optimized for doing each item listed\nabove."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"sweet spot")," of Cypress is to be used as a tool to test your own\napplication ",(0,a.kt)("strong",{parentName:"p"},"as you build it"),". It is built for developers and QA engineers,\nnot manual testers or exploratory testing."),(0,a.kt)("h3",{id:"Inside-the-browser"},"Inside the browser"),(0,a.kt)("p",null,"In case you missed it before - Cypress tests run inside of the browser! This\nmeans we can do things nobody else can. There is no object serialization or JSON\nwire protocols. You have real, native access to everything in your application\nunder test. It is impossible for Cypress to 'miss' elements and it always knows\nthe moment your application fires any kind of event."),(0,a.kt)("p",null,"But what this also means is that your test code ",(0,a.kt)("strong",{parentName:"p"},"is being evaluated inside the\nbrowser"),". Test code is not evaluated in Node, or any other server side\nlanguage. The ",(0,a.kt)("strong",{parentName:"p"},"only")," language we will ever support is the language of the web:\nJavaScript."),(0,a.kt)("p",null,"This trade-off means it makes it a little bit harder to communicate with the\nback end - like your server or database. You will not be able to connect or\nimport those server-side libraries or modules directly. Although you can require\n",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules")," which can be used in the browser. Additionally, you have the\nability to use Node to import or talk directly to your back end scripts using\n",(0,a.kt)("a",{parentName:"p",href:"/api/plugins/writing-a-plugin"},"our Plugins API")," or\n",(0,a.kt)("a",{parentName:"p",href:"/api/commands/task"},"cy.task()"),"."),(0,a.kt)("p",null,"To talk to your database or server you need to use the\n",(0,a.kt)("a",{parentName:"p",href:"/api/commands/exec"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.exec()")),", ",(0,a.kt)("a",{parentName:"p",href:"/api/commands/task"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.task()")),", or\n",(0,a.kt)("a",{parentName:"p",href:"/api/commands/request"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.request()"))," commands. That means you will need to\nexpose a way to seed and setup your database. This really is not that hard, but\nit might take a bit more elbow grease than other testing tools written in your\nback end language."),(0,a.kt)("p",null,"The trade-off here is that doing everything in the browser (basically all of\nyour tests) is a much better experience in Cypress. But doing things outside of\nthe browser may take a little extra work."),(0,a.kt)("p",null,"In the future we ",(0,a.kt)("strong",{parentName:"p"},"do")," have plans to release back end adapters for other\nlanguages."),(0,a.kt)("h3",{id:"Multiple-browsers-open-at-the-same-time"},"Multiple browsers open at the same time"),(0,a.kt)("p",null,"Cypress does not support controlling more than 1 open browser at a time."),(0,a.kt)("p",null,"With that said, except in the most unusual and rare circumstances, you can still\ntest most application behavior without opening multiple browsers at the same\ntime."),(0,a.kt)("p",null,"You may ask about this functionality like this:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"I'm trying to test a chat application. Can I run more than one browser at a\ntime with Cypress?")),(0,a.kt)("p",null,"Whether you are testing a chat application or anything else - what you are\nreally asking about is testing collaboration. But, ",(0,a.kt)("strong",{parentName:"p"},"you don't need to recreate\nthe entire environment in order to test collaboration with 100% coverage"),"."),(0,a.kt)("p",null,"Doing it this way can be faster, more accurate, and more scalable."),(0,a.kt)("p",null,"While outside the scope of this article, you could test a chat application using\nthe following principles. Each one will incrementally introduce more\ncollaboration:"),(0,a.kt)("h4",{id:"1-Use-only-the-browser"},"1. Use only the browser:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"    \u2193\n\u2190 browser \u2192\n    \u2191\n")),(0,a.kt)("p",null,'Avoid the server, invoke your JavaScript callbacks manually thereby simulating\nwhat happens when "notifications come in", or "users leave the chat" purely in\nthe browser.'),(0,a.kt)("p",null,"You can ",(0,a.kt)("a",{parentName:"p",href:"/api/commands/stub"},"stub")," everything and simulate every single\nscenario. Chat messages, offline messages, connections, reconnections,\ndisconnections, group chat, etc. Everything that happens inside of the browser\ncan be fully tested. Requests leaving the browser could also be stubbed and you\ncould assert that the request bodies were correct."),(0,a.kt)("h4",{id:"2-Stub-the-other-connection"},"2. Stub the other connection:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"server \u2192 browser\n            \u2193\nserver \u2190 browser\n  \u2193\n(other connections stubbed)\n  \u2193\nserver \u2192 browser\n")),(0,a.kt)("p",null,'Use your server to receive messages from the browser, and simulate "the other\nparticipant" by sending messages as that participant. This is certainly\napplication specific, but generally you could insert records into the database\nor do whatever it takes for your server to act as if a message of one client\nneeds to be sent back to the browser.'),(0,a.kt)("p",null,"Typically this pattern enables you to avoid making a secondary WebSocket\nconnection and yet still fulfills the bidirectional browser and server contract.\nThis means you could also test edge cases (disconnections, etc) without actually\nhandling real connections."),(0,a.kt)("h4",{id:"3-Introduce-another-connection"},"3: Introduce another connection:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"server \u2192 browser\n            \u2193\nserver \u2190 browser\n  \u2193\nserver \u2192 other connection\n            \u2193\nserver \u2190 other connection\n  \u2193\nserver \u2192 browser\n")),(0,a.kt)("p",null,"To do this - you would need a background process outside of the browser to make\nthe underlying WebSocket connection that you can then communicate with and\ncontrol."),(0,a.kt)("p",null,"You can do this in many ways and here is an example of using an HTTP server to\nact as the client and exposing a REST interface that enables us to control it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Cypress tests\n\n// tell the http server at 8081 to connect to 8080\ncy.request('http://localhost:8081/connect?url=http://localhost:8080')\n\n// tell the http server at 8081 to send a message\ncy.request('http://localhost:8081/message?m=hello')\n\n// tell the http server at 8081 to disconnect\ncy.request('http://localhost:8081/disconnect')\n")),(0,a.kt)("p",null,"And the HTTP server code would look something like this..."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const client = require('socket.io:client')\nconst express = require('express')\n\nconst app = express()\n\nlet socket\n\napp.get('/connect', (req, res) => {\n  const url = req.query.url\n\n  socket = client(url)\n\n  socket.on('connect', () => {\n    res.sendStatus(200)\n  })\n})\n\napp.get('/message', (req, res) => {\n  const msg = req.query.m\n\n  socket.send(msg, () => {\n    res.sendStatus(200)\n  })\n})\n\napp.get('/disconnect', (req, res) => {\n  socket.on('disconnect', () => {\n    res.sendStatus(200)\n  })\n\n  socket.disconnect()\n})\n\napp.listen(8081, () => {})\n")),(0,a.kt)("p",null,"This avoids ever needing a second open browser, but still gives you an\nend-to-end test that provides 100% confidence that the two clients can\ncommunicate with each other."))}p.isMDXComponent=!0}}]);