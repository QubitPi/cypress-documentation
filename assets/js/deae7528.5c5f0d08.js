"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[7936],{3905:(e,n,s)=>{s.d(n,{Zo:()=>c,kt:()=>y});var t=s(7294);function a(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function i(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,t)}return s}function r(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?i(Object(s),!0).forEach((function(n){a(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function o(e,n){if(null==e)return{};var s,t,a=function(e,n){if(null==e)return{};var s,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)s=i[t],n.indexOf(s)>=0||(a[s]=e[s]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)s=i[t],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(a[s]=e[s])}return a}var l=t.createContext({}),p=function(e){var n=t.useContext(l),s=n;return e&&(s="function"==typeof e?e(n):r(r({},n),e)),s},c=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var s=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(s),m=a,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return s?t.createElement(y,r(r({ref:n},c),{},{components:s})):t.createElement(y,r({ref:n},c))}));function y(e,n){var s=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=s.length,r=new Array(i);r[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[d]="string"==typeof e?e:a,r[1]=o;for(var p=2;p<i;p++)r[p]=s[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,s)}m.displayName="MDXCreateElement"},2980:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>y,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var t=s(7462),a=(s(7294),s(3905));const i={title:"Cypress.session"},r=void 0,o={unversionedId:"api/cypress-api/session",id:"api/cypress-api/session",title:"Cypress.session",description:"Cypress.session is a collection of async session-related helper methods",source:"@site/docs/api/cypress-api/session.mdx",sourceDirName:"api/cypress-api",slug:"/api/cypress-api/session",permalink:"/cypress-documentation/api/cypress-api/session",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/cypress-api/session.mdx",tags:[],version:"current",lastUpdatedAt:1702621628,formattedLastUpdatedAt:"Dec 15, 2023",frontMatter:{title:"Cypress.session"},sidebar:"api",previous:{title:"Cypress.SelectorPlayground",permalink:"/cypress-documentation/api/cypress-api/selector-playground-api"},next:{title:"Cypress.spec",permalink:"/cypress-documentation/api/cypress-api/spec"}},l={},p=[{value:"Syntax",id:"Syntax",level:2},{value:"Arguments",id:"Arguments",level:3},{value:"Examples",id:"Examples",level:2},{value:"Clearing the all session data",id:"Clearing-the-all-session-data",level:3},{value:"Clearing the current session data when testIsolation is disabled",id:"Clearing-the-current-session-data-when-testIsolation-is-disabled",level:3},{value:"Verified the Applied Session Data",id:"Verified-the-Applied-Session-Data",level:3},{value:"Debugging Cached Session Data",id:"Debugging-Cached-Session-Data",level:3},{value:"See also",id:"See-also",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},d=c("DocsImage"),u=c("Icon"),m={toc:p};function y(e){let{components:n,...s}=e;return(0,a.kt)("wrapper",(0,t.Z)({},m,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Cypress.session")," is a collection of async session-related helper methods\nintended to be used alongside the ",(0,a.kt)("a",{parentName:"p",href:"/api/commands/session"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.session()")),"\ncommand."),(0,a.kt)("h2",{id:"Syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Clear all sessions saved on the backend, including cached global sessions.\nCypress.session.clearAllSavedSessions()\n// Clear all storage and cookie date across all origins associated with the current session.\nCypress.session.clearCurrentSessionData()\n// Get all storage and cookie data across all origins associated with the current session.\nCypress.session.getCurrentSessionData()\n// Get all storage and cookie data saved on the backend associated with the provided session id.\nCypress.session.getSession(id)\n")),(0,a.kt)("p",null,"Clearing all session and automatically re-running the spec\n",(0,a.kt)("inlineCode",{parentName:"p"},"Cypress.session.clearAllSavedSessions()"),' can also be done by clicking the\n"Clear All Sessions" button in the\n',(0,a.kt)("a",{parentName:"p",href:"/api/commands/session#The-Instrument-Panel"},"Sessions Instrument Panel"),"."),(0,a.kt)(d,{src:"/img/api/session/sessions-panel.png",alt:"Sessions Instrument Panel",mdxType:"DocsImage"}),(0,a.kt)("h3",{id:"Arguments"},"Arguments"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(u,{name:"angle-right",mdxType:"Icon"})," id")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"(String)"))),(0,a.kt)("p",null,"The name of the session used to retrieve data storage and cookie data."),(0,a.kt)("h2",{id:"Examples"},"Examples"),(0,a.kt)("h3",{id:"Clearing-the-all-session-data"},"Clearing the all session data"),(0,a.kt)("p",null,"By default, Cypress will clear the current session data ",(0,a.kt)("strong",{parentName:"p"},"before")," each test\nwhen ",(0,a.kt)("inlineCode",{parentName:"p"},"testIsolation")," is enabled. You can also remove all cached session data\nwith ",(0,a.kt)("inlineCode",{parentName:"p"},"Cypress.session.clearAllSavedSessions()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Cypress.session.clearAllSavedSessions()\n")),(0,a.kt)("h3",{id:"Clearing-the-current-session-data-when-testIsolation-is-disabled"},"Clearing the current session data when testIsolation is disabled"),(0,a.kt)("p",null,"By default, Cypress will clear the current session data ",(0,a.kt)("strong",{parentName:"p"},"before")," each test\nwhen ",(0,a.kt)("inlineCode",{parentName:"p"},"testIsolation")," is enabled. If you have disabled ",(0,a.kt)("inlineCode",{parentName:"p"},"testIsolation")," for a\nsuite, it can be helpful to clear the current session data in a ",(0,a.kt)("inlineCode",{parentName:"p"},"before()")," block\nto ensure the suite started in a clean test slate."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"describe('Dashboard', { testIsolation: false }, () => {\n  before(() => {\n    // ensure clean test slate for these tests\n    cy.then(Cypress.session.clearCurrentSessionData)\n  })\n})\n")),(0,a.kt)("h3",{id:"Verified-the-Applied-Session-Data"},"Verified the Applied Session Data"),(0,a.kt)("p",null,"To check all cookies, localStorage and sessionStorage that was applied after\n",(0,a.kt)("inlineCode",{parentName:"p"},"cy.session()")," completes, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Cypress.session.getCurrentSessionData()"),".\nThis can be helpful for quickly analyzing the current browser context while\nwriting your ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.session()")," command."),(0,a.kt)("p",null,"Since this is an all-in-one helper of the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.getAllCookies()"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"cy.getAllLocalStorage()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.getAllSessionStorage()")," commands, we generally\nrecommend leveraging these commands for asserting the correct session data has\nbeen applied in the session validation block."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"it('debug session', () => {\n    cy.session('id', () => {\n        ...\n    })\n    .then(async () => {\n        const sessionData = await Cypress.session.getCurrentSessionData()\n        cy.debug()\n    })\n})\n")),(0,a.kt)("h3",{id:"Debugging-Cached-Session-Data"},"Debugging Cached Session Data"),(0,a.kt)("p",null,"If your session seems to be recreated more than expected, or doesn't seem to be\napplying the cookies, ",(0,a.kt)("inlineCode",{parentName:"p"},"localStorage")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"sessionStorage")," data that you'd expect,\nyou can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Cypress.session.getSession(id)")," to view what session data has been\ncached by ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.session()"),". If you are missing any data, your setup and/or\nvalidate function may not be waiting long enough for all attributes to be\napplied to there page before the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.session()")," command saves and finishes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"it('debug session', () => {\n    cy.session('id', () => {\n        ...\n    })\n    .then(async () => {\n        const sessionData = await Cypress.session.getSession('id')\n        cy.debug()\n    })\n})\n")),(0,a.kt)("h2",{id:"See-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/commands/session"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.session()")))))}y.isMDXComponent=!0}}]);