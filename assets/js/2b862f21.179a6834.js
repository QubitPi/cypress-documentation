"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[4179],{3905:(n,e,t)=>{t.d(e,{Zo:()=>m,kt:()=>u});var a=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function r(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var p=a.createContext({}),l=function(n){var e=a.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},m=function(n){var e=l(n.components);return a.createElement(p.Provider,{value:e},n.children)},c="mdxType",g={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,p=n.parentName,m=r(n,["components","mdxType","originalType","parentName"]),c=l(t),d=o,u=c["".concat(p,".").concat(d)]||c[d]||g[d]||i;return t?a.createElement(u,s(s({ref:e},m),{},{components:t})):a.createElement(u,s({ref:e},m))}));function u(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,s=new Array(i);s[0]=d;var r={};for(var p in e)hasOwnProperty.call(e,p)&&(r[p]=e[p]);r.originalType=n,r[c]="string"==typeof n?n:o,s[1]=r;for(var l=2;l<i;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9095:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var a=t(7462),o=(t(7294),t(3905));const i={title:"Amazon Cognito Authentication",e2eSpecific:!0,slug:"/guides/end-to-end-testing/amazon-cognito-authentication"},s=void 0,r={unversionedId:"guides/end-to-end-testing/testing-strategies/amazon-cognito-authentication",id:"guides/end-to-end-testing/testing-strategies/amazon-cognito-authentication",title:"Amazon Cognito Authentication",description:"What you'll learn",source:"@site/docs/guides/end-to-end-testing/testing-strategies/amazon-cognito-authentication.mdx",sourceDirName:"guides/end-to-end-testing/testing-strategies",slug:"/guides/end-to-end-testing/amazon-cognito-authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/amazon-cognito-authentication",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/end-to-end-testing/testing-strategies/amazon-cognito-authentication.mdx",tags:[],version:"current",lastUpdatedAt:1696480553,formattedLastUpdatedAt:"Oct 5, 2023",frontMatter:{title:"Amazon Cognito Authentication",e2eSpecific:!0,slug:"/guides/end-to-end-testing/amazon-cognito-authentication"},sidebar:"guides",previous:{title:"Testing Your App",permalink:"/cypress-documentation/guides/end-to-end-testing/testing-your-app"},next:{title:"Auth0 Authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/auth0-authentication"}},p={},l=[{value:"What is Amazon Cognito?",id:"What-is-Amazon-Cognito",level:2},{value:"Authentication with Amazon Cognito",id:"Authentication-with-Amazon-Cognito",level:2},{value:"Amazon Cognito Setup",id:"Amazon-Cognito-Setup",level:2},{value:"Setting Amazon Cognito app credentials in Cypress",id:"Setting-Amazon-Cognito-app-credentials-in-Cypress",level:2},{value:"Custom Command for Amazon Cognito Authentication",id:"Custom-Command-for-Amazon-Cognito-Authentication",level:2},{value:"Login with <code>cy.origin()</code>",id:"Login-with-cyorigin",level:3},{value:"Programmatic Login",id:"Programmatic-Login",level:3},{value:"Adapting an Amazon Cognito App for Testing",id:"Adapting-an-Amazon-Cognito-App-for-Testing",level:3},{value:"Adapting the back end",id:"Adapting-the-back-end",level:4},{value:"Adapting the front end",id:"Adapting-the-front-end",level:4}],m=n=>function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)},c=m("Icon"),g=m("CypressConfigFileTabs"),d=m("DocsVideo"),u={toc:l};function h(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("h2",{parentName:"admonition",id:"What-youll-learn"},(0,o.kt)(c,{name:"graduation-cap",mdxType:"Icon"})," What you'll learn"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Log in to ",(0,o.kt)("a",{parentName:"li",href:"https://aws.amazon.com/cognito"},"Amazon Cognito")," through the UI with\n",(0,o.kt)("a",{parentName:"li",href:"/api/commands/origin"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()"))),(0,o.kt)("li",{parentName:"ul"},"Programmatically authenticate with\n",(0,o.kt)("a",{parentName:"li",href:"https://aws.amazon.com/cognito"},"Amazon Cognito")," via a custom Cypress command"),(0,o.kt)("li",{parentName:"ul"},"Adapting your ",(0,o.kt)("a",{parentName:"li",href:"https://aws.amazon.com/cognito"},"Amazon Cognito")," application for\nprogrammatic authentication during testing"))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Authenticate by visiting a different domain with\n",(0,o.kt)("a",{parentName:"strong",href:"/api/commands/origin"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()")))),(0,o.kt)("p",{parentName:"admonition"},"Typically, logging in a user within your app by authenticating via a third-party\nprovider requires visiting a login page hosted on a different domain. Before\nCypress ",(0,o.kt)("a",{parentName:"p",href:"https://on.cypress.io/changelog#12-0-0"},"v12.0.0"),", Cypress tests were\nlimited to visiting domains of the same origin, making programmatic login the\nonly option for authenticating users with a third-party API. As of Cypress\n",(0,o.kt)("a",{parentName:"p",href:"https://on.cypress.io/changelog#12-0-0"},"v12.0.0"),", Cypress tests are no longer\nlimited to visiting domains of a single origin, meaning you can easily\nauthenticate to federated AWS Cognito via the UI!")),(0,o.kt)("h2",{id:"What-is-Amazon-Cognito"},"What is Amazon Cognito?"),(0,o.kt)("p",null,"Amazon ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Cognito")," is an authentication provider\napart of ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com"},"Amazon Web Services (AWS)"),"."),(0,o.kt)("p",null,'It "lets you add user sign-up, sign-in, and access control to your web and\nmobile apps quickly and easily" and "scales to millions of users and supports\nsign-in with social identity providers, such as Facebook, Google, and Amazon,\nand enterprise identity providers via SAML 2.0."'),(0,o.kt)("h2",{id:"Authentication-with-Amazon-Cognito"},"Authentication with Amazon Cognito"),(0,o.kt)("p",null,"The documentation for ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito"),"\nrecommends using the\n",(0,o.kt)("a",{parentName:"p",href:"https://aws-amplify.github.io/amplify-js/api/classes/authclass.html"},"AWS Amplify Framework Authentication Library"),"\nfrom the ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/amplify/framework/"},"AWS Amplify Framework")," to\ninteract with a deployed ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito"),"\ninstance."),(0,o.kt)("p",null,"Using the\n",(0,o.kt)("a",{parentName:"p",href:"https://aws-amplify.github.io/amplify-js/api/classes/authclass.html"},"AWS Amplify Framework Authentication Library"),",\nwe are able to programmatically drive the creation and authentication of users\nagainst a fully deployed back end."),(0,o.kt)("p",null,"This illustrates the limited code from the\n",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/amplify/framework/"},"AWS Amplify Framework")," needed to\nprogrammatically log an existing a user into an application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Add 'aws-amplify' library into your application\n\n// Configure Auth category with your Amazon Cognito credentials\nAmplify.configure({\n  Auth: {\n    identityPoolId: 'XX-XXXX-X:XXXXXXXX-XXXX', // Amazon Cognito Identity Pool ID\n    region: 'XX-XXXX-X', // Amazon Cognito Region\n  },\n})\n\n// Call Auth.signIn with user credentials\nAuth.signIn(username, password)\n  .then((user) => console.log(user))\n  .catch((err) => console.log(err))\n")),(0,o.kt)("h2",{id:"Amazon-Cognito-Setup"},"Amazon Cognito Setup"),(0,o.kt)("p",null,"If not already setup, you will need to\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.amplify.aws/start/getting-started/installation/q/integration/react#sign-up-for-an-aws-account"},"create an account"),"\nwith ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com"},"Amazon Web Services (AWS)"),"."),(0,o.kt)("p",null,"An ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito")," integration is available in\nthe\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),"."),(0,o.kt)("p",null,"Clone the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),"\nand install the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.amplify.aws/CLI"},"AWS Amazon Amplify CLI")," as\nfollows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"npm install -g @aws-amplify/cli\n")),(0,o.kt)("p",null,"The\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App")," is\nconfigured with an optional ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito"),"\ninstance via the\n",(0,o.kt)("a",{parentName:"p",href:"https://aws-amplify.github.io/amplify-js/api/classes/authclass.html"},"AWS Amplify Framework Authentication Library"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://docs.amplify.aws/CLI"},"AWS Amazon Amplify CLI")," is used to provision\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com"},"Amazon Web Services (AWS)")," infrastructure needed to\nconfigure your environment and cloud resources."),(0,o.kt)("p",null,"First, run the\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.amplify.aws/cli/start/workflows#initialize-new-project"},"amplify init"),"\ncommand to initialize the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".\nThis will provision the project with your ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com"},"AWS"),"\ncredentials."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"amplify init\n")),(0,o.kt)("p",null,"Next, run the\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.amplify.aws/cli/start/workflows#amplify-push"},"amplify push"),"\ncommand to create the ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito")," resources\nin the cloud:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"amplify push\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("strong",null,"Note"),(0,o.kt)("p",{parentName:"admonition"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn dev:cognito")," command when starting the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,o.kt)("h2",{id:"Setting-Amazon-Cognito-app-credentials-in-Cypress"},"Setting Amazon Cognito app credentials in Cypress"),(0,o.kt)("p",null,"First, we need to configure Cypress to use the\n",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"AWS Cognito")," environment variables set in the\n",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file. In addition, we are using the ",(0,o.kt)("inlineCode",{parentName:"p"},"aws-exports.js")," supplied during the\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.amplify.aws/CLI"},"AWS Amplify CLI")," build process."),(0,o.kt)("cypress-config-example",null,(0,o.kt)(g,{mdxType:"CypressConfigFileTabs"},(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n// AWS exports\nconst awsConfig = require('./aws-exports-es5.js')\n\nmodule.exports = defineConfig({\n  env: {\n    cognito_username: process.env.AWS_COGNITO_USERNAME,\n    cognito_password: process.env.AWS_COGNITO_PASSWORD,\n    awsConfig: awsConfig.default,\n  },\n})\n")),(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n// AWS exports\nconst awsConfig = require('./aws-exports-es5.js')\n\nexport default defineConfig({\n  env: {\n    cognito_username: process.env.AWS_COGNITO_USERNAME,\n    cognito_password: process.env.AWS_COGNITO_PASSWORD,\n    awsConfig: awsConfig.default,\n  },\n})\n")))),(0,o.kt)("h2",{id:"Custom-Command-for-Amazon-Cognito-Authentication"},"Custom Command for Amazon Cognito Authentication"),(0,o.kt)("p",null,"There are two ways you can authenticate to AWS Cognito:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/guides/end-to-end-testing/amazon-cognito-authentication#Login-with-cy-origin"},"Login with ",(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/guides/end-to-end-testing/amazon-cognito-authentication#Programmatic-Login"},"Programmatic Access"))),(0,o.kt)("h3",{id:"Login-with-cyorigin"},"Login with ",(0,o.kt)("a",{parentName:"h3",href:"/api/commands/origin"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()"))),(0,o.kt)("p",null,"Next, we'll write a custom command called ",(0,o.kt)("inlineCode",{parentName:"p"},"loginByCognito")," to perform a login to\n",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito"),". This command will use\n",(0,o.kt)("a",{parentName:"p",href:"/api/commands/origin"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()"))," to"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"navigate to the Cognito origin"),(0,o.kt)("li",{parentName:"ol"},"input user credentials"),(0,o.kt)("li",{parentName:"ol"},"sign in and redirect back to the\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App")),(0,o.kt)("li",{parentName:"ol"},"cache the results with ",(0,o.kt)("a",{parentName:"li",href:"/api/commands/session"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.session()")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// cypress/support/auth-provider-commands/cognito.ts\n// Amazon Cognito\nconst loginToCognito = (username: string, password: string) => {\n  Cypress.log({\n    displayName: 'COGNITO LOGIN',\n    message: [`\ud83d\udd10 Authenticating | ${username}`],\n    autoEnd: false,\n  })\n\n  cy.visit('/')\n  cy.contains('Sign in with AWS', {\n    includeShadowDom: true,\n  }).click()\n\n  cy.origin(\n    Cypress.env('cognito_domain'),\n    {\n      args: {\n        username,\n        password,\n      },\n    },\n    ({ username, password }) => {\n      // Cognito log in page has some elements of the same id but are off screen.\n      // We only want the visible elements to log in\n      cy.get('input[name=\"username\"]:visible').type(username)\n      cy.get('input[name=\"password\"]:visible').type(password, {\n        // use log: false to prevent your password from showing in the Command Log\n        log: false,\n      })\n      cy.get('input[name=\"signInSubmitButton\"]:visible').click()\n    }\n  )\n\n  // give a few seconds for redirect to settle\n  cy.wait(2000)\n\n  // verify we have made it passed the login screen\n  cy.contains('Get Started').should('be.visible')\n}\n\n// right now our custom command is light. More on this later!\nCypress.Commands.add('loginByCognito', (username, password) => {\n  return loginToCognito(username, password)\n})\n")),(0,o.kt)("p",null,"Now, we can use our ",(0,o.kt)("inlineCode",{parentName:"p"},"loginByCognito")," command in the test. Below is our test to\nlogin as a user via ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito"),", complete\nthe onboarding process and logout."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/tests/ui-auth-providers/cognito.spec.ts"},"runnable version of this test"),"\nis in the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"describe('Cognito', function () {\n  beforeEach(function () {\n    // Seed database with test data\n    cy.task('db:seed')\n\n    // login via Amazon Cognito via cy.origin()\n    cy.loginByCognito(\n      Cypress.env('cognito_username'),\n      Cypress.env('cognito_password')\n    )\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n")),(0,o.kt)(d,{src:"https://vimeo.com/789093851",mdxType:"DocsVideo"}),(0,o.kt)("p",null,"Lastly, we can refactor our login command to take advantage of\n",(0,o.kt)("a",{parentName:"p",href:"/api/commands/session"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.session()"))," to store our logged in user so we don't\nhave to reauthenticate with everything test."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// cypress/support/auth-provider-commands/cognito.ts\n// Amazon Cognito\nCypress.Commands.add('loginByCognito', (username, password) => {\n  cy.session(\n    `cognito-${username}`,\n    () => {\n      return loginToCognito(username, password)\n    },\n    {\n      validate() {\n        cy.visit('/')\n        // revalidate our session to make sure we are logged in\n        cy.contains('Get Started').should('be.visible')\n      },\n    }\n  )\n})\n")),(0,o.kt)(d,{src:"https://vimeo.com/789093817",mdxType:"DocsVideo"}),(0,o.kt)("h3",{id:"Programmatic-Login"},"Programmatic Login"),(0,o.kt)("p",null,"Next, we'll write a command to perform a programmatic login into\n",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito")," and set items in ",(0,o.kt)("inlineCode",{parentName:"p"},"localStorage"),"\nwith the authenticated users details, which we will use in our application code\nto verify we are authenticated under test."),(0,o.kt)("p",null,"In this ",(0,o.kt)("inlineCode",{parentName:"p"},"loginByCognitoApi")," command, we call ",(0,o.kt)("inlineCode",{parentName:"p"},"Auth.signIn"),", then use that\nresponse to set the items inside of localStorage for the UI to know that our\nuser is logged into the application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// cypress/support/auth-provider-commands/cognito.ts\n\nimport Amplify, { Auth } from 'aws-amplify'\n\nAmplify.configure(Cypress.env('awsConfig'))\n\n// Amazon Cognito\nCypress.Commands.add('loginByCognitoApi', (username, password) => {\n  const log = Cypress.log({\n    displayName: 'COGNITO LOGIN',\n    message: [`\ud83d\udd10 Authenticating | ${username}`],\n    // @ts-ignore\n    autoEnd: false,\n  })\n\n  log.snapshot('before')\n\n  const signIn = Auth.signIn({ username, password })\n\n  cy.wrap(signIn, { log: false }).then((cognitoResponse) => {\n    const keyPrefixWithUsername = `${cognitoResponse.keyPrefix}.${cognitoResponse.username}`\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.idToken`,\n      cognitoResponse.signInUserSession.idToken.jwtToken\n    )\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.accessToken`,\n      cognitoResponse.signInUserSession.accessToken.jwtToken\n    )\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.refreshToken`,\n      cognitoResponse.signInUserSession.refreshToken.token\n    )\n\n    window.localStorage.setItem(\n      `${keyPrefixWithUsername}.clockDrift`,\n      cognitoResponse.signInUserSession.clockDrift\n    )\n\n    window.localStorage.setItem(\n      `${cognitoResponse.keyPrefix}.LastAuthUser`,\n      cognitoResponse.username\n    )\n\n    window.localStorage.setItem('amplify-authenticator-authState', 'signedIn')\n    log.snapshot('after')\n    log.end()\n  })\n\n  cy.visit('/')\n})\n")),(0,o.kt)("p",null,"Finally, we can use our ",(0,o.kt)("inlineCode",{parentName:"p"},"loginByCognitoApi")," command in at test. Below is our\ntest to login as a user via ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito"),",\ncomplete the onboarding process and logout."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/tests/ui-auth-providers/cognito.spec.ts"},"runnable version of this test"),"\nis in the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"describe('Cognito', function () {\n  beforeEach(function () {\n    // Seed database with test data\n    cy.task('db:seed')\n\n    // Programmatically login via Amazon Cognito API\n    cy.loginByCognitoApi(\n      Cypress.env('cognito_username'),\n      Cypress.env('cognito_password')\n    )\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n")),(0,o.kt)("h3",{id:"Adapting-an-Amazon-Cognito-App-for-Testing"},"Adapting an Amazon Cognito App for Testing"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("strong",null,"Programmatic Login"),(0,o.kt)("p",{parentName:"admonition"},"Unlike programmatic login, authenticating with\n",(0,o.kt)("a",{parentName:"p",href:"/api/commands/origin"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()"))," does not require adapting the application\nto work. This step is only needed if implementing programmatic login.")),(0,o.kt)("p",null,"The\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App")," is\nused and provides configuration and runnable code for both the React SPA and the\nExpress back end."),(0,o.kt)("p",null,"The front end uses the\n",(0,o.kt)("a",{parentName:"p",href:"https://aws-amplify.github.io/amplify-js/api/classes/authclass.html"},"AWS Amplify Framework Authentication Library"),".\nThe back end uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/auth0/express-jwt"},"express-jwt")," to\nvalidate JWTs from ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito"),"."),(0,o.kt)("h4",{id:"Adapting-the-back-end"},"Adapting the back end"),(0,o.kt)("p",null,"In order to validate API requests from the frontend, we install\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/auth0/express-jwt"},"express-jwt")," and\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/auth0/node-jwks-rsa"},"jwks-rsa")," and configure validation for\nJWT's from ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// backend/helpers.ts\n// ... initial imports\nimport jwt from 'express-jwt'\nimport jwksRsa from 'jwks-rsa'\n\n// ...\n\nconst awsCognitoJwtConfig = {\n  secret: jwksRsa.expressJwtSecret({\n    jwksUri: `https://cognito-idp.${awsConfig.aws_cognito_region}.amazonaws.com/${awsConfig.aws_user_pools_id}/.well-known/jwks.json`,\n  }),\n\n  issuer: `https://cognito-idp.${awsConfig.aws_cognito_region}.amazonaws.com/${awsConfig.aws_user_pools_id}`,\n  algorithms: ['RS256'],\n}\n\nexport const checkCognitoJwt = jwt(awsCognitoJwtConfig).unless({\n  path: ['/testData/*'],\n})\n")),(0,o.kt)("p",null,"Once this helper is defined, we can use globally to apply to all routes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// backend/app.ts\n// initial imports ...\nimport { checkCognitoJwt } from './helpers'\n\n// ...\n\nif (process.env.REACT_APP_AWS_COGNITO) {\n  app.use(checkCognitoJwt)\n}\n\n// routes ...\n")),(0,o.kt)("h4",{id:"Adapting-the-front-end"},"Adapting the front end"),(0,o.kt)("p",null,"We need to update our front end React app to allow for authentication with\n",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito")," using the\n",(0,o.kt)("a",{parentName:"p",href:"https://aws-amplify.github.io/amplify-js/api/classes/authclass.html"},"AWS Amplify Framework Authentication Library"),"."),(0,o.kt)("p",null,"First, we create a ",(0,o.kt)("inlineCode",{parentName:"p"},"AppCognito.tsx")," container, based off of the ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx"),"\ncomponent."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," hook is added to get the access token for the authenticated user\nand send an ",(0,o.kt)("inlineCode",{parentName:"p"},"COGNITO")," event with the ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"token")," objects to work with the\nexisting authentication layer (",(0,o.kt)("inlineCode",{parentName:"p"},"authMachine.ts"),"). We use the\n",(0,o.kt)("inlineCode",{parentName:"p"},"AmplifyAuthenticator")," component to provide the login form from\n",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/cognito"},"Amazon Cognito"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// src/containers/AppOkta.tsx\n// initial imports ...\nimport Amplify from "aws-amplify";\nimport { AmplifyAuthenticator, AmplifySignUp, AmplifySignIn } from "@aws-amplify/ui-react";\nimport { AuthState, onAuthUIStateChange } from "@aws-amplify/ui-components";\n\nimport awsConfig from "../aws-exports";\n\nAmplify.configure(awsConfig);\n\n// ...\n\nconst AppCognito: React.FC = () => {\n\n  // ...\n\n  useEffect(() => {\n    return onAuthUIStateChange((nextAuthState, authData) => {\n      if (nextAuthState === AuthState.SignedIn) {\n        authService.send("COGNITO", { user: authData });\n      }\n    });\n  }, []);\n\n  // ...\n\n  return isLoggedIn ? (\n    // ...\n  ) : (\n    <Container component="main" maxWidth="xs">\n      <CssBaseline />\n      <AmplifyAuthenticator usernameAlias="email">\n        <AmplifySignUp slot="sign-up" usernameAlias="email" />\n        <AmplifySignIn slot="sign-in" usernameAlias="email" />\n      </AmplifyAuthenticator>\n    </Container>\n  );\n};\n\nexport default AppCognito;\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("strong",null,"Try it out"),(0,o.kt)("p",{parentName:"admonition"},"The complete\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppCognito.tsx"},"AppCognito.tsx component"),"\nis in the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,o.kt)("p",null,"Next, we update our entry point (",(0,o.kt)("inlineCode",{parentName:"p"},"index.tsx"),") to use our ",(0,o.kt)("inlineCode",{parentName:"p"},"AppCognito.tsx"),"\ncomponent."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/index.tsx\n// ... initial imports\nimport AppCognito from './containers/AppCognito'\n\n// ...\n\nif (process.env.REACT_APP_AWS_COGNITO) {\n  ReactDOM.render(\n    <Router history={history}>\n      <ThemeProvider theme={theme}>\n        <AppCognito />\n      </ThemeProvider>\n    </Router>,\n    document.getElementById('root')\n  )\n}\n")))}h.isMDXComponent=!0}}]);