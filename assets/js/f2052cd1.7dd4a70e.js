"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[4337],{3909:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>a});var s=i(5893),o=i(1151);const t={title:"Configuration API"},r=void 0,l={id:"api/plugins/configuration-api",title:"Configuration API",description:"Cypress enables you to dynamically modify configuration values and environment",source:"@site/docs/api/plugins/configuration-api.mdx",sourceDirName:"api/plugins",slug:"/api/plugins/configuration-api",permalink:"/api/plugins/configuration-api",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/plugins/configuration-api.mdx",tags:[],version:"current",lastUpdatedAt:1728610821,formattedLastUpdatedAt:"Oct 11, 2024",frontMatter:{title:"Configuration API"},sidebar:"api",previous:{title:"Browser Launch API",permalink:"/api/plugins/browser-launch-api"},next:{title:"Preprocessors API",permalink:"/api/plugins/preprocessors-api"}},c={},a=[{value:"Usage",id:"Usage",level:2},{value:"Promises",id:"Promises",level:3},{value:"Examples",id:"Examples",level:2},{value:"Customize available browsers",id:"Customize-available-browsers",level:3},{value:"Switch between multiple configuration files",id:"Switch-between-multiple-configuration-files",level:3},{value:"Test Type-Specific Plugins",id:"Test-Type-Specific-Plugins",level:3},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components},{CypressConfigFileTabs:i,DocsImage:t,WarningPluginsFile:r,WarningSetupNodeEvents:l}=n;return i||p("CypressConfigFileTabs",!0),t||p("DocsImage",!0),r||p("WarningPluginsFile",!0),l||p("WarningSetupNodeEvents",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Cypress enables you to dynamically modify configuration values and environment\nvariables from your Cypress configuration."}),"\n",(0,s.jsx)(n.h2,{id:"Usage",children:"Usage"}),"\n",(0,s.jsx)(l,{}),"\n",(0,s.jsxs)(n.p,{children:["To modify configuration, you return a config object from ",(0,s.jsx)(n.code,{children:"setupNodeEvents"}),"\nwithin this exported function."]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      console.log(config) // see everything in here!\n\n      // modify config values\n      config.defaultCommandTimeout = 10000\n      config.baseUrl = 'https://staging.acme.com'\n\n      // modify env var value\n      config.env.ENVIRONMENT = 'staging'\n\n      // IMPORTANT return the updated config object\n      return config\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      console.log(config) // see everything in here!\n\n      // modify config values\n      config.defaultCommandTimeout = 10000\n      config.baseUrl = 'https://staging.acme.com'\n\n      // modify env var value\n      config.env.ENVIRONMENT = 'staging'\n\n      // IMPORTANT return the updated config object\n      return config\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsxs)(n.p,{children:["Whenever you return an object from your ",(0,s.jsx)(n.code,{children:"setupNodeEvents"}),' function, Cypress will\ntake this and "diff" it against the original configuration and automatically set\nthe resolved values to point to what you returned.']}),"\n",(0,s.jsx)(n.p,{children:"If you don't return an object, then configuration will not be modified."}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"config"})," object also includes the following extra values that are not part\nof the standard configuration. ",(0,s.jsxs)(n.strong,{children:["These values are read only and cannot be\nmodified from the ",(0,s.jsx)(n.code,{children:"setupNodeEvents"})," function in the Cypress configuration."]})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"configFile"}),": The absolute path to the Cypress configuration file. See the\n",(0,s.jsx)(n.a,{href:"/guides/guides/command-line#cypress-open",children:"--config-file"})," and\n",(0,s.jsx)(n.a,{href:"/guides/guides/module-api",children:"configFile"})," docs for more information on this\nvalue."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"projectRoot"}),": The absolute path to the root of the project (e.g.\n",(0,s.jsx)(n.code,{children:"/Users/me/dev/my-project"}),")"]}),"\n"]})]}),"\n",(0,s.jsx)(n.p,{children:'Resolved values will show up in the "Settings" tab.'}),"\n",(0,s.jsx)(t,{src:"/img/guides/configuration/plugin-configuration.png",alt:"Resolved configuration in the Desktop app"}),"\n",(0,s.jsx)(n.h3,{id:"Promises",children:"Promises"}),"\n",(0,s.jsxs)(n.p,{children:["Additionally, Cypress will respect and await promises you return. This enables\nyou to perform asynchronous tasks and eventually resolve with the modified\nconfiguration object. See the\n",(0,s.jsx)(n.a,{href:"#Switch-between-multiple-configuration-files",children:"example on switching between multiple configuration files"}),"\nfor a full example."]}),"\n",(0,s.jsx)(n.h2,{id:"Examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"Customize-available-browsers",children:"Customize available browsers"}),"\n",(0,s.jsx)(n.p,{children:"The configuration includes the list of browsers found on your system that are\navailable to Cypress. You can, for example, change or augment that list for\ndifferent testing purposes."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Read our full guide on ",(0,s.jsx)(n.a,{href:"/guides/guides/launching-browsers",children:"Launching Browsers"}),"\nfor more information on how this works."]})}),"\n",(0,s.jsx)(n.h3,{id:"Switch-between-multiple-configuration-files",children:"Switch between multiple configuration files"}),"\n",(0,s.jsx)(r,{}),"\n",(0,s.jsx)(n.p,{children:"This means you can do things like store multiple configuration files and switch\nbetween them like:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"cypress.qa.json"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"cypress.dev.json"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"cypress.prod.json"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"How you choose to organize your configuration and environment variables is up to\nyou."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// promisified fs module\nconst fs = require('fs-extra')\nconst path = require('path')\n\nfunction getConfigurationByFile(file) {\n  const pathToConfigFile = path.resolve('..', 'config', `${file}.json`)\n\n  return fs.readJson(pathToConfigFile)\n}\n\n// plugins file\nmodule.exports = (on, config) => {\n  // accept a configFile value or use development by default\n  const file = config.env.configFile || 'development'\n\n  return getConfigurationByFile(file)\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"You could now swap out configuration + environment variables like so:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cypress run\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cypress run --env configFile=qa\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cypress run --env configFile=staging\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cypress run --env configFile=production\n"})}),"\n",(0,s.jsx)(n.p,{children:"Each of these environments would read in the configuration at these files:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"cypress/config/development.json\ncypress/config/qa.json\ncypress/config/staging.json\ncypress/config/production.json\n"})}),"\n",(0,s.jsx)(n.p,{children:"This would enable you to do things like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// cypress/config/development.json\n\n{\n  "baseUrl": "http://localhost:1234",\n  "env": {\n    "something": "development"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// cypress/config/qa.json\n\n{\n  "baseUrl": "https://qa.acme.com",\n  "env": {\n    "something": "qa"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// cypress/config/staging.json\n\n{\n  "baseUrl": "https://staging.acme.com",\n  "env": {\n    "something": "staging"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// cypress/config/production.json\n\n{\n  "baseUrl": "https://production.acme.com",\n  "env": {\n    "something": "production"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This is a less complicated example. Remember - you have the full power of Node\nat your disposal."}),"\n",(0,s.jsxs)(n.p,{children:["How you choose to edit the configuration is up to you. You don't have to read\noff of the file system - you could store them all in memory inside of\n",(0,s.jsx)(n.a,{href:"/guides/tooling/plugins-guide#Using-a-plugin",children:"setupNodeEvents"})," if you wanted."]}),"\n",(0,s.jsx)(n.h3,{id:"Test-Type-Specific-Plugins",children:"Test Type-Specific Plugins"}),"\n",(0,s.jsxs)(n.p,{children:["You can access the type of tests running via the ",(0,s.jsx)(n.code,{children:"config.testingType"})," property.\nThe testing type is either ",(0,s.jsx)(n.code,{children:"e2e"})," or ",(0,s.jsx)(n.code,{children:"component"})," depending on if the\n",(0,s.jsx)(n.a,{href:"/guides/core-concepts/testing-types#What-is-E2E-Testing",children:"E2E Testing"})," or\n",(0,s.jsx)(n.a,{href:"/guides/core-concepts/testing-types#What-is-Component-Testing",children:"Component Testing"}),"\ntype was selected in the Cypress Launchpad. This allows you to configure test\ntype-specific plugins."]}),"\n",(0,s.jsx)(n.h2,{id:"History",children:"History"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Version"}),(0,s.jsx)(n.th,{children:"Changes"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/guides/references/changelog",children:"7.0.0"})}),(0,s.jsxs)(n.td,{children:["Added ",(0,s.jsx)(n.code,{children:"testingType"})," property to ",(0,s.jsx)(n.code,{children:"config"}),"."]})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"See-also",children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["blog post\n",(0,s.jsx)(n.a,{href:"https://glebbahmutov.com/blog/keep-passwords-secret-in-e2e-tests/",children:"Keep passwords secret in E2E tests"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>r});var s=i(7294);const o={},t=s.createContext(o);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);