"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[1665],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,k=u["".concat(o,".").concat(c)]||u[c]||m[c]||l;return n?r.createElement(k,s(s({ref:t},d),{},{components:n})):r.createElement(k,s({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<l;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2287:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={title:"Module API"},s=void 0,i={unversionedId:"guides/guides/module-api",id:"guides/guides/module-api",title:"Module API",description:"You can require Cypress as a node module from your application under test and",source:"@site/docs/guides/guides/module-api.mdx",sourceDirName:"guides/guides",slug:"/guides/guides/module-api",permalink:"/guides/guides/module-api",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/guides/module-api.mdx",tags:[],version:"current",lastUpdatedAt:1717543563,formattedLastUpdatedAt:"Jun 4, 2024",frontMatter:{title:"Module API"},sidebar:"guides",previous:{title:"Launching Browsers",permalink:"/guides/guides/launching-browsers"},next:{title:"Network Requests",permalink:"/guides/guides/network-requests"}},o={},p=[{value:"<code>cypress.run()</code>",id:"cypressrun",level:2},{value:"Options",id:"Options",level:3},{value:"Examples",id:"Examples",level:3},{value:"Run a single spec file",id:"Run-a-single-spec-file",level:4},{value:"Run specs using wildcard",id:"Run-specs-using-wildcard",level:4},{value:"Programmatically control which browser to run",id:"Programmatically-control-which-browser-to-run",level:4},{value:"Use modern syntax",id:"Use-modern-syntax",level:4},{value:"Results",id:"Results",level:3},{value:"Handling errors",id:"Handling-errors",level:3},{value:"<code>cypress.open()</code>",id:"cypressopen",level:2},{value:"Options",id:"Options-1",level:3},{value:"Example",id:"Example",level:3},{value:"<code>cypress.cli</code>",id:"cypresscli",level:2},{value:"<code>parseRunArguments()</code>",id:"parseRunArguments",level:3},{value:"History",id:"History",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"You can require Cypress as a node module from your application under test and\nrun Cypress via Node.js. This can be useful when you want access to the test\nresults directly after the run. With this workflow, for example, you can:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Send a notification about failing tests with included screenshot images"),(0,a.kt)("li",{parentName:"ul"},"Rerun a single failing spec file"),(0,a.kt)("li",{parentName:"ul"},"Kick off other builds or scripts")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("strong",null,"Yarn Plug'n'Play"),(0,a.kt)("p",{parentName:"admonition"},"To run Cypress via Node.js in a\n",(0,a.kt)("a",{parentName:"p",href:"https://yarnpkg.com/features/pnp"},"Yarn Plug'n'Play")," environment, use\n",(0,a.kt)("a",{parentName:"p",href:"https://yarnpkg.com/cli/node"},"yarn node")," instead of\n",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.dev/en/learn/run-nodejs-scripts-from-the-command-line/"},"node"),".")),(0,a.kt)("h2",{id:"cypressrun"},(0,a.kt)("inlineCode",{parentName:"h2"},"cypress.run()")),(0,a.kt)("p",null,"Runs Cypress tests via Node.js and resolve with all test results. See the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-example-recipes#fundamentals"},"Cypress Module API recipe"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// e2e-run-tests.js\nconst cypress = require('cypress')\n\ncypress.run({\n  reporter: 'junit',\n  browser: 'chrome',\n  config: {\n    baseUrl: 'http://localhost:8080',\n    video: true,\n  },\n  env: {\n    login_url: '/login',\n    products_url: '/products',\n  },\n})\n")),(0,a.kt)("p",null,"You can then run Cypress by running the following in your terminal or an npm\nscript:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"node e2e-run-tests.js\n")),(0,a.kt)("h3",{id:"Options"},"Options"),(0,a.kt)("p",null,"Just like the ",(0,a.kt)("a",{parentName:"p",href:"/guides/guides/command-line"},"Command Line options")," for\n",(0,a.kt)("inlineCode",{parentName:"p"},"cypress run"),", you can pass options that modify how Cypress runs."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Option"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"autoCancelAfterFailures")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"number")," ","|"," ",(0,a.kt)("em",{parentName:"td"},"false")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify the number of failures to cancel a run being recorded to the Cloud or false to disable auto-cancellation.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"browser")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify different browser to run tests in, either by name or by filesystem path")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"ciBuildId")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify a unique identifier for a run to enable ",(0,a.kt)("a",{parentName:"td",href:"/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs"},"grouping")," or ",(0,a.kt)("a",{parentName:"td",href:"/guides/cloud/smart-orchestration/parallelization"},"parallelization"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"config")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"object")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify ",(0,a.kt)("a",{parentName:"td",href:"/guides/references/configuration"},"configuration"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"configFile")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,a.kt)("a",{parentName:"td",href:"/guides/references/configuration#Configuration-file"},"configuration file")," to be used.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"env")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"object")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify ",(0,a.kt)("a",{parentName:"td",href:"/guides/guides/environment-variables"},"environment variables"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"group")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs"},"Group")," recorded tests together under a single run")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"headed")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"Displays the browser instead of running headlessly")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"headless")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"Hide the browser instead of running headed (default during ",(0,a.kt)("inlineCode",{parentName:"td"},"cypress run"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"key")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify your secret record key")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"exit")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"Whether to close Cypress after all tests run")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"parallel")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"Run recorded specs in ",(0,a.kt)("a",{parentName:"td",href:"/guides/cloud/smart-orchestration/parallelization"},"parallel")," across multiple machines")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"port")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"number")),(0,a.kt)("td",{parentName:"tr",align:null},"Override default port")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"project")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Path to a specific project")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"quiet")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"If passed, Cypress output will not be printed to ",(0,a.kt)("inlineCode",{parentName:"td"},"stdout"),". Only output from the configured ",(0,a.kt)("a",{parentName:"td",href:"/guides/tooling/reporters"},"Mocha reporter")," will print.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"record")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"Whether to record the test run")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"reporter")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify a ",(0,a.kt)("a",{parentName:"td",href:"/guides/tooling/reporters"},"Mocha reporter"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"reporterOptions")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"object")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify ",(0,a.kt)("a",{parentName:"td",href:"/guides/tooling/reporters"},"Mocha reporter")," options")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"runnerUi")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"Whether to display the Cypress Runner UI. Defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"false")," when ",(0,a.kt)("a",{parentName:"td",href:"/guides/cloud/test-replay"},"Test Replay")," is enabled. Otherwise defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"true"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"slowTestThreshold")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"number")),(0,a.kt)("td",{parentName:"tr",align:null},'Time, in milliseconds, to consider a test "slow" during ',(0,a.kt)("inlineCode",{parentName:"td"},"cypress run"),". A slow test will display in orange text in the default reporter.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"spec")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify the specs to run, see examples below")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"tag")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Identify a run with a tag or tags")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"testingType")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify the type of tests to execute; either ",(0,a.kt)("inlineCode",{parentName:"td"},"e2e")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"component"),". Defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"e2e"))))),(0,a.kt)("h3",{id:"Examples"},"Examples"),(0,a.kt)("h4",{id:"Run-a-single-spec-file"},"Run a single spec file"),(0,a.kt)("p",null,"Here is an example of programmatically running a spec file. Note that the file\npath is relative to the current working directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// e2e-run-tests.js\nconst cypress = require('cypress')\n\ncypress\n  .run({\n    // the path is relative to the current working directory\n    spec: './cypress/e2e/examples/actions.cy.js',\n  })\n  .then((results) => {\n    console.log(results)\n  })\n  .catch((err) => {\n    console.error(err)\n  })\n")),(0,a.kt)("p",null,"You can then run Cypress by running the following in your terminal or an npm\nscript:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"node e2e-run-tests.js\n")),(0,a.kt)("h4",{id:"Run-specs-using-wildcard"},"Run specs using wildcard"),(0,a.kt)("p",null,"You can pass a wildcard pattern to run all matching spec files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cypress = require('cypress')\n\ncypress.run({\n  // the wildcard path is relative to the current working directory\n  spec: './cypress/e2e/**/api*.js',\n})\n")),(0,a.kt)("h4",{id:"Programmatically-control-which-browser-to-run"},"Programmatically control which browser to run"),(0,a.kt)("p",null,"You can pass a browser option to specify which browser to run tests in so that\nyou can programmatically control which specs to run in each browser."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// run 'node cypress-chrome.js'\nconst cypress = require('cypress')\n\ncypress.run({\n  spec: './cypress/e2e/**/chrome-test*.js',\n  browser: 'chrome',\n})\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// run 'node cypress-firefox.js'\nconst cypress = require('cypress')\n\ncypress.run({\n  spec: './cypress/e2e/**/firefox-test*.js',\n  browser: 'firefox',\n})\n")),(0,a.kt)("h4",{id:"Use-modern-syntax"},"Use modern syntax"),(0,a.kt)("p",null,"If your Node version allows you can use the modern ",(0,a.kt)("inlineCode",{parentName:"p"},"async / await")," syntax to\nwait for the Promise returned by the ",(0,a.kt)("inlineCode",{parentName:"p"},"cypress.run")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const cypress = require('cypress')\n\n;(async () => {\n  const results = await cypress.run()\n  // use the results object\n})()\n")),(0,a.kt)("h3",{id:"Results"},"Results"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cypress.run()")," returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," that resolves with an object containing the\ntests results. A typical run could return something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "cypressVersion": "3.0.2",\n  "endedTestsAt": "2018-07-11T17:53:35.675Z",\n  "browserName": "electron",\n  "browserPath": "path/to/browser",\n  "browserVersion": "59.0.3071.115",\n  "config": {...},\n  "osName": "darwin",\n  "osVersion": "14.5.0",\n  "runs": [{\n    "error": null,\n    "reporter": "spec",\n    "reporterStats": {...},\n    "spec": {...},\n    "stats": {\n      "suites": 1,\n      "tests": 1,\n      "passes": 0,\n      "pending": 0,\n      "skipped": 0,\n      "failures": 1,\n      "startedAt": "2020-08-05T08:38:37.589Z",\n      "endedAt": "2018-07-11T17:53:35.675Z",\n      "duration": 1171\n    },\n    "screenshots": [{\n      "name": null,\n      "takenAt": "2020-08-05T08:52:20.432Z",\n      "path": "User/janelane/my-app/cypress/screenshots/cy.js/test (failed).png",\n      "height": 720,\n      "width": 1280\n    }],\n    "tests": [{\n      "title": [ "test" ],\n      "state": "failed",\n      "displayError": "AssertionError: expected true to be false\\n\' +\n      \'    at Context.eval (...cypress/e2e/cy.js:5:21",\n      "attempts": [{\n        "state": "failed",\n      }],\n    }],\n    "video": "User/janelane/my-app/cypress/videos/abc123.mp4"\n  }],\n  "runUrl": "https://cloud.cypress.io/projects/def456/runs/12",\n  "startedTestsAt": "2018-07-11T17:53:35.463Z",\n  "totalDuration": 212,\n  "totalFailed": 1,\n  "totalPassed": 0,\n  "totalPending": 0,\n  "totalSkipped": 0,\n  "totalSuites": 1,\n  "totalTests": 1,\n}\n')),(0,a.kt)("p",null,"You can find the TypeScript definition for the results object in the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/tree/develop/cli/types"},(0,a.kt)("inlineCode",{parentName:"a"},"cypress/cli/types")," folder"),"."),(0,a.kt)("h3",{id:"Handling-errors"},"Handling errors"),(0,a.kt)("p",null,"Even when tests fail, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," resolves with the test results. The\n",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," is only rejected if Cypress cannot run for some reason (for example if\na binary has not been installed or it cannot find a module dependency). In that\ncase, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," will be rejected with a detailed error."),(0,a.kt)("p",null,"There is a third option - Cypress could run, but the tests could not start for\nsome reason. In that case the resolved value is an object with two fields"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "failures": 1,    // non-zero number\n  "message": "..."  // error message\n}\n')),(0,a.kt)("p",null,"In order to handle these possible errors, you can add a ",(0,a.kt)("inlineCode",{parentName:"p"},"catch")," to\n",(0,a.kt)("inlineCode",{parentName:"p"},"cypress.run()"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// e2e-run-tests.js\nconst cypress = require('cypress')\n\ncypress.run({...})\n.then(result => {\n  if (result.failures) {\n    console.error('Could not execute tests')\n    console.error(result.message)\n    process.exit(result.failures)\n  }\n\n  // print test results and exit\n  // with the number of failed tests as exit code\n  process.exit(result.totalFailed)\n})\n.catch(err => {\n  console.error(err.message)\n  process.exit(1)\n})\n")),(0,a.kt)("h2",{id:"cypressopen"},(0,a.kt)("inlineCode",{parentName:"h2"},"cypress.open()")),(0,a.kt)("p",null,"Open Cypress tests via Node.js."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// e2e-open-tests.js\nconst cypress = require('cypress')\n\ncypress.open({\n  config: {\n    baseUrl: 'http://localhost:8080',\n  },\n  env: {\n    login_url: '/login',\n    products_url: '/products',\n  },\n})\n")),(0,a.kt)("p",null,"You can then open Cypress by running the following in your terminal or an npm\nscript:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"node e2e-open-tests.js\n")),(0,a.kt)("h3",{id:"Options-1"},"Options"),(0,a.kt)("p",null,"Just like the ",(0,a.kt)("a",{parentName:"p",href:"/guides/guides/command-line"},"Command Line options"),", you can pass\noptions that modify how Cypress runs."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Option"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"browser")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify a filesystem path to a custom browser")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"config")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"object")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify ",(0,a.kt)("a",{parentName:"td",href:"/guides/references/configuration"},"configuration"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"configFile")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Path to the ",(0,a.kt)("a",{parentName:"td",href:"/guides/references/configuration#Configuration-file"},"configuration file")," to be used.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"detached")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"Open Cypress in detached mode")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"env")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"object")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify ",(0,a.kt)("a",{parentName:"td",href:"/guides/guides/environment-variables"},"environment variables"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"global")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"Run in global mode")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"port")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"number")),(0,a.kt)("td",{parentName:"tr",align:null},"Override default port")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"project")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Path to a specific project")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"testingType")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Specify the type of tests to execute; either ",(0,a.kt)("inlineCode",{parentName:"td"},"e2e")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"component"),". Defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"e2e"))))),(0,a.kt)("h3",{id:"Example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// e2e-open-tests.js\nconst cypress = require('cypress')\n\ncypress.open({})\n")),(0,a.kt)("p",null,"You can then open Cypress by running the following in your terminal or an npm\nscript:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"node e2e-open-tests.js\n")),(0,a.kt)("h2",{id:"cypresscli"},(0,a.kt)("inlineCode",{parentName:"h2"},"cypress.cli")),(0,a.kt)("h3",{id:"parseRunArguments"},(0,a.kt)("inlineCode",{parentName:"h3"},"parseRunArguments()")),(0,a.kt)("p",null,"If you are writing a tool that wraps around the ",(0,a.kt)("inlineCode",{parentName:"p"},"cypress.run()")," command, you\nmight want to parse user-supplied command line arguments using the same logic as\n",(0,a.kt)("inlineCode",{parentName:"p"},"cypress run")," uses. In that case, you can use the included ",(0,a.kt)("inlineCode",{parentName:"p"},"parseRunArguments"),"\nfunction."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// wrapper.js\nconst cypress = require('cypress')\n\nconst runOptions = await cypress.cli.parseRunArguments(process.argv.slice(2))\nconst results = await cypress.run(runOptions)\n// process the \"cypress.run()\" results\n")),(0,a.kt)("p",null,"An example use running from your terminal could be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"node ./wrapper cypress run --browser chrome --config ...\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," the arguments passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"parseRunArguments")," should start with\n",(0,a.kt)("inlineCode",{parentName:"p"},"cypress run"),"."),(0,a.kt)("p",null,"We use CLI parsing and calling ",(0,a.kt)("inlineCode",{parentName:"p"},"cypress.run")," to\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bahmutov/cypress-repeat"},"repeat tests to find flaky tests"),"\nand to\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bahmutov/cypress-expect"},"validate test numbers after a test run"),".\nRead\n",(0,a.kt)("a",{parentName:"p",href:"https://glebbahmutov.com/blog/wrap-cypress-using-npm/"},"Wrap Cypress Using npm Module API"),"\nfor more examples."),(0,a.kt)("h2",{id:"History"},"History"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Version"),(0,a.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/references/changelog#12-6-0"},"12.6.0")),(0,a.kt)("td",{parentName:"tr",align:null},"Added ",(0,a.kt)("inlineCode",{parentName:"td"},"autoCancelAfterFailures")," to run options.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/references/changelog#10-0-0"},"10.0.0")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"slowTestThreshold")," is now scoped to each testing type.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/references/changelog#8-7-0"},"8.7.0")),(0,a.kt)("td",{parentName:"tr",align:null},"Added ",(0,a.kt)("inlineCode",{parentName:"td"},"slowTestThreshold")," configuration option.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/references/changelog#7-3-0"},"7.3.0")),(0,a.kt)("td",{parentName:"tr",align:null},"Added ",(0,a.kt)("inlineCode",{parentName:"td"},"testingType")," configuration option.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/references/changelog#5-0-0"},"5.0.0")),(0,a.kt)("td",{parentName:"tr",align:null},"Test results returned from ",(0,a.kt)("inlineCode",{parentName:"td"},"cypress.run()")," changed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/references/changelog#4-11-0"},"4.11.0")),(0,a.kt)("td",{parentName:"tr",align:null},"Added ",(0,a.kt)("inlineCode",{parentName:"td"},"cypress.cli")," with ",(0,a.kt)("inlineCode",{parentName:"td"},"parseRunArguments")," function.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/references/changelog#4-9-0"},"4.9.0")),(0,a.kt)("td",{parentName:"tr",align:null},"Added ",(0,a.kt)("inlineCode",{parentName:"td"},"quiet")," option to ",(0,a.kt)("inlineCode",{parentName:"td"},"cypress.run()"))))))}u.isMDXComponent=!0}}]);