"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[3499],{816:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>o});var i=s(5893),t=s(1151);const r={title:"Run Cypress tests in Bitbucket Pipelines: Step-by-Step Guide",description:"Run Cypress tests in Bitbucket Pipelines with Docker images, caching, parallelization, and Cypress Cloud.",sidebar_label:"Bitbucket Pipelines"},l="Run Cypress in Bitbucket Pipelines",a={id:"app/continuous-integration/bitbucket-pipelines",title:"Run Cypress tests in Bitbucket Pipelines: Step-by-Step Guide",description:"Run Cypress tests in Bitbucket Pipelines with Docker images, caching, parallelization, and Cypress Cloud.",source:"@site/docs/app/continuous-integration/bitbucket-pipelines.mdx",sourceDirName:"app/continuous-integration",slug:"/app/continuous-integration/bitbucket-pipelines",permalink:"/app/continuous-integration/bitbucket-pipelines",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/app/continuous-integration/bitbucket-pipelines.mdx",tags:[],version:"current",lastUpdatedAt:1747791800,formattedLastUpdatedAt:"May 21, 2025",frontMatter:{title:"Run Cypress tests in Bitbucket Pipelines: Step-by-Step Guide",description:"Run Cypress tests in Bitbucket Pipelines with Docker images, caching, parallelization, and Cypress Cloud.",sidebar_label:"Bitbucket Pipelines"},sidebar:"app",previous:{title:"AWS CodeBuild",permalink:"/app/continuous-integration/aws-codebuild"},next:{title:"CircleCI",permalink:"/app/continuous-integration/circleci"}},c={},o=[{value:"<Icon></Icon> What you&#39;ll learn",id:"What-youll-learn",level:5},{value:"Basic Setup",id:"Basic-Setup",level:2},{value:"Testing with Cypress Docker Images",id:"Testing-with-Cypress-Docker-Images",level:2},{value:"Caching Dependencies and Build Artifacts",id:"Caching-Dependencies-and-Build-Artifacts",level:2},{value:"Parallelization",id:"Parallelization",level:2},{value:"Install Job",id:"Install-Job",level:3},{value:"Worker Jobs",id:"Worker-Jobs",level:3},{value:"Using Cypress Cloud with Bitbucket Pipelines",id:"Using-Cypress-Cloud-with-Bitbucket-Pipelines",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h5:"h5",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components},{CiProviderCloudSteps:s,Icon:r,ProductHeading:l}=n;return s||u("CiProviderCloudSteps",!0),r||u("Icon",!0),l||u("ProductHeading",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l,{product:"app"}),"\n",(0,i.jsx)(n.h1,{id:"Run-Cypress-in-Bitbucket-Pipelines",children:"Run Cypress in Bitbucket Pipelines"}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.h5,{id:"What-youll-learn",children:[(0,i.jsx)(r,{name:"question-circle",color:"#4BBFD2"})," What you'll learn"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"How to set up Bitbucket Pipelines to run Cypress tests"}),"\n",(0,i.jsx)(n.li,{children:"How to cache dependencies and build artifacts"}),"\n",(0,i.jsx)(n.li,{children:"How to parallelize Cypress tests with Bitbucket Pipelines"}),"\n",(0,i.jsx)(n.li,{children:"How to use Cypress Cloud with Bitbucket Pipelines"}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"Basic-Setup",children:"Basic Setup"}),"\n",(0,i.jsxs)(n.p,{children:["Detailed documentation is available in the\n",(0,i.jsx)(n.a,{href:"https://support.atlassian.com/bitbucket-cloud/docs/get-started-with-bitbucket-pipelines/",children:"Bitbucket Pipelines Documentation"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Bitbucket runs most builds in Docker containers as described in ",(0,i.jsx)(n.a,{href:"https://support.atlassian.com/bitbucket-cloud/docs/docker-image-options/",children:"Docker image options"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:['If you use the currently available default Bitbucket / Atlassian Linux images listed in the\n"Default build environment" of the Bitbucket Cloud documentation\n',(0,i.jsx)(n.a,{href:"https://support.atlassian.com/bitbucket-cloud/docs/use-docker-images-as-build-environments/",children:"Use Docker images as build environments"})," you must additionally install ",(0,i.jsx)(n.a,{href:"/app/get-started/install-cypress#Linux-Prerequisites",children:"Cypress Linux prerequisites"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"For a simpler setup, use a Cypress Docker image, as described in the following section."}),"\n",(0,i.jsx)(n.h2,{id:"Testing-with-Cypress-Docker-Images",children:"Testing with Cypress Docker Images"}),"\n",(0,i.jsxs)(n.p,{children:["The Cypress team maintains the official\n",(0,i.jsx)(n.a,{href:"https://github.com/cypress-io/cypress-docker-images",children:"Docker Images"})," for running\nCypress locally and in CI, with some images including Chrome, Firefox and Edge. For\nexample, this allows us to run the tests in Firefox by passing the\n",(0,i.jsx)(n.code,{children:"--browser firefox"})," attribute to ",(0,i.jsx)(n.code,{children:"cypress run"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Read about ",(0,i.jsx)(n.a,{href:"/app/continuous-integration/overview#Cypress-Docker-variants",children:"Cypress Docker variants"})," to decide which image is best for your project."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="bitbucket-pipelines.yml"',children:"image: cypress/browsers:22.15.0\n\npipelines:\n  default:\n    - step:\n        script:\n          # install dependencies\n          - npm ci\n          # start the server in the background\n          - npm run start &\n          # run Cypress tests in Firefox\n          - npx cypress run --browser firefox\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["How this ",(0,i.jsx)(n.code,{children:"bitbucket-pipelines.yml"})," works:"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["On ",(0,i.jsx)(n.em,{children:"push"})," to this repository, this job will provision and start Bitbucket\nPipelines using the Cypress Docker image. It will run the pipelines defined in the\n",(0,i.jsx)(n.code,{children:"pipelines"})," section of the configuration."]}),"\n",(0,i.jsx)(n.li,{children:"The code is checked out from the Bitbucket repository."}),"\n",(0,i.jsxs)(n.li,{children:["Finally, our scripts will:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Install npm dependencies"}),"\n",(0,i.jsxs)(n.li,{children:["Start the project web server (",(0,i.jsx)(n.code,{children:"npm start"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Run the Cypress tests within the Bitbucket repository using Firefox"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"Caching-Dependencies-and-Build-Artifacts",children:"Caching Dependencies and Build Artifacts"}),"\n",(0,i.jsxs)(n.p,{children:["Per the\n",(0,i.jsx)(n.a,{href:"https://support.atlassian.com/bitbucket-cloud/docs/cache-dependencies/",children:"Caches documentation"}),",\nBitbucket offers options for caching dependencies and\nbuild artifacts across many different workflows."]}),"\n",(0,i.jsxs)(n.p,{children:["To cache ",(0,i.jsx)(n.code,{children:"node_modules"}),", the npm cache across builds, the ",(0,i.jsx)(n.code,{children:"cache"})," attribute and\nconfiguration has been added below."]}),"\n",(0,i.jsxs)(n.p,{children:["Artifacts from a job can be defined by providing paths to the ",(0,i.jsx)(n.code,{children:"artifacts"}),"\nattribute."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="bitbucket-pipelines.yml"',children:"image: cypress/browsers:22.15.0\n\npipelines:\n  default:\n    - step:\n        caches:\n          - node\n        script:\n          # install dependencies\n          - npm ci\n          # start the server in the background\n          - npm run start &\n          # run Cypress tests in Firefox\n          - npx cypress run --browser firefox\n        artifacts:\n          # store any generates images and videos as artifacts\n          - cypress/screenshots/**\n          - cypress/videos/**\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Using the\n",(0,i.jsx)(n.a,{href:"https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/#Global-configuration-options",children:"definitions"}),"\nblock we can define additional caches for npm and Cypress."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="bitbucket-pipelines.yml"',children:"definitions:\n  caches:\n    npm: $HOME/.npm\n    cypress: $HOME/.cache/Cypress\n"})}),"\n",(0,i.jsx)(n.h2,{id:"Parallelization",children:"Parallelization"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"})," offers the ability to\n",(0,i.jsx)(n.a,{href:"/cloud/features/smart-orchestration/parallelization",children:"parallelize and group test runs"}),"\nalong with additional insights and ",(0,i.jsx)(n.a,{href:"/cloud/features/analytics/overview",children:"analytics"})," for\nCypress tests."]}),"\n",(0,i.jsx)(n.p,{children:"Before diving into an example of a parallelization setup, it is important to\nunderstand the two different types of jobs that we will declare:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Install Job"}),": A job that installs and caches dependencies that will be used\nby subsequent jobs later in the Bitbucket Pipelines workflow."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Worker Job"}),": A job that handles execution of Cypress tests and depends on\nthe ",(0,i.jsx)(n.em,{children:"install job"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"Install-Job",children:"Install Job"}),"\n",(0,i.jsx)(n.p,{children:"The separation of installation from test running is necessary when running\nparallel jobs. It allows for reuse of various build steps aided by caching."}),"\n",(0,i.jsxs)(n.p,{children:["First, we break the pipeline up into reusable chunks of configuration using a\n",(0,i.jsx)(n.a,{href:"https://support.atlassian.com/bitbucket-cloud/docs/yaml-anchors/",children:"YAML anchor"}),",\n",(0,i.jsx)(n.code,{children:"&e2e"}),". This will be used by the worker jobs."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The following configuration using the ",(0,i.jsx)(n.code,{children:"--parallel"})," and ",(0,i.jsx)(n.code,{children:"--record"})," flags to\n",(0,i.jsx)(n.a,{href:"/app/references/command-line#cypress-run",children:"cypress run"})," requires setting up\nrecording test results to ",(0,i.jsx)(n.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"}),"."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="bitbucket-pipelines.yml"',children:"image: cypress/base:22.15.0\n\n## job definition for running E2E tests in parallel\ne2e: &e2e\n  name: E2E tests\n  caches:\n    - node\n    - cypress\n  script:\n    - npm run start &\n    - npm run e2e:record -- --parallel --group UI-Chrome --ci-build-id $BITBUCKET_BUILD_NUMBER\n  artifacts:\n    # store any generates images and videos as artifacts\n    - cypress/screenshots/**\n    - cypress/videos/**\n"})}),"\n",(0,i.jsx)(n.h3,{id:"Worker-Jobs",children:"Worker Jobs"}),"\n",(0,i.jsxs)(n.p,{children:["Next, the worker jobs under ",(0,i.jsx)(n.code,{children:"pipelines"})," that will run Cypress tests with Chrome\nin parallel."]}),"\n",(0,i.jsxs)(n.p,{children:["We can use the ",(0,i.jsx)(n.code,{children:"e2e"}),"\n",(0,i.jsx)(n.a,{href:"https://support.atlassian.com/bitbucket-cloud/docs/yaml-anchors/",children:"YAML anchor"}),"\nin our definition of the pipeline to execute parallel jobs using the ",(0,i.jsx)(n.code,{children:"parallel"}),"\nattribute. This will allow us to run multiples instances of Cypress at same\ntime."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="bitbucket-pipelines.yml"',children:"## job definition for running E2E tests in parallel\n## ...\n\npipelines:\n  default:\n    - step:\n        name: Install dependencies\n        caches:\n          - npm\n          - cypress\n          - node\n        script:\n          - npm ci\n    - parallel:\n      # run N steps in parallel\n      - step:\n          <<: *e2e\n      - step:\n          <<: *e2e\n      - step:\n          <<: *e2e\ndefinitions:\n  caches:\n    npm: $HOME/.npm\n    cypress: $HOME/.cache/Cypress\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The complete ",(0,i.jsx)(n.code,{children:"bitbucket-pipelines.yml"})," is below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="bitbucket-pipelines.yml"',children:"image: cypress/base:22.15.0\n\n## job definition for running E2E tests in parallel\ne2e: &e2e\n  name: E2E tests\n  caches:\n    - node\n    - cypress\n  script:\n    - npm run start &\n    - npm run e2e:record -- --parallel --group UI-Chrome --ci-build-id $BITBUCKET_BUILD_NUMBER\n  artifacts:\n    # store any generates images and videos as artifacts\n    - cypress/screenshots/**\n    - cypress/videos/**\n\npipelines:\n  default:\n    - step:\n        name: Install dependencies\n        caches:\n          - npm\n          - cypress\n          - node\n        script:\n          - npm ci\n    - parallel:\n        # run N steps in parallel\n        - step:\n            <<: *e2e\n        - step:\n            <<: *e2e\n        - step:\n            <<: *e2e\ndefinitions:\n  caches:\n    npm: $HOME/.npm\n    cypress: $HOME/.cache/Cypress\n"})}),"\n",(0,i.jsx)(n.h2,{id:"Using-Cypress-Cloud-with-Bitbucket-Pipelines",children:"Using Cypress Cloud with Bitbucket Pipelines"}),"\n",(0,i.jsxs)(n.p,{children:["In the Bitbucket Pipelines configuration we have defined in the previous\nsection, we are leveraging three useful features of\n",(0,i.jsx)(n.a,{href:"/cloud/get-started/introduction",children:"Cypress Cloud"}),":"]}),"\n",(0,i.jsx)(s,{})]})}function d(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>l});var i=s(7294);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);