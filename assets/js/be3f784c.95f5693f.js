"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[86],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=l(r),d=o,g=c["".concat(i,".").concat(d)]||c[d]||u[d]||s;return r?n.createElement(g,a(a({ref:t},m),{},{components:r})):n.createElement(g,a({ref:t},m))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[c]="string"==typeof e?e:o,a[1]=p;for(var l=2;l<s;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},594:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const s={title:"Reporters"},a=void 0,p={unversionedId:"guides/tooling/reporters",id:"guides/tooling/reporters",title:"Reporters",description:"Because Cypress is built on top of Mocha, that means any reporter built for",source:"@site/docs/guides/tooling/reporters.mdx",sourceDirName:"guides/tooling",slug:"/guides/tooling/reporters",permalink:"/cypress-documentation/guides/tooling/reporters",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/tooling/reporters.mdx",tags:[],version:"current",lastUpdatedAt:1697461007,formattedLastUpdatedAt:"Oct 16, 2023",frontMatter:{title:"Reporters"},sidebar:"guides",previous:{title:"Plugins",permalink:"/cypress-documentation/guides/tooling/plugins-guide"},next:{title:"TypeScript",permalink:"/cypress-documentation/guides/tooling/typescript-support"}},i={},l=[{value:"Custom reporter",id:"Custom-reporter",level:2},{value:"Installed locally",id:"Installed-locally",level:3},{value:"Cypress configuration",id:"Cypress-configuration",level:4},{value:"Command Line",id:"Command-Line",level:4},{value:"Installed via npm",id:"Installed-via-npm",level:3},{value:"Cypress configuration",id:"Cypress-configuration-1",level:4},{value:"Command line",id:"Command-line",level:4},{value:"Reporter Options",id:"Reporter-Options",level:2},{value:"Cypress configuration",id:"Cypress-configuration-2",level:4},{value:"Command line",id:"Command-line-1",level:4},{value:"Merging reports across spec files",id:"Merging-reports-across-spec-files",level:2},{value:"Cypress configuration",id:"Cypress-configuration-3",level:4},{value:"Command line",id:"Command-line-2",level:4},{value:"Multiple reporters",id:"Multiple-reporters",level:2},{value:"Examples",id:"Examples",level:3},{value:"Spec to <code>STDOUT</code>, save JUnit XML files",id:"Spec-to-STDOUT-save-JUnit-XML-files",level:4},{value:"Cypress configuration",id:"Cypress-configuration-4",level:4},{value:"Command line",id:"Command-line-3",level:4},{value:"Spec to <code>STDOUT</code>, produce a combined Mochawesome JSON file",id:"Spec-to-STDOUT-produce-a-combined-Mochawesome-JSON-file",level:4},{value:"Cypress configuration",id:"Cypress-configuration-5",level:4},{value:"Command line",id:"Command-line-4",level:4},{value:"History",id:"History",level:2}],m=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},c=m("CypressConfigFileTabs"),u=m("Icon"),d=m("DocsImage"),g={toc:l};function h(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Because Cypress is built on top of Mocha, that means any reporter built for\nMocha can be used with Cypress. Here is a list of built in Mocha reporters."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://mochajs.org/#reporters"},"Mocha's built-in reporters"))),(0,o.kt)("p",null,"By default, Cypress uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"spec")," reporter to output information to ",(0,o.kt)("inlineCode",{parentName:"p"},"STDOUT"),"."),(0,o.kt)("p",null,"We've also added the two most common 3rd party reporters for Mocha. These are\nbuilt into Cypress and you can use them without installing anything."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/mocha-teamcity-reporter"},(0,o.kt)("inlineCode",{parentName:"a"},"teamcity"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/michaelleeallen/mocha-junit-reporter"},(0,o.kt)("inlineCode",{parentName:"a"},"junit")))),(0,o.kt)("p",null,"Finally, we support creating your own custom reporters or using any kind of 3rd\nparty reporter."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Once you've read through the documentation below, we invite you to experience\nthe power of Cypress reporters via\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/testing-workshop-cypress/blob/master/slides/09-reporters/PITCHME.md"},"Section 9"),"\nof our open source\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/testing-workshop-cypress"},"testing workshop for Cypress"),".")),(0,o.kt)("h2",{id:"Custom-reporter"},"Custom reporter"),(0,o.kt)("h3",{id:"Installed-locally"},"Installed locally"),(0,o.kt)("p",null,"You can load\n",(0,o.kt)("a",{parentName:"p",href:"https://mochajs.org/api/tutorial-custom-reporter.html"},"custom Mocha reporters"),"\nthrough a relative or absolute path. These can be specified in your Cypress\nconfiguration file or via the ",(0,o.kt)("a",{parentName:"p",href:"/guides/guides/command-line"},"command line"),"."),(0,o.kt)("p",null,"For example, if you have the following directory structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"> my-project\n  > cypress\n  > src\n  > reporters\n    - custom.js\n")),(0,o.kt)("p",null,"You would specify the path to your custom reporter in either of the ways below."),(0,o.kt)("h4",{id:"Cypress-configuration"},"Cypress configuration"),(0,o.kt)("cypress-config-example",null,(0,o.kt)(c,{mdxType:"CypressConfigFileTabs"},(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  reporter: 'reporters/custom.js',\n})\n")),(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  reporter: 'reporters/custom.js',\n})\n")))),(0,o.kt)("h4",{id:"Command-Line"},"Command Line"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --reporter reporters/custom.js\n")),(0,o.kt)("h3",{id:"Installed-via-npm"},"Installed via npm"),(0,o.kt)("p",null,"When using custom reporters via npm, specify the package name."),(0,o.kt)("h4",{id:"Cypress-configuration-1"},"Cypress configuration"),(0,o.kt)("cypress-config-example",null,(0,o.kt)(c,{mdxType:"CypressConfigFileTabs"},(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  reporter: 'mochawesome',\n})\n")),(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  reporter: 'mochawesome',\n})\n")))),(0,o.kt)("h4",{id:"Command-line"},"Command line"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --reporter mochawesome\n")),(0,o.kt)("h2",{id:"Reporter-Options"},"Reporter Options"),(0,o.kt)("p",null,"Some reporters accept options that customize their behavior. These can be\nspecified in your Cypress configuration or via\n",(0,o.kt)("a",{parentName:"p",href:"/guides/guides/command-line"},"command line")," options."),(0,o.kt)("p",null,"Reporter options differ depending on the reporter (and may not be supported at\nall). Refer to the documentation for the reporter you are using for details on\nwhich options are supported."),(0,o.kt)("p",null,"The below configuration will output the JUnit report to ",(0,o.kt)("inlineCode",{parentName:"p"},"STDOUT")," and save it\ninto an XML file."),(0,o.kt)("h4",{id:"Cypress-configuration-2"},"Cypress configuration"),(0,o.kt)("cypress-config-example",null,(0,o.kt)(c,{mdxType:"CypressConfigFileTabs"},(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  reporter: 'junit',\n  reporterOptions: {\n    mochaFile: 'results/my-test-output.xml',\n    toConsole: true,\n  },\n})\n")),(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  reporter: 'junit',\n  reporterOptions: {\n    mochaFile: 'results/my-test-output.xml',\n    toConsole: true,\n  },\n})\n")))),(0,o.kt)("h4",{id:"Command-line-1"},"Command line"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'cypress run --reporter junit \\\n  --reporter-options "mochaFile=results/my-test-output.xml,toConsole=true"\n')),(0,o.kt)("h2",{id:"Merging-reports-across-spec-files"},"Merging reports across spec files"),(0,o.kt)("p",null,"Each spec file is processed completely separately during each ",(0,o.kt)("inlineCode",{parentName:"p"},"cypress run"),"\nexecution. Thus each spec run ",(0,o.kt)("em",{parentName:"p"},"overwrites")," the previous report file. To preserve\nunique reports for each specfile, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"[hash]")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"mochaFile")," filename."),(0,o.kt)("p",null,"The following configuration will create separate XML files in the ",(0,o.kt)("inlineCode",{parentName:"p"},"results"),"\nfolder. You can then merge the reported output in a separate step using a 3rd\nparty tool. For example, for the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/adamgruber/mochawesome"},"Mochawesome")," reporter, you can use\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/antontelesh/mochawesome-merge"},"mochawesome-merge")," tool."),(0,o.kt)("h4",{id:"Cypress-configuration-3"},"Cypress configuration"),(0,o.kt)("cypress-config-example",null,(0,o.kt)(c,{mdxType:"CypressConfigFileTabs"},(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  reporter: 'junit',\n  reporterOptions: {\n    mochaFile: 'results/my-test-output-[hash].xml',\n  },\n})\n")),(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  reporter: 'junit',\n  reporterOptions: {\n    mochaFile: 'results/my-test-output-[hash].xml',\n  },\n})\n")))),(0,o.kt)("h4",{id:"Command-line-2"},"Command line"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'cypress run --reporter junit \\\n  --reporter-options "mochaFile=results/my-test-output-[hash].xml"\n')),(0,o.kt)("h2",{id:"Multiple-reporters"},"Multiple reporters"),(0,o.kt)("p",null,"Oftentimes we see users wanting the ability to use multiple reporters. When\nrunning in CI, you might want to generate a report for ",(0,o.kt)("inlineCode",{parentName:"p"},"junit")," and perhaps a\n",(0,o.kt)("inlineCode",{parentName:"p"},"json")," report. This is great, but by setting this reporter you won't receive any\nadditional feedback while the tests are running!"),(0,o.kt)("p",null,"The solution here is to use multiple reporters. You will have the benefit of\nboth worlds."),(0,o.kt)("p",null,"We suggest using the npm module:"),(0,o.kt)(u,{name:"github",inline:"true",url:"https://github.com/you54f/cypress-multi-reporters",mdxType:"Icon"}),(0,o.kt)("p",null,"We use multiple reporters for every single one of our internal projects."),(0,o.kt)("p",null,"The below examples were implemented in"),(0,o.kt)(u,{name:"github",inline:"true",url:"https://github.com/cypress-io/cypress-example-circleci-orb",mdxType:"Icon"}),".",(0,o.kt)("h3",{id:"Examples"},"Examples"),(0,o.kt)("h4",{id:"Spec-to-STDOUT-save-JUnit-XML-files"},"Spec to ",(0,o.kt)("inlineCode",{parentName:"h4"},"STDOUT"),", save JUnit XML files"),(0,o.kt)("p",null,"We want to output a ",(0,o.kt)("inlineCode",{parentName:"p"},"spec")," report to ",(0,o.kt)("inlineCode",{parentName:"p"},"STDOUT"),", while saving a JUnit XML file for\neach spec file."),(0,o.kt)("p",null,"We need to install additional dependencies:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/you54f/cypress-multi-reporters"},(0,o.kt)("inlineCode",{parentName:"a"},"cypress-multi-reporters")),":\nenables multiple reporters"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/michaelleeallen/mocha-junit-reporter"},(0,o.kt)("inlineCode",{parentName:"a"},"mocha-junit-reporter")),"\nthe actual junit reporter, as we cannot use the ",(0,o.kt)("inlineCode",{parentName:"li"},"junit")," reporter that comes\nwith Cypress")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install --save-dev cypress-multi-reporters mocha-junit-reporter\n")),(0,o.kt)("p",null,"Specify your reporter and reporterOptions in your Cypress configuration or via\nthe ",(0,o.kt)("a",{parentName:"p",href:"/guides/guides/command-line"},"command line"),"."),(0,o.kt)("h4",{id:"Cypress-configuration-4"},"Cypress configuration"),(0,o.kt)("cypress-config-example",null,(0,o.kt)(c,{mdxType:"CypressConfigFileTabs"},(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  reporter: 'cypress-multi-reporters',\n  reporterOptions: {\n    configFile: 'reporter-config.json',\n  },\n})\n")),(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  reporter: 'cypress-multi-reporters',\n  reporterOptions: {\n    configFile: 'reporter-config.json',\n  },\n})\n")))),(0,o.kt)("h4",{id:"Command-line-3"},"Command line"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --reporter cypress-multi-reporters \\\n  --reporter-options configFile=reporter-config.json\n")),(0,o.kt)("p",null,"Then add the separate ",(0,o.kt)("inlineCode",{parentName:"p"},"reporter-config.json")," file (defined in your\nconfiguration) to enable ",(0,o.kt)("inlineCode",{parentName:"p"},"spec")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"junit")," reporters and direct the ",(0,o.kt)("inlineCode",{parentName:"p"},"junit"),"\nreporter to save separate XML files."),(0,o.kt)("cypress-config-example",null,(0,o.kt)(c,{mdxType:"CypressConfigFileTabs"},(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  reporterEnabled: 'spec, mocha-junit-reporter',\n  mochaJunitReporterReporterOptions: {\n    mochaFile: 'cypress/results/results-[hash].xml',\n  },\n})\n")),(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  reporterEnabled: 'spec, mocha-junit-reporter',\n  mochaJunitReporterReporterOptions: {\n    mochaFile: 'cypress/results/results-[hash].xml',\n  },\n})\n")))),(0,o.kt)("p",null,"We recommend deleting all files from the ",(0,o.kt)("inlineCode",{parentName:"p"},"cypress/results")," folder before running\nthis command, since each run will output new XML files. For example, you can add\nthe npm script commands below to your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," then call ",(0,o.kt)("inlineCode",{parentName:"p"},"npm run report"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "delete:reports": "rm cypress/results/* || true",\n    "prereport": "npm run delete:reports",\n    "report": "cypress run --reporter cypress-multi-reporters --reporter-options configFile=reporter-config.json"\n  }\n}\n')),(0,o.kt)("p",null,"In case you want to combine generated XML files into a single one,\n",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/junit-report-merger"},"junit-report-merger")," can be\nadded. For example, to combine all files into\n",(0,o.kt)("inlineCode",{parentName:"p"},"cypress/results/combined-report.xml")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"combine:reports")," script can be added."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "delete:reports": "rm cypress/results/* || true",\n    "combine:reports": "jrm cypress/results/combined-report.xml \\"cypress/results/*.xml\\"",\n    "prereport": "npm run delete:reports",\n    "report": "cypress run --reporter cypress-multi-reporters --reporter-options configFile=reporter-config.json",\n    "postreport": "npm run combine:reports"\n  }\n}\n')),(0,o.kt)("h4",{id:"Spec-to-STDOUT-produce-a-combined-Mochawesome-JSON-file"},"Spec to ",(0,o.kt)("inlineCode",{parentName:"h4"},"STDOUT"),", produce a combined Mochawesome JSON file"),(0,o.kt)("p",null,"This example is shown in the branch ",(0,o.kt)("inlineCode",{parentName:"p"},"spec-and-single-mochawesome-json")," in\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-example-circleci-orb"},"https://github.com/cypress-io/cypress-example-circleci-orb"),'.\nWe want to output a "spec" report to ',(0,o.kt)("inlineCode",{parentName:"p"},"STDOUT"),", save an individual Mochawesome\nJSON file per test file, and then combine all JSON reports into a single report."),(0,o.kt)("p",null,"We need to install some additional dependencies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install --save-dev mochawesome mochawesome-merge mochawesome-report-generator\n")),(0,o.kt)("p",null,"We need to configure the reporter in your\n",(0,o.kt)("a",{parentName:"p",href:"/guides/references/configuration"},"Cypress configuration")," to skip the HTML\nreport generation and save each individual JSON file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"cypress/results"),"\nfolder."),(0,o.kt)("h4",{id:"Cypress-configuration-5"},"Cypress configuration"),(0,o.kt)("cypress-config-example",null,(0,o.kt)(c,{mdxType:"CypressConfigFileTabs"},(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  reporter: 'mochawesome',\n  reporterOptions: {\n    reportDir: 'cypress/results',\n    overwrite: false,\n    html: false,\n    json: true,\n  },\n})\n")),(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  reporter: 'mochawesome',\n  reporterOptions: {\n    reportDir: 'cypress/results',\n    overwrite: false,\n    html: false,\n    json: true,\n  },\n})\n")))),(0,o.kt)("h4",{id:"Command-line-4"},"Command line"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'cypress run --reporter mochawesome \\\n  --reporter-options reportDir="cypress/results",overwrite=false,html=false,json=true\n')),(0,o.kt)("p",null,"Our run will generate files\n",(0,o.kt)("inlineCode",{parentName:"p"},"cypress/results/mochawesome.json, cypress/results/mochawesome_001.json, ..."),".\nThen we can combine them using the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/antontelesh/mochawesome-merge"},"mochawesome-merge")," utility."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'npx mochawesome-merge "cypress/results/*.json" > mochawesome.json\n')),(0,o.kt)("p",null,"We can now generate a combined HTML report from the ",(0,o.kt)("inlineCode",{parentName:"p"},"mochawesome.json")," file\nusing the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/adamgruber/mochawesome-report-generator"},"https://github.com/adamgruber/mochawesome-report-generator"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npx marge mochawesome.json\n")),(0,o.kt)("p",null,"It generates the beautiful standalone HTML report file\n",(0,o.kt)("inlineCode",{parentName:"p"},"mochawesome-report/mochawesome.html")," shown below. As you can see all test\nresults, timing information, and even test bodies are included."),(0,o.kt)(d,{src:"/img/guides/reporters/mochawesome-report.png",alt:"Mochawesome HTML report",mdxType:"DocsImage"}),(0,o.kt)("p",null,"For more information, see\n",(0,o.kt)("a",{parentName:"p",href:"http://antontelesh.github.io/testing/2019/02/04/mochawesome-merge.html"},"Integrating Mochawesome reporter with Cypress's")),(0,o.kt)("h2",{id:"History"},"History"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Version"),(0,o.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/guides/references/changelog"},"4.4.2")),(0,o.kt)("td",{parentName:"tr",align:null},"Custom Mocha reporters updated to use the version of Mocha bundled with Cypress. No need to install ",(0,o.kt)("inlineCode",{parentName:"td"},"mocha")," separately to use custom reporters.")))))}h.isMDXComponent=!0}}]);