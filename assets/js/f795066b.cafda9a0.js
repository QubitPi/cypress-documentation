"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[1138],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>h});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),p=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},u=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(r),m=o,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||a;return r?t.createElement(h,s(s({ref:n},u),{},{components:r})):t.createElement(h,s({ref:n},u))}));function h(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=r[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9458:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var t=r(7462),o=(r(7294),r(3905));const a={title:"Launching Browsers"},s=void 0,i={unversionedId:"guides/guides/launching-browsers",id:"guides/guides/launching-browsers",title:"Launching Browsers",description:"When you run tests in Cypress, we launch a browser for you. This enables us to:",source:"@site/docs/guides/guides/launching-browsers.mdx",sourceDirName:"guides/guides",slug:"/guides/guides/launching-browsers",permalink:"/cypress-documentation/guides/guides/launching-browsers",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/guides/launching-browsers.mdx",tags:[],version:"current",lastUpdatedAt:1698215491,formattedLastUpdatedAt:"Oct 25, 2023",frontMatter:{title:"Launching Browsers"},sidebar:"guides",previous:{title:"Environment Variables",permalink:"/cypress-documentation/guides/guides/environment-variables"},next:{title:"Module API",permalink:"/cypress-documentation/guides/guides/module-api"}},l={},p=[{value:"Browsers",id:"Browsers",level:2},{value:"Browser versions supported",id:"Browser-versions-supported",level:3},{value:"Download specific Chrome version",id:"Download-specific-Chrome-version",level:3},{value:"Electron Browser",id:"Electron-Browser",level:3},{value:"You can also launch Electron headed:",id:"You-can-also-launch-Electron-headed",level:4},{value:"Chrome Browsers",id:"Chrome-Browsers",level:3},{value:"Edge Browsers",id:"Edge-Browsers",level:3},{value:"Firefox Browsers",id:"Firefox-Browsers",level:3},{value:"WebKit (Experimental)",id:"WebKit-Experimental",level:3},{value:"Known Issues with <code>experimentalWebKitSupport</code>",id:"Known-Issues-with-experimentalWebKitSupport",level:4},{value:"Linux Dependencies",id:"Linux-Dependencies",level:4},{value:"Launching by a path",id:"Launching-by-a-path",level:3},{value:"Customize available browsers",id:"Customize-available-browsers",level:3},{value:"Unsupported Browsers",id:"Unsupported-Browsers",level:3},{value:"Browser Environment",id:"Browser-Environment",level:2},{value:"Launching Browsers",id:"Launching-Browsers",level:3},{value:"Cypress Profile",id:"Cypress-Profile",level:3},{value:"Disabled Barriers",id:"Disabled-Barriers",level:3},{value:"The Cypress launched browser automatically:",id:"The-Cypress-launched-browser-automatically",level:4},{value:"Browser Icon",id:"Browser-Icon",level:2},{value:"Troubleshooting",id:"Troubleshooting",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},c=u("DocsImage"),d=u("CypressConfigFileTabs"),m={toc:p};function h(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"When you run tests in Cypress, we launch a browser for you. This enables us to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a clean, pristine testing environment."),(0,o.kt)("li",{parentName:"ol"},"Access the privileged browser APIs for automation.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("strong",null,"Cross Browser Support"),(0,o.kt)("p",{parentName:"admonition"},"Cypress currently supports Firefox and Chrome-family browsers (including Edge\nand Electron). To run tests optimally across these browsers in CI, check out the\nstrategies demonstrated in the\n",(0,o.kt)("a",{parentName:"p",href:"/guides/guides/cross-browser-testing"},"cross browser Testing")," guide.")),(0,o.kt)("h2",{id:"Browsers"},"Browsers"),(0,o.kt)("p",null,"When Cypress is initially launched, you can choose to test your application\nusing number of browsers including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.google.com/chrome/"},"Chrome")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.google.com/chrome/beta/"},"Chrome Beta")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.google.com/chrome/canary/"},"Chrome Canary")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.chromium.org/Home"},"Chromium")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.microsoft.com/edge"},"Edge")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.microsoftedgeinsider.com/download"},"Edge Beta")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.microsoftedgeinsider.com/download"},"Edge Canary")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.microsoftedgeinsider.com/download"},"Edge Dev")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://electron.atom.io/"},"Electron")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.mozilla.org/firefox/"},"Firefox")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.mozilla.org/firefox/developer/"},"Firefox Developer Edition")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.mozilla.org/firefox/nightly/"},"Firefox Nightly")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#WebKit-Experimental"},"WebKit (Experimental)"))),(0,o.kt)("p",null,"Cypress automatically detects available browsers on your OS. You can switch the\nbrowser by using the drop down near the top right corner:"),(0,o.kt)(c,{src:"/img/guides/launching-browsers/v10/browser-list-dropdown.png",alt:"Select a different browser",mdxType:"DocsImage"}),(0,o.kt)("h3",{id:"Browser-versions-supported"},"Browser versions supported"),(0,o.kt)("p",null,"Cypress supports the browser versions below:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Chrome 80 and above."),(0,o.kt)("li",{parentName:"ul"},"Edge 80 and above."),(0,o.kt)("li",{parentName:"ul"},"Firefox 86 and above.")),(0,o.kt)("h3",{id:"Download-specific-Chrome-version"},"Download specific Chrome version"),(0,o.kt)("p",null,"The Chrome browser is evergreen - meaning it will automatically update itself,\nsometimes causing a breaking change in your automated tests. We host\n",(0,o.kt)("a",{parentName:"p",href:"https://chromium.cypress.io"},"chromium.cypress.io")," with links to download a\nspecific released version of Chrome (dev, Canary and stable) for every platform."),(0,o.kt)("h3",{id:"Electron-Browser"},"Electron Browser"),(0,o.kt)("p",null,"In addition to the browsers found on your system, you'll notice that Electron is\nan available browser. The Electron browser is a version of Chromium that comes\nwith ",(0,o.kt)("a",{parentName:"p",href:"https://electron.atom.io/"},"Electron"),"."),(0,o.kt)("p",null,"The Electron browser has the advantage of coming baked into Cypress and does not\nneed to be installed separately."),(0,o.kt)("p",null,"By default, when running ",(0,o.kt)("a",{parentName:"p",href:"/guides/guides/command-line#cypress-run"},"cypress run"),"\nfrom the CLI, we will launch all browsers headlessly."),(0,o.kt)("h4",{id:"You-can-also-launch-Electron-headed"},"You can also launch Electron headed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --headed\n")),(0,o.kt)("p",null,"Because Electron is the default browser - it is typically run in CI. If you are\nseeing failures in CI, to easily debug them you may want to run locally with the\n",(0,o.kt)("inlineCode",{parentName:"p"},"--headed")," option."),(0,o.kt)("h3",{id:"Chrome-Browsers"},"Chrome Browsers"),(0,o.kt)("p",null,"All Chrome","*"," flavored browsers will be detected and are supported above\nChrome 64."),(0,o.kt)("p",null,"You can launch Chrome like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser chrome\n")),(0,o.kt)("p",null,"To use this command in CI, you need to install the browser you want - or use one\nof our ",(0,o.kt)("a",{parentName:"p",href:"/examples/docker"},"docker images"),"."),(0,o.kt)("p",null,"By default, we will launch Chrome in headlessly during ",(0,o.kt)("inlineCode",{parentName:"p"},"cypress run"),". To run\nChrome headed, you can pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"--headed")," argument to ",(0,o.kt)("inlineCode",{parentName:"p"},"cypress run"),"."),(0,o.kt)("p",null,"You can also launch Chromium:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser chromium\n")),(0,o.kt)("p",null,"Or Chrome Beta:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser chrome:beta\n")),(0,o.kt)("p",null,"Or Chrome Canary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser chrome:canary\n")),(0,o.kt)("h3",{id:"Edge-Browsers"},"Edge Browsers"),(0,o.kt)("p",null,"Microsoft Edge-family (Chromium-based) browsers are supported by Cypress."),(0,o.kt)("p",null,"You can launch Microsoft Edge like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser edge\n")),(0,o.kt)("p",null,"Or Microsoft Edge Beta:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser edge:beta\n")),(0,o.kt)("p",null,"Or Microsoft Edge Canary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser edge:canary\n")),(0,o.kt)("p",null,"Or Microsoft Edge Dev:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser edge:dev\n")),(0,o.kt)("h3",{id:"Firefox-Browsers"},"Firefox Browsers"),(0,o.kt)("p",null,"Firefox-family browsers are supported by Cypress."),(0,o.kt)("p",null,"You can launch Firefox like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser firefox\n")),(0,o.kt)("p",null,"Or Firefox Developer/Nightly Edition:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser firefox:dev\ncypress run --browser firefox:nightly\n")),(0,o.kt)("p",null,"To use this command in CI, you need to install these other browsers - or use one\nof our ",(0,o.kt)("a",{parentName:"p",href:"/examples/docker"},"docker images"),"."),(0,o.kt)("p",null,"By default, we will launch Firefox headlessly during ",(0,o.kt)("inlineCode",{parentName:"p"},"cypress run"),". To run\nFirefox headed, you can pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"--headed")," argument to ",(0,o.kt)("inlineCode",{parentName:"p"},"cypress run"),"."),(0,o.kt)("h3",{id:"WebKit-Experimental"},"WebKit (Experimental)"),(0,o.kt)("p",null,"Cypress has ",(0,o.kt)("a",{parentName:"p",href:"/guides/references/experiments"},"experimental")," support for WebKit,\nSafari's browser engine. Testing your app with WebKit is representative of how\nyour app would run in Safari. To opt-in to ",(0,o.kt)("inlineCode",{parentName:"p"},"experimentalWebKitSupport"),", follow\nthese steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Add ",(0,o.kt)("inlineCode",{parentName:"li"},"experimentalWebKitSupport: true")," to your\n",(0,o.kt)("a",{parentName:"li",href:"/guides/references/configuration"},"configuration")," to enable the experiment."),(0,o.kt)("li",{parentName:"ol"},"Install the ",(0,o.kt)("inlineCode",{parentName:"li"},"playwright-webkit")," NPM package in your repo to acquire WebKit\nitself: ",(0,o.kt)("inlineCode",{parentName:"li"},"npm install --save-dev playwright-webkit@1.34"),".",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"We built this experiment on top of the Playwright WebKit browser as a\nstepping stone towards creating a better UX with Cypress-provided browsers\nin the future. Thank you, Playwright contributors."))),(0,o.kt)("li",{parentName:"ol"},"Now, you should be able to use WebKit like any other browser. For example, to\nrecord with WebKit in CI:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser webkit --record # ...\n")))),(0,o.kt)("p",null,"WebKit support is ",(0,o.kt)("em",{parentName:"p"},"experimental"),', so you may encounter issues. If you encounter\nan issue not on the "Known Issues" list, please\n',(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/issues/new/choose"},"open an issue")," on the\nGitHub repository."),(0,o.kt)("h4",{id:"Known-Issues-with-experimentalWebKitSupport"},"Known Issues with ",(0,o.kt)("inlineCode",{parentName:"h4"},"experimentalWebKitSupport")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"cy.origin()")," is not yet supported."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"cy.intercept()"),"'s ",(0,o.kt)("inlineCode",{parentName:"li"},"forceNetworkError")," option is disabled."),(0,o.kt)("li",{parentName:"ul"},"When using ",(0,o.kt)("inlineCode",{parentName:"li"},"experimentalSingleTabRunMode")," with video recording in WebKit, only\nthe video for the first spec is recorded."),(0,o.kt)("li",{parentName:"ul"},"Some differences in ",(0,o.kt)("inlineCode",{parentName:"li"},"cy.type()")," behavior:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"textInput")," events are missing the ",(0,o.kt)("inlineCode",{parentName:"li"},"data")," property"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"beforeinput")," events are missing the ",(0,o.kt)("inlineCode",{parentName:"li"},"inputType")," property"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"cy.type('{uparrow}')")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"cy.type('{downarrow}')")," on an\n",(0,o.kt)("inlineCode",{parentName:"li"},"input[type=number]")," do not round to the nearest ",(0,o.kt)("inlineCode",{parentName:"li"},"step")," specified"))),(0,o.kt)("li",{parentName:"ul"},"Stack traces may be missing some function names and location information."),(0,o.kt)("li",{parentName:"ul"},"See issues labeled\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22experiment%3A+webkit%22"},(0,o.kt)("inlineCode",{parentName:"a"},"experiment: webkit")),"\nfor a complete list.")),(0,o.kt)("h4",{id:"Linux-Dependencies"},"Linux Dependencies"),(0,o.kt)("p",null,"WebKit requires additional dependencies to run on Linux. To install the required\ndependencies, run this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npx playwright install-deps webkit\n")),(0,o.kt)("h3",{id:"Launching-by-a-path"},"Launching by a path"),(0,o.kt)("p",null,"You can launch any supported browser by specifying a path to the binary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --browser /usr/bin/chromium\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cypress open --browser /usr/bin/chromium\n")),(0,o.kt)("p",null,"Cypress will automatically detect the type of browser supplied and launch it for\nyou."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/guides/guides/command-line#cypress-run-browser-lt-browser-name-or-path-gt"},"See the Command Line guide for more information about the ",(0,o.kt)("inlineCode",{parentName:"a"},"--browser")," arguments")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/guides/references/troubleshooting#Launching-browsers"},"Having trouble launching a browser? Check out our troubleshooting guide")),(0,o.kt)("h3",{id:"Customize-available-browsers"},"Customize available browsers"),(0,o.kt)("p",null,"Sometimes you might want to modify the list of browsers found before running\ntests."),(0,o.kt)("p",null,"For example, your web application might ",(0,o.kt)("em",{parentName:"p"},"only")," be designed to work in a Chrome\nbrowser, and not inside the Electron browser."),(0,o.kt)("p",null,"In the ",(0,o.kt)("a",{parentName:"p",href:"/api/plugins/configuration-api"},"setupNodeEvents")," function, you can\nfilter the list of browsers passed inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," object and return the\nlist of browsers you want available for selection during ",(0,o.kt)("inlineCode",{parentName:"p"},"cypress open"),"."),(0,o.kt)("cypress-config-plugin-example",null,(0,o.kt)(d,{mdxType:"CypressConfigFileTabs"},(0,o.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      // inside config.browsers array each object has information like\n      // {\n      //   name: 'chrome',\n      //   channel: 'canary',\n      //   family: 'chromium',\n      //   displayName: 'Canary',\n      //   version: '80.0.3966.0',\n      //   path:\n      //    '/Applications/Canary.app/Contents/MacOS/Canary',\n      //   majorVersion: 80\n      // }\n      return {\n        browsers: config.browsers.filter(\n          (b) => b.family === 'chromium' && b.name !== 'electron'\n        ),\n      }\n    },\n  },\n})\n")),(0,o.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      // inside config.browsers array each object has information like\n      // {\n      //   name: 'chrome',\n      //   channel: 'canary',\n      //   family: 'chromium',\n      //   displayName: 'Canary',\n      //   version: '80.0.3966.0',\n      //   path:\n      //    '/Applications/Canary.app/Contents/MacOS/Canary',\n      //   majorVersion: 80\n      // }\n      return {\n        browsers: config.browsers.filter(\n          (b) => b.family === 'chromium' && b.name !== 'electron'\n        ),\n      }\n    },\n  },\n})\n")))),(0,o.kt)("p",null,"When you open Cypress in a project that uses the above modifications to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"setupNodeEvents")," function, Electron will no longer display in the list of\navailable browsers."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you return an empty list of browsers or ",(0,o.kt)("inlineCode",{parentName:"p"},"browsers: null"),", the default list\nwill be restored automatically.")),(0,o.kt)("p",null,"If you have installed a Chromium-based browser like ",(0,o.kt)("a",{parentName:"p",href:"https://brave.com/"},"Brave"),",\n",(0,o.kt)("a",{parentName:"p",href:"https://vivaldi.com/"},"Vivaldi")," you can add them to the list of returned\nbrowsers. Here is a configuration that inserts a local Brave browser into the\nreturned list."),(0,o.kt)("cypress-config-plugin-example",null,(0,o.kt)(d,{mdxType:"CypressConfigFileTabs"},(0,o.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\nconst execa = require('execa')\nconst findBrowser = () => {\n  // the path is hard-coded for simplicity\n  const browserPath =\n    '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'\n\n  return execa(browserPath, ['--version']).then((result) => {\n    // STDOUT will be like \"Brave Browser 77.0.69.135\"\n    const [, version] = /Brave Browser (\\d+\\.\\d+\\.\\d+\\.\\d+)/.exec(result.stdout)\n    const majorVersion = parseInt(version.split('.')[0])\n\n    return {\n      name: 'Brave',\n      channel: 'stable',\n      family: 'chromium',\n      displayName: 'Brave',\n      version,\n      path: browserPath,\n      majorVersion,\n    }\n  })\n}\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      return findBrowser().then((browser) => {\n        return {\n          browsers: config.browsers.concat(browser),\n        }\n      })\n    },\n  },\n})\n")),(0,o.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\nimport execa from 'execa'\nconst findBrowser = () => {\n  // the path is hard-coded for simplicity\n  const browserPath =\n    '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'\n\n  return execa(browserPath, ['--version']).then((result) => {\n    // STDOUT will be like \"Brave Browser 77.0.69.135\"\n    const [, version] = /Brave Browser (\\d+\\.\\d+\\.\\d+\\.\\d+)/.exec(result.stdout)\n    const majorVersion = parseInt(version.split('.')[0])\n\n    return {\n      name: 'Brave',\n      channel: 'stable',\n      family: 'chromium',\n      displayName: 'Brave',\n      version,\n      path: browserPath,\n      majorVersion,\n    }\n  })\n}\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      return findBrowser().then((browser) => {\n        return {\n          browsers: config.browsers.concat(browser),\n        }\n      })\n    },\n  },\n})\n")))),(0,o.kt)("p",null,"Once selected, the Brave browser is detected using the same approach as any\nother browser of the ",(0,o.kt)("inlineCode",{parentName:"p"},"chromium")," family."),(0,o.kt)(c,{src:"/img/guides/launching-browsers/v10/brave-running-tests.png",alt:"Brave browser executing end-to-end tests",mdxType:"DocsImage"}),(0,o.kt)("p",null,"If you modify the list of browsers, you can see the\n",(0,o.kt)("a",{parentName:"p",href:"/guides/references/configuration#Resolved-Configuration"},"resolved configuration"),"\nin the ",(0,o.kt)("strong",{parentName:"p"},"Settings")," tab."),(0,o.kt)("h3",{id:"Unsupported-Browsers"},"Unsupported Browsers"),(0,o.kt)("p",null,"Some browsers such as Safari and Internet Explorer are not currently supported.\nSupport for more browsers is on our roadmap."),(0,o.kt)("h2",{id:"Browser-Environment"},"Browser Environment"),(0,o.kt)("p",null,"Cypress launches the browser in a way that's different from a regular browser\nenvironment. But it launches in a way that we believe makes testing ",(0,o.kt)("em",{parentName:"p"},"more\nreliable")," and ",(0,o.kt)("em",{parentName:"p"},"accessible"),"."),(0,o.kt)("h3",{id:"Launching-Browsers"},"Launching Browsers"),(0,o.kt)("p",null,"When Cypress goes to launch your browser it will give you an opportunity to\nmodify the arguments used to launch the browser."),(0,o.kt)("p",null,"This enables you to do things like:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Load your own extension"),(0,o.kt)("li",{parentName:"ul"},"Enable or disable experimental features")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/api/plugins/browser-launch-api"},"This part of the API is documented here.")),(0,o.kt)("h3",{id:"Cypress-Profile"},"Cypress Profile"),(0,o.kt)("p",null,"Cypress generates its own isolated profile apart from your normal browser\nprofile. This means things like ",(0,o.kt)("inlineCode",{parentName:"p"},"history")," entries, ",(0,o.kt)("inlineCode",{parentName:"p"},"cookies"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"3rd party extensions")," from your regular browsing session will not affect your\ntests in Cypress."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("strong",null,"Wait, I need my developer extensions!"),(0,o.kt)("p",{parentName:"admonition"},"That's no problem - you have to reinstall them ",(0,o.kt)("strong",{parentName:"p"},"once")," in the Cypress launched\nbrowser. We'll continue to use this Cypress testing profile on subsequent\nlaunches so all of your configuration will be preserved.")),(0,o.kt)("h3",{id:"Disabled-Barriers"},"Disabled Barriers"),(0,o.kt)("p",null,"Cypress automatically disables certain functionality in the Cypress launched\nbrowser that tend to get in the way of automated testing."),(0,o.kt)("h4",{id:"The-Cypress-launched-browser-automatically"},"The Cypress launched browser automatically:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ignores certificate errors."),(0,o.kt)("li",{parentName:"ul"},"Allows blocked pop-ups."),(0,o.kt)("li",{parentName:"ul"},"Disables 'Saving passwords'."),(0,o.kt)("li",{parentName:"ul"},"Disables 'Autofill forms and passwords'."),(0,o.kt)("li",{parentName:"ul"},"Disables asking to become your primary browser."),(0,o.kt)("li",{parentName:"ul"},"Disables device discovery notifications."),(0,o.kt)("li",{parentName:"ul"},"Disables language translations."),(0,o.kt)("li",{parentName:"ul"},"Disables restoring sessions."),(0,o.kt)("li",{parentName:"ul"},"Disables background network traffic."),(0,o.kt)("li",{parentName:"ul"},"Disables background and renderer throttling."),(0,o.kt)("li",{parentName:"ul"},"Disables prompts requesting permission to use devices like cameras or mics"),(0,o.kt)("li",{parentName:"ul"},"Disables user gesture requirements for autoplaying videos.")),(0,o.kt)("p",null,"You can see all of the default chrome command line switches we send\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/browsers/chrome.ts#L36"},"here"),"."),(0,o.kt)("h2",{id:"Browser-Icon"},"Browser Icon"),(0,o.kt)("p",null,"You might notice that if you already have the browser open you will see two of\nthe same browser icons in your dock."),(0,o.kt)(c,{src:"/img/guides/launching-browsers/v10/multiple-chrome-icons.png",alt:"Cypress icon with 2 Google Chrome icons",mdxType:"DocsImage"}),(0,o.kt)("p",null,"We understand that when Cypress is running in its own profile it can be\ndifficult to tell the difference between your normal browser and Cypress."),(0,o.kt)("p",null,"For this reason you may find downloading and using a browser's release channel\nversions (Dev, Canary, etc) useful. These browsers have different icons from the\nstandard stable browser, making them more distinguishable. You can also use the\nbundled ",(0,o.kt)("a",{parentName:"p",href:"#Electron-Browser"},"Electron browser"),", which does not have a dock icon."),(0,o.kt)("p",null,"Additionally, in Chrome-based browsers, we've made the browser spawned by\nCypress look different than regular sessions. You'll see a darker theme around\nthe chrome of the browser. You'll always be able to visually distinguish these."),(0,o.kt)(c,{src:"/img/guides/launching-browsers/v10/cypress-browser-chrome.png",alt:"Cypress Browser with darker chrome",mdxType:"DocsImage"}),(0,o.kt)("h2",{id:"Troubleshooting"},"Troubleshooting"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/guides/references/troubleshooting#Launching-browsers"},"Having issues launching installed browsers? Read more about troubleshooting browser launching")))}h.isMDXComponent=!0}}]);