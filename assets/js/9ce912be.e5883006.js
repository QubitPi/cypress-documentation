"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[7644],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,k=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(k,r(r({ref:t},c),{},{components:n})):a.createElement(k,r({ref:t},c))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6044:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const i={title:"Okta Authentication",e2eSpecific:!0,slug:"/guides/end-to-end-testing/okta-authentication"},r=void 0,s={unversionedId:"guides/end-to-end-testing/testing-strategies/okta-authentication",id:"guides/end-to-end-testing/testing-strategies/okta-authentication",title:"Okta Authentication",description:"What you'll learn",source:"@site/docs/guides/end-to-end-testing/testing-strategies/okta-authentication.mdx",sourceDirName:"guides/end-to-end-testing/testing-strategies",slug:"/guides/end-to-end-testing/okta-authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/okta-authentication",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/end-to-end-testing/testing-strategies/okta-authentication.mdx",tags:[],version:"current",lastUpdatedAt:1698215491,formattedLastUpdatedAt:"Oct 25, 2023",frontMatter:{title:"Okta Authentication",e2eSpecific:!0,slug:"/guides/end-to-end-testing/okta-authentication"},sidebar:"guides",previous:{title:"Google Authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/google-authentication"},next:{title:"Social Authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/social-authentication"}},p={},l=[{value:"Okta Developer Console Setup",id:"Okta-Developer-Console-Setup",level:2},{value:"Setting Okta app credentials in Cypress",id:"Setting-Okta-app-credentials-in-Cypress",level:2},{value:"Custom Command for Okta Authentication",id:"Custom-Command-for-Okta-Authentication",level:2},{value:"Login with <code>cy.origin()</code>",id:"Login-with-cyorigin",level:3},{value:"Programmatic Login",id:"Programmatic-Login",level:3},{value:"Adapting an Okta App for Testing",id:"Adapting-an-Okta-App-for-Testing",level:3},{value:"Adapting the back end",id:"Adapting-the-back-end",level:4},{value:"Adapting the front end",id:"Adapting-the-front-end",level:4}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},d=c("Icon"),u=c("CypressConfigFileTabs"),m=c("DocsVideo"),k={toc:l};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("h2",{parentName:"admonition",id:"What-youll-learn"},(0,o.kt)(d,{name:"graduation-cap",mdxType:"Icon"})," What you'll learn"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Log in to ",(0,o.kt)("a",{parentName:"li",href:"https://okta.com"},"Okta")," through the UI with\n",(0,o.kt)("a",{parentName:"li",href:"/api/commands/origin"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()"))),(0,o.kt)("li",{parentName:"ul"},"Programmatically authenticate with ",(0,o.kt)("a",{parentName:"li",href:"https://okta.com"},"Okta")," via a custom\nCypress command"),(0,o.kt)("li",{parentName:"ul"},"Adapting your ",(0,o.kt)("a",{parentName:"li",href:"https://okta.com"},"Okta")," application for programmatic\nauthentication during testing"))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The scope of this guide is to demonstrate authentication solely against the\n",(0,o.kt)("a",{parentName:"p",href:"https://www.okta.com/products/universal-directory/"},"Okta Universal Directory"),".\nFuture guides will expand to cover ",(0,o.kt)("a",{parentName:"p",href:"https://okta.com"},"Okta")," authentication with\nother identity providers.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Authenticate by visiting a different domain with\n",(0,o.kt)("a",{parentName:"strong",href:"/api/commands/origin"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()")))),(0,o.kt)("p",{parentName:"admonition"},"Typically, logging in a user within your app by authenticating via a third-party\nprovider requires visiting a login page hosted on a different domain. Before\nCypress ",(0,o.kt)("a",{parentName:"p",href:"https://on.cypress.io/changelog#12-0-0"},"v12.0.0"),", Cypress tests were\nlimited to visiting domains of the same origin, making programmatic login the\nonly option for authenticating users with a third-party API. As of Cypress\n",(0,o.kt)("a",{parentName:"p",href:"https://on.cypress.io/changelog#12-0-0"},"v12.0.0"),", Cypress tests are no longer\nlimited to visiting domains of a single origin, meaning you can easily\nauthenticate to\n",(0,o.kt)("a",{parentName:"p",href:"https://www.okta.com/products/universal-directory/"},"Okta Universal Directory"),"\nvia the UI!")),(0,o.kt)("h2",{id:"Okta-Developer-Console-Setup"},"Okta Developer Console Setup"),(0,o.kt)("p",null,"If not already setup, you will need to\n",(0,o.kt)("a",{parentName:"p",href:"https://okta.com"},"create an Okta application")," within the Okta Developer\nConsole. Once the Okta application is created, the Okta Developer Console will\nprovide a ",(0,o.kt)("strong",{parentName:"p"},"Client ID"),", which will used alongside your ",(0,o.kt)("strong",{parentName:"p"},"Okta domain")," to\n",(0,o.kt)("a",{parentName:"p",href:"https://developer.okta.com/docs/guides/sign-into-spa/react/configure-the-sdk/"},"configure Okta SDKs"),"\nas shown in the subsequent sections of this guide."),(0,o.kt)("h2",{id:"Setting-Okta-app-credentials-in-Cypress"},"Setting Okta app credentials in Cypress"),(0,o.kt)("p",null,"To have access to test user credentials within our tests we need to configure\nCypress to use the ",(0,o.kt)("a",{parentName:"p",href:"https://okta.com"},"Okta")," environment variables set in the\n",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file."),(0,o.kt)("cypress-config-example",null,(0,o.kt)(u,{mdxType:"CypressConfigFileTabs"},(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n\nmodule.exports = defineConfig({\n  env: {\n    auth_username: process.env.AUTH_USERNAME,\n    auth_password: process.env.AUTH_PASSWORD,\n    okta_domain: process.env.REACT_APP_OKTA_DOMAIN,\n    okta_client_id: process.env.REACT_APP_OKTA_CLIENTID,\n  },\n})\n")),(0,o.kt)("pre",{parentName:"cypress-config-example"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n\nexport default defineConfig({\n  env: {\n    auth_username: process.env.AUTH_USERNAME,\n    auth_password: process.env.AUTH_PASSWORD,\n    okta_domain: process.env.REACT_APP_OKTA_DOMAIN,\n    okta_client_id: process.env.REACT_APP_OKTA_CLIENTID,\n  },\n})\n")))),(0,o.kt)("h2",{id:"Custom-Command-for-Okta-Authentication"},"Custom Command for Okta Authentication"),(0,o.kt)("p",null,"There are two ways you can authenticate to Okta:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/guides/end-to-end-testing/okta-authentication#Login-with-cy-origin"},"Login with ",(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/guides/end-to-end-testing/okta-authentication#Programmatic-Login"},"Programmatic Access"))),(0,o.kt)("h3",{id:"Login-with-cyorigin"},"Login with ",(0,o.kt)("a",{parentName:"h3",href:"/api/commands/origin"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()"))),(0,o.kt)("p",null,"Next, we'll write a custom command called ",(0,o.kt)("inlineCode",{parentName:"p"},"loginByOkta")," to perform a login to\n",(0,o.kt)("a",{parentName:"p",href:"https://okta.com"},"Okta"),". This command will use\n",(0,o.kt)("a",{parentName:"p",href:"/api/commands/origin"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()"))," to"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"navigate to the Okta origin"),(0,o.kt)("li",{parentName:"ol"},"input user credentials"),(0,o.kt)("li",{parentName:"ol"},"sign in and redirect back to the\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App")),(0,o.kt)("li",{parentName:"ol"},"cache the results with ",(0,o.kt)("a",{parentName:"li",href:"/api/commands/session"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.session()")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// cypress/support/auth-provider-commands/okta.ts\n// Okta\nconst loginToOkta = (username: string, password: string) => {\n  Cypress.log({\n    displayName: 'OKTA LOGIN',\n    message: [`\ud83d\udd10 Authenticating | ${username}`],\n    autoEnd: false,\n  })\n\n  cy.visit('/')\n  cy.origin(\n    Cypress.env('okta_domain'),\n    { args: { username, password } },\n    ({ username, password }) => {\n      cy.get('input[name=\"identifier\"]').type(username)\n      cy.get('input[name=\"credentials.passcode\"]').type(password, {\n        log: false,\n      })\n      cy.get('[type=\"submit\"]').click()\n    }\n  )\n\n  cy.get('[data-test=\"sidenav-username\"]').should('contain', username)\n}\n// right now our custom command is light. More on this later!\nCypress.Commands.add('loginByOkta', (username: string, password: string) => {\n  return loginToOkta(username, password)\n})\n")),(0,o.kt)("p",null,"Now, we can use our ",(0,o.kt)("inlineCode",{parentName:"p"},"loginByOkta")," command in the test. Below is our test to\nlogin as a user via ",(0,o.kt)("a",{parentName:"p",href:"https://okta.com"},"Okta")," and run a few basic sanity checks."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/tests/ui-auth-providers/okta.spec.ts"},"runnable version of this test"),"\nis in the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"describe('Okta', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.loginByOkta(Cypress.env('okta_username'), Cypress.env('okta_password'))\n  })\n\n  it('verifies signed in user does not have a bank account', function () {\n    cy.get('[data-test=\"sidenav-bankaccounts\"]').click()\n    cy.get('[data-test=\"empty-list-header\"]').should('be.visible')\n  })\n})\n")),(0,o.kt)(m,{src:"https://vimeo.com/789093739",mdxType:"DocsVideo"}),(0,o.kt)("p",null,"Lastly, we can refactor our login command to take advantage of\n",(0,o.kt)("a",{parentName:"p",href:"/api/commands/session"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.session()"))," to store our logged in user so we don't\nhave to reauthenticate with everything test."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"Cypress.Commands.add('loginByOkta', (username: string, password: string) => {\n  cy.session(\n    `okta-${username}`,\n    () => {\n      return loginToOkta(username, password)\n    },\n    {\n      validate() {\n        cy.visit('/')\n        cy.get('[data-test=\"sidenav-username\"]').should('contain', username)\n      },\n    }\n  )\n})\n")),(0,o.kt)(m,{src:"https://vimeo.com/789093688",mdxType:"DocsVideo"}),(0,o.kt)("h3",{id:"Programmatic-Login"},"Programmatic Login"),(0,o.kt)("p",null,"Next, we will write a command named ",(0,o.kt)("inlineCode",{parentName:"p"},"loginByOktaApi")," to perform a programmatic\nlogin into ",(0,o.kt)("a",{parentName:"p",href:"https://okta.com"},"Okta")," and set an item in ",(0,o.kt)("inlineCode",{parentName:"p"},"localStorage")," with the\nauthenticated users details, which we will use in our application code to verify\nwe are authenticated under test."),(0,o.kt)("p",null,"In order to make sure this is enabled inside the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),",\nPlease set the ",(0,o.kt)("inlineCode",{parentName:"p"},"REACT_APP_OKTA_PROGRAMMATIC")," environment variable to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"loginByOktaApi")," command will execute the following steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Use the\n",(0,o.kt)("a",{parentName:"li",href:"https://developer.okta.com/docs/reference/api/authn/"},"Okta Authentication API"),"\nto perform the programmatic login."),(0,o.kt)("li",{parentName:"ol"},"Then uses an instance of ",(0,o.kt)("inlineCode",{parentName:"li"},"OktaAuth")," client from the\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/okta/okta-auth-js"},"Okta Auth SDK")," to gain the ",(0,o.kt)("inlineCode",{parentName:"li"},"id_token"),"\nonce a session token is obtained."),(0,o.kt)("li",{parentName:"ol"},"Finally the ",(0,o.kt)("inlineCode",{parentName:"li"},"oktaCypress")," localStorage item is set with the ",(0,o.kt)("inlineCode",{parentName:"li"},"access token"),"\nand user profile.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// cypress/support/commands.js\nimport { OktaAuth } from '@okta/okta-auth-js'\n\n// Okta\nCypress.Commands.add('loginByOktaApi', (username, password) => {\n  cy.request({\n    method: 'POST',\n    url: `https://${Cypress.env('okta_domain')}/api/v1/authn`,\n    body: {\n      username,\n      password,\n    },\n  }).then(({ body }) => {\n    const user = body._embedded.user\n    const config = {\n      issuer: `https://${Cypress.env('okta_domain')}/oauth2/default`,\n      clientId: Cypress.env('okta_client_id'),\n      redirectUri: 'http://localhost:3000/implicit/callback',\n      scopes: ['openid', 'email', 'profile'],\n    }\n\n    const authClient = new OktaAuth(config)\n\n    return authClient.token\n      .getWithoutPrompt({ sessionToken: body.sessionToken })\n      .then(({ tokens }) => {\n        const userItem = {\n          token: tokens.accessToken.value,\n          user: {\n            sub: user.id,\n            email: user.profile.login,\n            given_name: user.profile.firstName,\n            family_name: user.profile.lastName,\n            preferred_username: user.profile.login,\n          },\n        }\n\n        window.localStorage.setItem('oktaCypress', JSON.stringify(userItem))\n\n        log.snapshot('after')\n        log.end()\n      })\n  })\n})\n")),(0,o.kt)("p",null,"With our Okta app setup properly in Okta Developer console, necessary\nenvironment variables in place, and our ",(0,o.kt)("inlineCode",{parentName:"p"},"loginByOktaApi")," command implemented, we\nwill be able to authenticate with Okta while our app is under test. Below is a\ntest to login as a user via ",(0,o.kt)("a",{parentName:"p",href:"https://okta.com"},"Okta"),", complete the onboarding\nprocess and logout."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"describe('Okta', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.loginByOktaApi(\n      Cypress.env('auth_username'),\n      Cypress.env('auth_password')\n    )\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("strong",null,"Try it out"),(0,o.kt)("p",{parentName:"admonition"},"The\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/tests/ui-auth-providers/okta.spec.ts"},"runnable version of this test"),"\nis in the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,o.kt)("h3",{id:"Adapting-an-Okta-App-for-Testing"},"Adapting an Okta App for Testing"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("strong",null,"Note"),(0,o.kt)("p",{parentName:"admonition"},"The previous section focused on the programmatic Okta authentication practice\nwithin Cypress tests. To use this practice, it is assumed you are testing an app\nappropriately built or adapted to use Okta."),(0,o.kt)("p",{parentName:"admonition"},"Unlike programmatic login, authenticating with\n",(0,o.kt)("a",{parentName:"p",href:"/api/commands/origin"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()"))," does not require adapting the application\nto work. This step is only needed if implementing programmatic login."),(0,o.kt)("p",{parentName:"admonition"},"The following sections provides guidance on building or adapting an app to use\nOkta authentication.")),(0,o.kt)("p",null,"The\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App")," is\nused and provides configuration and runnable code for both the React SPA and the\nExpress back end."),(0,o.kt)("p",null,"The front end uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/okta/okta-react"},"Okta React SDK")," for\nReact Single Page Applications (SPA), which uses the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/okta/okta-auth-js"},"Okta Auth SDK")," underneath. The back end\nuses the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/okta/okta-oidc-js/tree/master/packages/jwt-verifier"},"Okta JWT Verifier for Node.js"),"\nto validate JWTs from ",(0,o.kt)("a",{parentName:"p",href:"https://okta.com"},"Okta"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("strong",null,"Note"),(0,o.kt)("p",{parentName:"admonition"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn dev:okta")," command when starting the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,o.kt)("h4",{id:"Adapting-the-back-end"},"Adapting the back end"),(0,o.kt)("p",null,"In order to validate API requests from the frontend, we install\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/okta/okta-oidc-js/tree/master/packages/jwt-verifier"},"Okta JWT Verifier for Node.js"),"\nand configure it using the Okta Domain and Client ID provided after\n",(0,o.kt)("a",{parentName:"p",href:"https://developer.okta.com/docs/guides/sign-into-spa/react/create-okta-application/"},"Creating an Okta application"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// backend/helpers.ts\nimport OktaJwtVerifier from '@okta/jwt-verifier'\n\ndotenv.config()\n\n// Okta Validate the JWT Signature\nconst oktaJwtVerifier = new OktaJwtVerifier({\n  issuer: `https://${process.env.REACT_APP_OKTA_DOMAIN}/oauth2/default`,\n  clientId: process.env.REACT_APP_OKTA_CLIENTID,\n  assertClaims: {\n    aud: 'api://default',\n    cid: process.env.REACT_APP_OKTA_CLIENTID,\n  },\n})\n")),(0,o.kt)("p",null,"Next, we'll define an Express middleware function to be use in our routes to\nverify the ",(0,o.kt)("a",{parentName:"p",href:"https://okta.com"},"Okta")," JWT sent by the front end API requests as\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"Bearer")," token."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// backend/helpers.ts\n\n// ...\n\nexport const verifyOktaToken = (req, res, next) => {\n  const bearerHeader = req.headers['authorization']\n\n  if (bearerHeader) {\n    const bearer = bearerHeader.split(' ')\n    const bearerToken = bearer[1]\n\n    oktaJwtVerifier\n      .verifyAccessToken(bearerToken, 'api://default')\n      .then((jwt) => {\n        // the token is valid\n        req.user = {\n          // @ts-ignore\n          sub: jwt.sub,\n        }\n\n        return next()\n      })\n      .catch((err) => {\n        // a validation failed, inspect the error\n        console.log('error', err)\n      })\n  } else {\n    res.status(401).send({\n      error: 'Unauthorized',\n    })\n  }\n}\n")),(0,o.kt)("p",null,"Once this helper is defined, we can use it globally to apply to all routes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// backend/app.ts\n// initial imports ...\nimport { verifyOktaToken } from './helpers'\n\n// ...\n\nif (process.env.REACT_APP_OKTA) {\n  app.use(verifyOktaToken)\n}\n\n// routes ...\n")),(0,o.kt)("h4",{id:"Adapting-the-front-end"},"Adapting the front end"),(0,o.kt)("p",null,"We need to update our front end React app to allow for authentication with\n",(0,o.kt)("a",{parentName:"p",href:"https://okta.com"},"Okta")," using the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/okta/okta-react"},"Okta React SDK"),"."),(0,o.kt)("p",null,"First, we create a ",(0,o.kt)("inlineCode",{parentName:"p"},"AppOkta.tsx")," container, based off of the ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx"),"\ncomponent."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AppOkta.tsx")," uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"useOktaAuth")," React Hook, replaces the Sign Up and Sign\nIn routes with a ",(0,o.kt)("inlineCode",{parentName:"p"},"SecureRoute")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"LoginCallback")," and wraps the component with\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"withOktaAuth")," higher order component (HOC)."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," hook is added to get the access token for the authenticated user\nand send an ",(0,o.kt)("inlineCode",{parentName:"p"},"OKTA")," event with the ",(0,o.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"token")," objects to work with the\nexisting authentication layer (",(0,o.kt)("inlineCode",{parentName:"p"},"authMachine.ts"),"). We define a route for\n",(0,o.kt)("inlineCode",{parentName:"p"},"implicit/callback")," to render the ",(0,o.kt)("inlineCode",{parentName:"p"},"LoginCallback")," component and a ",(0,o.kt)("inlineCode",{parentName:"p"},"SecureRoute"),"\nfor the root path."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/containers/AppOkta.tsx\n// initial imports ...\nimport {\n  LoginCallback,\n  SecureRoute,\n  useOktaAuth,\n  withOktaAuth,\n} from '@okta/okta-react'\n\n// ...\n\nconst AppOkta: React.FC = () => {\n  const { authState, oktaAuth } = useOktaAuth()\n\n  // ...\n\n  useEffect(() => {\n    if (authState.isAuthenticated) {\n      oktaAuth.getUser().then((user) => {\n        authService.send('OKTA', { user, token: oktaAuthState.accessToken })\n      })\n    }\n  }, [authState, oktaAuth])\n\n  // ...\n\n  return (\n    <div className={classes.root}>\n      // ...\n      {authState.matches('unauthorized') && (\n        <>\n          <Route path=\"/implicit/callback\" component={LoginCallback} />\n          <SecureRoute exact path=\"/\" />\n        </>\n      )}\n      // ...\n    </div>\n  )\n}\n\nexport default withOktaAuth(AppOkta)\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The full\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppOkta.tsx"},"AppOkta.tsx component"),"\nis in the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,o.kt)("p",null,"Next, we update our entry point (",(0,o.kt)("inlineCode",{parentName:"p"},"index.tsx"),") to wrap our application with the\n",(0,o.kt)("inlineCode",{parentName:"p"},"<Security>")," component from the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/okta/okta-react"},"Okta React SDK")," providing ",(0,o.kt)("inlineCode",{parentName:"p"},"issuer"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"clientId")," from our Okta application, along with a ",(0,o.kt)("inlineCode",{parentName:"p"},"redirectUri")," as props using\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"REACT_APP_OKTA")," variables are defined in our ",(0,o.kt)("inlineCode",{parentName:"p"},".env"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/index.tsx\n\n// initial imports ...\nimport { OktaAuth } from '@okta/okta-auth-js'\nimport { Security } from '@okta/okta-react'\nimport AppOkta from './containers/AppOkta'\n\n// ...\n\nconst oktaAuth = new OktaAuth({\n  issuer: `https://${process.env.REACT_APP_OKTA_DOMAIN}/oauth2/default`,\n  clientId: process.env.REACT_APP_OKTA_CLIENTID,\n  redirectUri: window.location.origin + '/implicit/callback',\n})\n\nReactDOM.render(\n  <Router history={history}>\n    <ThemeProvider theme={theme}>\n      {process.env.REACT_APP_OKTA ? (\n        <Security oktaAuth={oktaAuth}>\n          <AppOkta />\n        </Security>\n      ) : (\n        <App />\n      )}\n    </ThemeProvider>\n  </Router>,\n  document.getElementById('root')\n)\n")),(0,o.kt)("p",null,"An update to our\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppOkta.tsx"},"AppOkta.tsx component"),"\nis needed to conditionally use the ",(0,o.kt)("inlineCode",{parentName:"p"},"oktaCypress")," localStorage item."),(0,o.kt)("p",null,"In the code below, we conditionally apply a ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," block based on being\nunder test with Cypress (using ",(0,o.kt)("inlineCode",{parentName:"p"},"window.Cypress"),")."),(0,o.kt)("p",null,"In addition, we will update the export to be wrapped with the ",(0,o.kt)("inlineCode",{parentName:"p"},"withOktaAuth"),"\nhigher order component only if we are not under test in Cypress. This allows our\napplication to work with the ",(0,o.kt)("a",{parentName:"p",href:"https://okta.com"},"Okta")," redirect login flow in\ndevelopment/production but not when under test in Cypress."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'// src/containers/AppOkta.tsx\n// initial imports ...\nimport { LoginCallback, SecureRoute, useOktaAuth, withOktaAuth } from "@okta/okta-react";\n\n// ...\n\nconst AppOkta: React.FC = () => {\n  const { authState, oktaAuth } = useOktaAuth();\n\n  // ...\n\n  // If under test in Cypress, get credentials from "oktaCypress" localstorage item and send event to our state management to log the user into the SPA\n  if (window.Cypress) {\n    useEffect(() => {\n      const okta = JSON.parse(localStorage.getItem("oktaCypress")!);\n      authService.send("OKTA", {\n        user: okta.user,\n        token: okta.token,\n      });\n    }, []);\n  } else {\n    useEffect(() => {\n      if (authState.isAuthenticated) {\n        oktaAuth.getUser().then((user) => {\n          authService.send("OKTA", { user, token: oktaAuthState.accessToken });\n        });\n      }\n    }, [authState, oktaAuth]);\n  }\n\n  // ...\n\n  return (\n    <div className={classes.root}>\n\n      // ...\n\n      {authState.matches("unauthorized") && (\n        <>\n          <Route path="/implicit/callback" component={LoginCallback} />\n          <SecureRoute exact path="/" />\n        </>\n      )}\n\n      // ...\n    </div>\n  );\n};\n\n// Conditional export wrapped with `withOktaAuth` if we are not under test in Cypress\nlet appOkta = window.Cypress ? AppOkta : withOktaAuth(AppOkta);\nexport default appOkta;\n')))}h.isMDXComponent=!0}}]);