"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[6182],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(o,".").concat(m)]||u[m]||d[m]||r;return n?i.createElement(h,s(s({ref:t},c),{},{components:n})):i.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<r;p++)s[p]=n[p];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6895:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={title:"Bitbucket Pipelines"},s=void 0,l={unversionedId:"guides/continuous-integration/bitbucket-pipelines",id:"guides/continuous-integration/bitbucket-pipelines",title:"Bitbucket Pipelines",description:"What you'll learn",source:"@site/docs/guides/continuous-integration/bitbucket-pipelines.mdx",sourceDirName:"guides/continuous-integration",slug:"/guides/continuous-integration/bitbucket-pipelines",permalink:"/cypress-documentation/guides/continuous-integration/bitbucket-pipelines",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/continuous-integration/bitbucket-pipelines.mdx",tags:[],version:"current",frontMatter:{title:"Bitbucket Pipelines"},sidebar:"guides",previous:{title:"AWS CodeBuild",permalink:"/cypress-documentation/guides/continuous-integration/aws-codebuild"},next:{title:"CircleCI",permalink:"/cypress-documentation/guides/continuous-integration/circleci"}},o={},p=[{value:"Basic Setup",id:"Basic-Setup",level:2},{value:"Testing in Chrome and Firefox with Cypress Docker Images",id:"Testing-in-Chrome-and-Firefox-with-Cypress-Docker-Images",level:2},{value:"Caching Dependencies and Build Artifacts",id:"Caching-Dependencies-and-Build-Artifacts",level:2},{value:"Parallelization",id:"Parallelization",level:2},{value:"Install Job",id:"Install-Job",level:3},{value:"Worker Jobs",id:"Worker-Jobs",level:3},{value:"Using Cypress Cloud with Bitbucket Pipelines",id:"Using-Cypress-Cloud-with-Bitbucket-Pipelines",level:2},{value:"Cypress Real World Example with Bitbucket Pipelines",id:"Cypress-Real-World-Example-with-Bitbucket-Pipelines",level:2}],c=(u="Icon",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const d={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("h2",{parentName:"admonition",id:"What-youll-learn"},(0,a.kt)(c,{name:"graduation-cap",mdxType:"Icon"})," What you'll learn"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"How to run Cypress tests with Bitbucket Pipelines as part of CI/CD pipeline"),(0,a.kt)("li",{parentName:"ul"},"How to parallelize Cypress test runs withins Bitbucket Pipelines"))),(0,a.kt)("p",null,"With its integrated\n",(0,a.kt)("a",{parentName:"p",href:"https://bitbucket.org/product/features/pipelines"},"integrated CI/CD, Pipelines"),",\n",(0,a.kt)("a",{parentName:"p",href:"https://bitbucket.com"},"Bitbucket"),' offers developers "CI/CD where it belongs,\nright next to your code. No servers to manage, repositories to synchronize, or\nuser management to configure."'),(0,a.kt)("p",null,"Detailed documentation is available in the\n",(0,a.kt)("a",{parentName:"p",href:"https://support.atlassian.com/bitbucket-cloud/docs/get-started-with-bitbucket-pipelines/"},"Bitbucket Pipelines Documentation"),"."),(0,a.kt)("h2",{id:"Basic-Setup"},"Basic Setup"),(0,a.kt)("p",null,"The example below shows a basic setup and job to use\n",(0,a.kt)("a",{parentName:"p",href:"https://bitbucket.org/product/features/pipelines"},"Bitbucket Pipelines")," to run\nend-to-end tests with Cypress and Electron."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"image: node:latest\n\npipelines:\n  default:\n    - step:\n        script:\n          # install dependencies\n          - npm ci\n          # start the server in the background\n          - npm run start &\n          # run Cypress tests\n          - npm run e2e\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("strong",null,"Try it out"),(0,a.kt)("p",{parentName:"admonition"},"To try out the example above yourself, fork the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-example-kitchensink"},"Cypress Kitchen Sink"),"\nexample project and place the above Bitbucket Pipelines configuration in\n",(0,a.kt)("inlineCode",{parentName:"p"},"bitbucket-pipelines.yml"),".")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"How this ",(0,a.kt)("inlineCode",{parentName:"strong"},"bitbucket-pipelines.yml")," works:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"On ",(0,a.kt)("em",{parentName:"li"},"push")," to this repository, this job will provision and start Bitbucket\nPipelines-hosted Linux instance for running the pipelines defined in the\n",(0,a.kt)("inlineCode",{parentName:"li"},"pipelines")," section of the configuration."),(0,a.kt)("li",{parentName:"ul"},"The code is checked out from our GitHub/Bitbucket repository."),(0,a.kt)("li",{parentName:"ul"},"Finally, our scripts will:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Install npm dependencies"),(0,a.kt)("li",{parentName:"ul"},"Start the project web server (",(0,a.kt)("inlineCode",{parentName:"li"},"npm start"),")"),(0,a.kt)("li",{parentName:"ul"},"Run the Cypress tests within our GitHub/Bitbucket repository within Electron")))),(0,a.kt)("h2",{id:"Testing-in-Chrome-and-Firefox-with-Cypress-Docker-Images"},"Testing in Chrome and Firefox with Cypress Docker Images"),(0,a.kt)("p",null,"The Cypress team maintains the official\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-docker-images"},"Docker Images")," for running\nCypress locally and in CI, which are built with Google Chrome and Firefox. For\nexample, this allows us to run the tests in Firefox by passing the\n",(0,a.kt)("inlineCode",{parentName:"p"},"--browser firefox")," attribute to ",(0,a.kt)("inlineCode",{parentName:"p"},"cypress run"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"image: cypress/browsers:node12.14.1-chrome85-ff81\n\npipelines:\n  default:\n    - step:\n        script:\n          # install dependencies\n          - npm ci\n          # start the server in the background\n          - npm run start &\n          # run Cypress tests in Firefox\n          - npx cypress run --browser firefox\n")),(0,a.kt)("h2",{id:"Caching-Dependencies-and-Build-Artifacts"},"Caching Dependencies and Build Artifacts"),(0,a.kt)("p",null,"Per the\n",(0,a.kt)("a",{parentName:"p",href:"https://support.atlassian.com/bitbucket-cloud/docs/cache-dependencies/"},"Caches documentation"),",\n",(0,a.kt)("a",{parentName:"p",href:"https://bitbucket.com"},"Bitbucket")," offers options for caching dependencies and\nbuild artifacts across many different workflows."),(0,a.kt)("p",null,"To cache ",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules"),", the npm cache across builds, the ",(0,a.kt)("inlineCode",{parentName:"p"},"cache")," attribute and\nconfiguration has been added below."),(0,a.kt)("p",null,"Artifacts from a job can be defined by providing paths to the ",(0,a.kt)("inlineCode",{parentName:"p"},"artifacts"),"\nattribute."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"image: cypress/browsers:node12.14.1-chrome85-ff81\n\npipelines:\n  default:\n    - step:\n        caches:\n          - node\n        script:\n          # install dependencies\n          - npm ci\n          # start the server in the background\n          - npm run start &\n          # run Cypress tests in Firefox\n          - npx cypress run --browser firefox\n        artifacts:\n          # store any generates images and videos as artifacts\n          - cypress/screenshots/**\n          - cypress/videos/**\n")),(0,a.kt)("p",null,"Using the\n",(0,a.kt)("a",{parentName:"p",href:"https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/#Global-configuration-options"},"definitions"),"\nblock we can define additional caches for npm and Cypress."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"definitions:\n  caches:\n    npm: $HOME/.npm\n    cypress: $HOME/.cache/Cypress\n")),(0,a.kt)("h2",{id:"Parallelization"},"Parallelization"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/guides/cloud/introduction"},"Cypress Cloud")," offers the ability to\n",(0,a.kt)("a",{parentName:"p",href:"/guides/guides/parallelization"},"parallelize and group test runs")," along with\nadditional insights and ",(0,a.kt)("a",{parentName:"p",href:"/guides/cloud/analytics"},"analytics")," for Cypress tests."),(0,a.kt)("p",null,"Before diving into an example of a parallelization setup, it is important to\nunderstand the two different types of jobs that we will declare:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Install Job"),": A job that installs and caches dependencies that will be used\nby subsequent jobs later in the Bitbucket Pipelines workflow."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Worker Job"),": A job that handles execution of Cypress tests and depends on\nthe ",(0,a.kt)("em",{parentName:"li"},"install job"),".")),(0,a.kt)("h3",{id:"Install-Job"},"Install Job"),(0,a.kt)("p",null,"The separation of installation from test running is necessary when running\nparallel jobs. It allows for reuse of various build steps aided by caching."),(0,a.kt)("p",null,"First, we break the pipeline up into reusable chunks of configuration using a\n",(0,a.kt)("a",{parentName:"p",href:"https://support.atlassian.com/bitbucket-cloud/docs/yaml-anchors/"},"YAML anchor"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"&e2e"),". This will be used by the worker jobs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"image: cypress/base:14.16.0\n\n## job definition for running E2E tests in parallel\ne2e: &e2e\n  name: E2E tests\n  caches:\n    - node\n    - cypress\n  script:\n    - npm run start &\n    - npm run e2e:record -- --parallel --ci-build-id $BITBUCKET_BUILD_NUMBER\n  artifacts:\n    # store any generates images and videos as artifacts\n    - cypress/screenshots/**\n    - cypress/videos/**\n")),(0,a.kt)("h3",{id:"Worker-Jobs"},"Worker Jobs"),(0,a.kt)("p",null,"Next, the worker jobs under ",(0,a.kt)("inlineCode",{parentName:"p"},"pipelines")," that will run Cypress tests with Chrome\nin parallel."),(0,a.kt)("p",null,"We can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"e2e"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://support.atlassian.com/bitbucket-cloud/docs/yaml-anchors/"},"YAML anchor"),"\nin our definition of the pipeline to execute parallel jobs using the ",(0,a.kt)("inlineCode",{parentName:"p"},"parallel"),"\nattribute. This will allow us to run multiples instances of Cypress at same\ntime."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"## job definition for running E2E tests in parallel\n## ...\n\npipelines:\n  default:\n    - step:\n        name: Install dependencies\n        caches:\n          - npm\n          - cypress\n          - node\n        script:\n          - npm ci\n    - parallel:\n      # run N steps in parallel\n      - step:\n          <<: *e2e\n      - step:\n          <<: *e2e\n      - step:\n          <<: *e2e\ndefinitions:\n  caches:\n    npm: $HOME/.npm\n    cypress: $HOME/.cache/Cypress\n")),(0,a.kt)("p",null,"The complete ",(0,a.kt)("inlineCode",{parentName:"p"},"bitbucket-pipelines.yml")," is below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"image: cypress/base:14.16.0\n\n## job definition for running E2E tests in parallel\ne2e: &e2e\n  name: E2E tests\n  caches:\n    - node\n    - cypress\n  script:\n    - npm run start &\n    - npm run e2e:record -- --parallel --ci-build-id $BITBUCKET_BUILD_NUMBER\n  artifacts:\n    # store any generates images and videos as artifacts\n    - cypress/screenshots/**\n    - cypress/videos/**\n\npipelines:\n  default:\n    - step:\n        name: Install dependencies\n        caches:\n          - npm\n          - cypress\n          - node\n        script:\n          - npm ci\n    - parallel:\n        # run N steps in parallel\n        - step:\n            <<: *e2e\n        - step:\n            <<: *e2e\n        - step:\n            <<: *e2e\ndefinitions:\n  caches:\n    npm: $HOME/.npm\n    cypress: $HOME/.cache/Cypress\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The above configuration using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--parallel")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"--record")," flags to\n",(0,a.kt)("a",{parentName:"p",href:"/guides/guides/command-line#cypress-run"},"cypress run")," requires setting up\nrecording test results to ",(0,a.kt)("a",{parentName:"p",href:"https://on.cypress.io/cloud"},"Cypress Cloud"),".")),(0,a.kt)("h2",{id:"Using-Cypress-Cloud-with-Bitbucket-Pipelines"},"Using Cypress Cloud with Bitbucket Pipelines"),(0,a.kt)("p",null,"In the Bitbucket Pipelines configuration we have defined in the previous\nsection, we are leveraging three useful features of\n",(0,a.kt)("a",{parentName:"p",href:"https://on.cypress.io/cloud"},"Cypress Cloud"),":"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://on.cypress.io/how-do-i-record-runs"},"Recording test results with the ",(0,a.kt)("inlineCode",{parentName:"a"},"--record")," flag"),"\nto ",(0,a.kt)("a",{parentName:"p",href:"https://on.cypress.io/cloud"},"Cypress Cloud"),":"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"In-depth and shareable ",(0,a.kt)("a",{parentName:"li",href:"/guides/cloud/runs"},"test reports"),"."),(0,a.kt)("li",{parentName:"ul"},"Visibility into test failures via quick access to error messages, stack\ntraces, screenshots, videos, and contextual details."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/guides/cloud/bitbucket-integration"},"Integrating testing with the pull-request process"),"\nvia\n",(0,a.kt)("a",{parentName:"li",href:"/guides/cloud/bitbucket-integration#Status-checks"},"commit status check guards"),"\nand convenient\n",(0,a.kt)("a",{parentName:"li",href:"/guides/cloud/bitbucket-integration#Pull-Request-comments"},"pull request comments"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/guides/cloud/flaky-test-management"},"Detecting flaky tests")," and surfacing\nthem via ",(0,a.kt)("a",{parentName:"li",href:"/guides/cloud/flaky-test-management#Slack"},"Slack alerts")," or\n",(0,a.kt)("a",{parentName:"li",href:"/guides/cloud/bitbucket-integration"},"Bitbucket PR status checks"),"."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"/guides/guides/parallelization"},"Parallelizing test runs")," and optimizing\ntheir execution via\n",(0,a.kt)("a",{parentName:"p",href:"/guides/guides/parallelization#Balance-strategy"},"intelligent load-balancing"),"\nof test specs across CI machines with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--parallel")," flag.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Organizing and consolidating multiple ",(0,a.kt)("inlineCode",{parentName:"p"},"cypress run")," calls by labeled groups\ninto a single report within ",(0,a.kt)("a",{parentName:"p",href:"https://on.cypress.io/cloud"},"Cypress Cloud"),". In\nthe example above we use the ",(0,a.kt)("inlineCode",{parentName:"p"},'--group "UI - Chrome"'),' flag to organize all UI\ntests for the Chrome browser into a group labeled "UI - Chrome" in the\n',(0,a.kt)("a",{parentName:"p",href:"https://on.cypress.io/cloud"},"Cypress Cloud")," report."))),(0,a.kt)("h2",{id:"Cypress-Real-World-Example-with-Bitbucket-Pipelines"},"Cypress Real World Example with Bitbucket Pipelines"),(0,a.kt)("p",null,"A complete CI workflow against multiple browsers, viewports and operating\nsystems is available in the"),(0,a.kt)(c,{name:"github",inline:"true",contentType:"rwa",mdxType:"Icon"}),".",(0,a.kt)("p",null,"Clone the ",(0,a.kt)(c,{name:"github",inline:"true",contentType:"rwa",mdxType:"Icon"})," and refer to\nthe\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/bitbucket-pipelines.yml"},"bitbucket-pipelines.yml"),"\nfile."))}m.isMDXComponent=!0}}]);