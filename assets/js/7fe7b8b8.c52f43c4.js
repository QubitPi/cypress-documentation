"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[900],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=s,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:s,i[1]=o;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6183:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>k,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(7462),s=(n(7294),n(3905));const r={title:"and",sidebar_position:20,slug:"/api/commands/and"},i=void 0,o={unversionedId:"api/assertions/and",id:"api/assertions/and",title:"and",description:"Create an assertion. Assertions are automatically retried as part of the",source:"@site/docs/api/assertions/and.mdx",sourceDirName:"api/assertions",slug:"/api/commands/and",permalink:"/cypress-documentation/api/commands/and",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/assertions/and.mdx",tags:[],version:"current",lastUpdatedAt:1698909506,formattedLastUpdatedAt:"Nov 2, 2023",sidebarPosition:20,frontMatter:{title:"and",sidebar_position:20,slug:"/api/commands/and"},sidebar:"api",previous:{title:"Assertions Reference",permalink:"/cypress-documentation/api/assertions/assertions-reference"},next:{title:"should",permalink:"/cypress-documentation/api/commands/should"}},l={},c=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Arguments",id:"Arguments",level:3},{value:'Yields <Icon name="question-circle"/>',id:"Yields",level:3},{value:"Examples",id:"Examples",level:2},{value:"Chainers",id:"Chainers",level:3},{value:"Chain assertions on the same subject",id:"Chain-assertions-on-the-same-subject",level:4},{value:"Value",id:"Value",level:3},{value:"Chain assertions when yield changes",id:"Chain-assertions-when-yield-changes",level:4},{value:"Method and Value",id:"Method-and-Value",level:3},{value:"Assert the href is equal to &#39;/users&#39;",id:"Assert-the-href-is-equal-to-users",level:4},{value:"Function",id:"Function",level:3},{value:"Verify length, content, and classes from multiple <code>&lt;p&gt;</code>",id:"Verify-length-content-and-classes-from-multiple-p",level:4},{value:"Notes",id:"Notes",level:2},{value:"Chai",id:"Chai",level:3},{value:"Similarities to Chai",id:"Similarities-to-Chai",level:4},{value:"Subjects",id:"Subjects",level:3},{value:"How do I know which assertions change the subject and which keep it the same?",id:"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same",level:4},{value:"Using a callback function will not change what is yielded",id:"Using-a-callback-function-will-not-change-what-is-yielded",level:4},{value:"Differences",id:"Differences",level:3},{value:"Rules",id:"Rules",level:2},{value:'Requirements <Icon name="question-circle"/>',id:"Requirements",level:3},{value:'Timeouts <Icon name="question-circle"/>',id:"Timeouts",level:3},{value:"Command Log",id:"Command-Log",level:2},{value:"See also",id:"See-also",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",t)},d=p("Icon"),u=p("ThenShouldAndDifference"),m=p("DocsImage"),h={toc:c};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Create an assertion. Assertions are automatically retried as part of the\nprevious command until they pass or time out."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"An alias of ",(0,s.kt)("a",{parentName:"p",href:"/api/commands/should"},(0,s.kt)("inlineCode",{parentName:"a"},".should()")))),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Note:")," ",(0,s.kt)("inlineCode",{parentName:"p"},".and()")," assumes you are already familiar with core concepts such as\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/introduction-to-cypress#Assertions"},"assertions"))),(0,s.kt)("h2",{id:"Syntax"},"Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},".and(chainers)\n.and(chainers, value)\n.and(chainers, method, value)\n.and(callbackFn)\n")),(0,s.kt)("h3",{id:"Usage"},"Usage"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," Correct Usage")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('.err').should('be.empty').and('be.hidden') // Assert '.err' is empty & hidden\n\ncy.contains('Login').and('be.visible') // Assert el is visible\n\ncy.wrap({ foo: 'bar' })\n  .should('have.property', 'foo') // Assert 'foo' property exists\n  .and('eq', 'bar') // Assert 'foo' property is 'bar'\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Incorrect Usage")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.and('eq', '42') // Can not be chained off 'cy'\n\ncy.get('button').click().and('be.focused') // Should not be chained off\n// action commands that may update the DOM\n")),(0,s.kt)("h3",{id:"Arguments"},"Arguments"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"angle-right",mdxType:"Icon"})," chainers")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(String)"))),(0,s.kt)("p",null,"Any valid chainer that comes from ",(0,s.kt)("a",{parentName:"p",href:"/guides/references/assertions#Chai"},"Chai")," or\n",(0,s.kt)("a",{parentName:"p",href:"/guides/references/assertions#Chai-jQuery"},"Chai-jQuery")," or\n",(0,s.kt)("a",{parentName:"p",href:"/guides/references/assertions#Sinon-Chai"},"Sinon-Chai"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"angle-right",mdxType:"Icon"})," value")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(String)"))),(0,s.kt)("p",null,"Value to assert against chainer."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"angle-right",mdxType:"Icon"})," method")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(String)"))),(0,s.kt)("p",null,"A method to be called on the chainer."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"angle-right",mdxType:"Icon"})," callbackFn")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(Function)"))),(0,s.kt)("p",null,"Pass a function that can have any number of explicit assertions within it.\nWhatever was passed to the function is what is yielded."),(0,s.kt)("h3",{id:"Yields"},"Yields ",(0,s.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Subject-Management"},(0,s.kt)(d,{name:"question-circle",mdxType:"Icon"}))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"In most cases, ",(0,s.kt)("inlineCode",{parentName:"li"},".and()")," yields the same subject it was given."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},".and()")," is an assertion, and it is ",(0,s.kt)("em",{parentName:"li"},"safe")," to chain further commands that use\nthe subject.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('nav') // yields <nav>\n  .should('be.visible') // yields <nav>\n  .and('have.class', 'open') // yields <nav>\n")),(0,s.kt)("p",null,"However, some chainers change the subject. In the example below, ",(0,s.kt)("inlineCode",{parentName:"p"},".and()")," yields\nthe string ",(0,s.kt)("inlineCode",{parentName:"p"},"sans-serif")," because the chainer ",(0,s.kt)("inlineCode",{parentName:"p"},"have.css, 'font-family'")," changes\nthe subject."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('nav') // yields <nav>\n  .should('be.visible') // yields <nav>\n  .and('have.css', 'font-family') // yields 'sans-serif'\n  .and('match', /serif/) // yields 'sans-serif'\n")),(0,s.kt)("h2",{id:"Examples"},"Examples"),(0,s.kt)("h3",{id:"Chainers"},"Chainers"),(0,s.kt)("h4",{id:"Chain-assertions-on-the-same-subject"},"Chain assertions on the same subject"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('button').should('have.class', 'active').and('not.be.disabled')\n")),(0,s.kt)("h3",{id:"Value"},"Value"),(0,s.kt)("h4",{id:"Chain-assertions-when-yield-changes"},"Chain assertions when yield changes"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- App Code --\x3e\n<ul>\n  <li>\n    <a href="users/123/edit">Edit User</a>\n  </li>\n</ul>\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('a')\n  .should('contain', 'Edit User') // yields <a>\n  .and('have.attr', 'href') // yields string value of href\n  .and('match', /users/) // yields string value of href\n  .and('not.include', '#') // yields string value of href\n")),(0,s.kt)("h3",{id:"Method-and-Value"},"Method and Value"),(0,s.kt)("h4",{id:"Assert-the-href-is-equal-to-users"},"Assert the href is equal to '/users'"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('#header a')\n  .should('have.class', 'active')\n  .and('have.attr', 'href', '/users')\n")),(0,s.kt)("h3",{id:"Function"},"Function"),(0,s.kt)("h4",{id:"Verify-length-content-and-classes-from-multiple-p"},"Verify length, content, and classes from multiple ",(0,s.kt)("inlineCode",{parentName:"h4"},"<p>")),(0,s.kt)("p",null,"Passing a function to ",(0,s.kt)("inlineCode",{parentName:"p"},".and()")," enables you to assert on the yielded subject.\nThis gives you the opportunity to ",(0,s.kt)("em",{parentName:"p"},"massage")," what you'd like to assert."),(0,s.kt)("p",null,"Be sure ",(0,s.kt)("em",{parentName:"p"},"not")," to include any code that has side effects in your callback\nfunction."),(0,s.kt)("p",null,"The callback function will be retried over and over again until no assertions\nwithin it throw."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<div>\n  <p class="text-primary">Hello World</p>\n  <p class="text-danger">You have an error</p>\n  <p class="text-default">Try again later</p>\n</div>\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('p')\n  .should('not.be.empty')\n  .and(($p) => {\n    // should have found 3 elements\n    expect($p).to.have.length(3)\n\n    // make sure the first contains some text content\n    expect($p.first()).to.contain('Hello World')\n\n    // use jquery's map to grab all of their classes\n    // jquery's map returns a new jquery object\n    const classes = $p.map((i, el) => {\n      return Cypress.$(el).attr('class')\n    })\n\n    // call classes.get() to make this a plain array\n    expect(classes.get()).to.deep.eq([\n      'text-primary',\n      'text-danger',\n      'text-default',\n    ])\n  })\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Using a callback function ",(0,s.kt)("a",{parentName:"p",href:"#Subjects"},"will not change the subject"))),(0,s.kt)("h2",{id:"Notes"},"Notes"),(0,s.kt)("h3",{id:"Chai"},"Chai"),(0,s.kt)("h4",{id:"Similarities-to-Chai"},"Similarities to Chai"),(0,s.kt)("p",null,"If you've worked in ",(0,s.kt)("a",{parentName:"p",href:"http://chaijs.com/"},"Chai")," before, you will recognize that\n",(0,s.kt)("inlineCode",{parentName:"p"},".and()")," matches the same fluent assertion syntax."),(0,s.kt)("p",null,"Take this ",(0,s.kt)("em",{parentName:"p"},"explicit")," assertion for example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"expect({ foo: 'bar' }).to.have.property('foo').and.eq('bar')\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},".and()")," reproduces this same assertion behavior."),(0,s.kt)("h3",{id:"Subjects"},"Subjects"),(0,s.kt)("h4",{id:"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same"},"How do I know which assertions change the subject and which keep it the same?"),(0,s.kt)("p",null,"The chainers that come from ",(0,s.kt)("a",{parentName:"p",href:"/guides/references/bundled-libraries#Chai"},"Chai")," or\n",(0,s.kt)("a",{parentName:"p",href:"/guides/references/bundled-libraries#Chai-jQuery"},"Chai-jQuery")," will always\ndocument what they return."),(0,s.kt)("h4",{id:"Using-a-callback-function-will-not-change-what-is-yielded"},"Using a callback function will not change what is yielded"),(0,s.kt)("p",null,"Whenever you use a callback function, its return value is always ignored.\nCypress always forces the command to yield the value from the previous cy\ncommand's yield (which in the example below is ",(0,s.kt)("inlineCode",{parentName:"p"},"<button>"),")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('button')\n  .should('be.active')\n  .and(($button) => {\n    expect({ foo: 'bar' }).to.deep.eq({ foo: 'bar' })\n\n    return { foo: 'bar' } // return is ignored, .and() yields <button>\n  })\n  .then(($button) => {\n    // do anything we want with <button>\n  })\n")),(0,s.kt)("h3",{id:"Differences"},"Differences"),(0,s.kt)(u,{mdxType:"ThenShouldAndDifference"}),(0,s.kt)("h2",{id:"Rules"},"Rules"),(0,s.kt)("h3",{id:"Requirements"},"Requirements ",(0,s.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Chains-of-Commands"},(0,s.kt)(d,{name:"question-circle",mdxType:"Icon"}))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},".and()")," requires being chained off a previous command.")),(0,s.kt)("h3",{id:"Timeouts"},"Timeouts ",(0,s.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Timeouts"},(0,s.kt)(d,{name:"question-circle",mdxType:"Icon"}))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},".and()")," will continue to ",(0,s.kt)("a",{parentName:"li",href:"/guides/core-concepts/retry-ability"},"retry")," its\nspecified assertions until it times out.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('input', {timeout: 10000}).should('have.value', '10').and('have.class', 'error')\n                         \u21b2\n  // timeout here will be passed down to the '.and()'\n  // and it will retry for up to 10 secs\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('input', {timeout: 10000}).should('have.value', 'US').and(($input) => {\n                         \u21b2\n  // timeout here will be passed down to the '.and()'\n  // unless an assertion throws earlier,\n  // ALL of the assertions will retry for up to 10 secs\n  expect($input).to.not.be('disabled')\n  expect($input).to.not.have.class('error')\n})\n")),(0,s.kt)("h2",{id:"Command-Log"},"Command Log"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Chain assertions on the same subject")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('.list')\n  .find('input[type=\"checkbox\"]')\n  .should('be.checked')\n  .and('not.be.disabled')\n")),(0,s.kt)("p",null,"The commands above will display in the Command Log as:"),(0,s.kt)(m,{src:"/img/api/and/cypress-and-command-log.png",alt:"Command log for assertions",mdxType:"DocsImage"}),(0,s.kt)("p",null,"When clicking on ",(0,s.kt)("inlineCode",{parentName:"p"},"assert")," within the command log, the console outputs the\nfollowing:"),(0,s.kt)(m,{src:"/img/api/and/cypress-assertions-console-log.png",alt:"console.log for assertions",mdxType:"DocsImage"}),(0,s.kt)("h2",{id:"See-also"},"See also"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/commands/should"},(0,s.kt)("inlineCode",{parentName:"a"},".should()"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/guides/core-concepts/introduction-to-cypress#Assertions"},"Guide: Introduction to Cypress")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/guides/references/assertions"},"Reference: List of Assertions"))))}k.isMDXComponent=!0}}]);