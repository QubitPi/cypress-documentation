"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[1361],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4713:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={title:"After Screenshot API"},o=void 0,s={unversionedId:"api/plugins/after-screenshot-api",id:"api/plugins/after-screenshot-api",title:"After Screenshot API",description:"After a screenshot is taken, you can get details about the screenshot via the",source:"@site/docs/api/plugins/after-screenshot-api.mdx",sourceDirName:"api/plugins",slug:"/api/plugins/after-screenshot-api",permalink:"/cypress-documentation/api/plugins/after-screenshot-api",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/plugins/after-screenshot-api.mdx",tags:[],version:"current",lastUpdatedAt:1696480553,formattedLastUpdatedAt:"Oct 5, 2023",frontMatter:{title:"After Screenshot API"},sidebar:"api",previous:{title:"After Run API",permalink:"/cypress-documentation/api/plugins/after-run-api"},next:{title:"After Spec API",permalink:"/cypress-documentation/api/plugins/after-spec-api"}},l={},p=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:2},{value:"Modify screenshot details",id:"Modify-screenshot-details",level:3},{value:"Modify screenshot path",id:"Modify-screenshot-path",level:4},{value:"See also",id:"See-also",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},m=d("WarningSetupNodeEvents"),c=d("CypressConfigFileTabs"),u=d("Icon"),h={toc:p};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"After a screenshot is taken, you can get details about the screenshot via the\n",(0,r.kt)("inlineCode",{parentName:"p"},"after:screenshot")," plugin event. This event is called when a screenshot is taken\nwith ",(0,r.kt)("a",{parentName:"p",href:"/api/commands/screenshot"},(0,r.kt)("inlineCode",{parentName:"a"},"cy.screenshot()"))," or as a result of a test\nfailure. The event is called after the screenshot image is written to disk."),(0,r.kt)("p",null,"This allows you to record those details, manipulate the image as needed, and\nreturn the updated details about the image."),(0,r.kt)("h2",{id:"Syntax"},"Syntax"),(0,r.kt)(m,{mdxType:"WarningSetupNodeEvents"}),(0,r.kt)("cypress-config-plugin-example",null,(0,r.kt)(c,{mdxType:"CypressConfigFileTabs"},(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:screenshot', (details) => {\n        /* ... */\n      })\n    },\n  },\n})\n")),(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:screenshot', (details) => {\n        /* ... */\n      })\n    },\n  },\n})\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)(u,{name:"angle-right",mdxType:"Icon"})," details")," ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"(object)"))),(0,r.kt)("p",null,"An object describing the screenshot that was taken, with the following\nproperties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"size")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"The size of the image file (in bytes).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"takenAt")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The date and time the screenshot was taken. ISO 8601 format in UTC (example: ",(0,r.kt)("inlineCode",{parentName:"td"},"'2020-03-09T07:30:37.686Z'"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"duration")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"Duration taking and saving the screenshot (in milliseconds).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dimensions")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:null},"The width and height of the image in pixels (example: ",(0,r.kt)("inlineCode",{parentName:"td"},"{ width: 100, height: 50 }"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"multipart")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the screenshot was stitched together from multiple screenshot images.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pixelRatio")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"(Optional)")," The ratio of screenshot pixels to the browser's displayed pixels.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"(Optional)")," The ",(0,r.kt)("inlineCode",{parentName:"td"},"fileName")," argument passed in via ",(0,r.kt)("a",{parentName:"td",href:"/api/commands/screenshot#Arguments"},"cy.screenshot()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"specName")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the specfile where the screenshot was taken.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"path")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The absolute path to the image.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"scaled")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the application under test was scaled to fit into the browser viewport. May be ",(0,r.kt)("inlineCode",{parentName:"td"},"scale")," argument passed in via ",(0,r.kt)("a",{parentName:"td",href:"/api/commands/screenshot#Arguments"},"cy.screenshot()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"blackout")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"array")),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"blackout")," argument passed in via ",(0,r.kt)("a",{parentName:"td",href:"/api/commands/screenshot#Arguments"},"cy.screenshot()"))))),(0,r.kt)("h2",{id:"Usage"},"Usage"),(0,r.kt)("h3",{id:"Modify-screenshot-details"},"Modify screenshot details"),(0,r.kt)("p",null,"Using ",(0,r.kt)("a",{parentName:"p",href:"/guides/tooling/plugins-guide#Using-a-plugin"},"setupNodeEvents")," you can\ntap into the ",(0,r.kt)("inlineCode",{parentName:"p"},"after:screenshot")," event."),(0,r.kt)("p",null,"If you change the ",(0,r.kt)("inlineCode",{parentName:"p"},"path"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"dimensions")," of the image, you'll want to\nupdate the new values so that the details are correctly reported in the test\nresults. ",(0,r.kt)("em",{parentName:"p"},"Any other properties besides ",(0,r.kt)("inlineCode",{parentName:"em"},"path"),", ",(0,r.kt)("inlineCode",{parentName:"em"},"size"),", and ",(0,r.kt)("inlineCode",{parentName:"em"},"dimensions")," will be\nignored.")),(0,r.kt)("p",null,"You can return an object or a promise that resolves to an object from the\ncallback function. ",(0,r.kt)("em",{parentName:"p"},"Any type of returned value other than an object will be\nignored.")," The object can contain the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"path"),": The absolute path to the current location of the image"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"size"),": The size of the current image file (in bytes)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dimensions"),": The width and height of the current image in pixels (as an\nobject with the shape ",(0,r.kt)("inlineCode",{parentName:"li"},"{ width: 100, height: 50 }"),")")),(0,r.kt)("p",null,"The properties will be merged into the screenshot details and passed to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"onAfterScreenshot")," callback (if defined with\n",(0,r.kt)("a",{parentName:"p",href:"/api/cypress-api/screenshot-api"},"Cypress.Screenshot.defaults()")," and/or\n",(0,r.kt)("a",{parentName:"p",href:"/api/commands/screenshot"},"cy.screenshot()"),")."),(0,r.kt)("h4",{id:"Modify-screenshot-path"},"Modify screenshot path"),(0,r.kt)("p",null,"If you move the location of the screenshot image, you'll want to specify the new\n",(0,r.kt)("inlineCode",{parentName:"p"},"path")," of the image."),(0,r.kt)("cypress-config-plugin-example",null,(0,r.kt)(c,{mdxType:"CypressConfigFileTabs"},(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\nconst fs = require('fs')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:screenshot', (details) => {\n        console.log(details) // print all details to terminal\n\n        const newPath = '/new/path/to/screenshot.png'\n\n        return new Promise((resolve, reject) => {\n          // fs.rename moves the file to the existing directory 'new/path/to'\n          // and renames the image to 'screenshot.png'\n          fs.rename(details.path, newPath, (err) => {\n            if (err) return reject(err)\n\n            // because we renamed and moved the image, resolve with the new path\n            // so it is accurate in the test results\n            resolve({ path: newPath })\n          })\n        })\n      })\n    },\n  },\n})\n")),(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\nimport fs from 'fs'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:screenshot', (details) => {\n        console.log(details) // print all details to terminal\n\n        const newPath = '/new/path/to/screenshot.png'\n\n        return new Promise((resolve, reject) => {\n          // fs.rename moves the file to the existing directory 'new/path/to'\n          // and renames the image to 'screenshot.png'\n          fs.rename(details.path, newPath, (err) => {\n            if (err) return reject(err)\n\n            // because we renamed and moved the image, resolve with the new path\n            // so it is accurate in the test results\n            resolve({ path: newPath })\n          })\n        })\n      })\n    },\n  },\n})\n")))),(0,r.kt)("h2",{id:"See-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/commands/screenshot"},"cy.screenshot()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/guides/cloud/introduction"},"Cypress Cloud")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/guides/tooling/plugins-guide"},"Plugins Guide")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/guides/guides/screenshots-and-videos"},"Screenshots and Videos")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/guides/tooling/visual-testing"},"Visual Testing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/plugins/writing-a-plugin"},"Writing a Plugin"))))}g.isMDXComponent=!0}}]);