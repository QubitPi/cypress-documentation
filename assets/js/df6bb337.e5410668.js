"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[831],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),y=o,m=u["".concat(l,".").concat(y)]||u[y]||d[y]||s;return n?a.createElement(m,r(r({ref:t},p),{},{components:n})):a.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=y;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>y,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const s={title:"Key Differences",sidebar_position:20},r=void 0,i={unversionedId:"guides/overview/key-differences",id:"guides/overview/key-differences",title:"Key Differences",description:"What you'll learn",source:"@site/docs/guides/overview/key-differences.mdx",sourceDirName:"guides/overview",slug:"/guides/overview/key-differences",permalink:"/guides/overview/key-differences",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/overview/key-differences.mdx",tags:[],version:"current",lastUpdatedAt:1717543864,formattedLastUpdatedAt:"Jun 4, 2024",sidebarPosition:20,frontMatter:{title:"Key Differences",sidebar_position:20},sidebar:"guides",previous:{title:"Why Cypress?",permalink:"/guides/overview/why-cypress"},next:{title:"Installing Cypress",permalink:"/guides/getting-started/installing-cypress"}},l={},c=[{value:"Architecture",id:"Architecture",level:2},{value:"Native access",id:"Native-access",level:2},{value:"New kind of testing",id:"New-kind-of-testing",level:2},{value:"Shortcuts",id:"Shortcuts",level:2},{value:"Flake resistant",id:"Flake-resistant",level:2},{value:"Debuggability",id:"Debuggability",level:2},{value:"Trade offs",id:"Trade-offs",level:2}],p=(u="Icon",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var u;const d={toc:c};function y(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("h2",{parentName:"admonition",id:"What-youll-learn"},(0,o.kt)(p,{name:"graduation-cap",mdxType:"Icon"})," What you'll learn"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"What makes Cypress unique"),(0,o.kt)("li",{parentName:"ul"},"How its architecture differs from Selenium"),(0,o.kt)("li",{parentName:"ul"},"New testing approaches not possible before"))),(0,o.kt)("h2",{id:"Architecture"},"Architecture"),(0,o.kt)("p",null,"Most testing tools (like Selenium) operate by running outside of the browser and\nexecuting remote commands across the network. ",(0,o.kt)("em",{parentName:"p"},"Cypress is the exact opposite."),"\nCypress is executed in the same run loop as your application."),(0,o.kt)("p",null,"Behind Cypress is a Node server process. Cypress and the Node process constantly\ncommunicate, synchronize, and perform tasks on behalf of each other. Having\naccess to both parts (front and back) gives us the ability to respond to your\napplication's events in real time, while at the same time work outside of the\nbrowser for tasks that require a higher privilege."),(0,o.kt)("p",null,"Cypress also operates at the network layer by reading and altering web traffic\non the fly. This enables Cypress to not only modify everything coming in and out\nof the browser, but also to change code that may interfere with its ability to\nautomate the browser."),(0,o.kt)("p",null,"Cypress ultimately controls the entire automation process from top to bottom,\nwhich puts it in the unique position of being able to understand everything\nhappening in and outside of the browser. This means Cypress is capable of\ndelivering more consistent results than any other testing tool."),(0,o.kt)("p",null,"Because Cypress is\n",(0,o.kt)("a",{parentName:"p",href:"/guides/getting-started/installing-cypress"},"installed locally")," on your machine,\nit can additionally tap into the operating system for automation tasks. This\nmakes performing tasks such as\n",(0,o.kt)("a",{parentName:"p",href:"/guides/guides/screenshots-and-videos"},"taking screenshots, recording videos"),",\ngeneral ",(0,o.kt)("a",{parentName:"p",href:"/api/commands/exec"},"file system operations")," and\n",(0,o.kt)("a",{parentName:"p",href:"/api/commands/request"},"network operations")," possible."),(0,o.kt)("h2",{id:"Native-access"},"Native access"),(0,o.kt)("p",null,"Because Cypress operates within your application, that means it has native\naccess to every single object. Whether it is the ",(0,o.kt)("inlineCode",{parentName:"p"},"window"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"document"),", a DOM\nelement, your application instance, a function, a timer, a service worker, or\nanything else - you have access to it in your Cypress tests. There is no object\nserialization, there is no over-the-wire protocol - you have access to\neverything. Your test code can access all the same objects that your application\ncode can."),(0,o.kt)("h2",{id:"New-kind-of-testing"},"New kind of testing"),(0,o.kt)("p",null,"Having ultimate control over your application, the network traffic, and native\naccess to every host object unlocks a new way of testing that has never been\npossible before. Instead of being 'locked out' of your application and not being\nable to easily control it - Cypress instead lets you alter any aspect of how\nyour application works. Instead of slow and expensive tests, such as creating\nthe state required for a given situation, you can create these states\nartificially like you would in an unit test. For instance you can:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/api/commands/stub"},"Stub")," the browser or your application's functions and\nforce them to behave as needed in your test case."),(0,o.kt)("li",{parentName:"ul"},"Expose data stores (like in Redux) so you can programmatically alter the state\nof your application directly from your test code."),(0,o.kt)("li",{parentName:"ul"},"Test edge cases like 'empty views' by forcing your server to send empty\nresponses."),(0,o.kt)("li",{parentName:"ul"},"Test how your application responds to errors on your server by modifying\nresponse status codes to be 500."),(0,o.kt)("li",{parentName:"ul"},"Modify DOM elements directly - like forcing hidden elements to be shown."),(0,o.kt)("li",{parentName:"ul"},"Use 3rd party plugins programmatically. Instead of fussing with complex UI\nwidgets like multi selects, autocompletes, drop downs, tree views or\ncalendars, you can call methods directly from your test code to control them."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/guides/references/configuration#blockHosts"},"Prevent Google Analytics from loading ",(0,o.kt)("em",{parentName:"a"},"before")," any of your application code executes"),"\nwhen testing."),(0,o.kt)("li",{parentName:"ul"},"Get synchronous notifications whenever your application transitions to a new\npage or when it begins to unload."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/api/commands/clock"},"Control time by moving forward or backward")," so that\ntimers or polls automatically fire without having to wait for the required\ntime in your tests."),(0,o.kt)("li",{parentName:"ul"},"Add your own event listeners to respond to your application. You could update\nyour application code to behave differently when under tests in Cypress. You\ncan control WebSocket messages from within Cypress, conditionally load 3rd\nparty scripts, or call functions directly on your application.")),(0,o.kt)("h2",{id:"Shortcuts"},"Shortcuts"),(0,o.kt)("p",null,"Trying to test hard to reach areas of your application? Don't like the side\neffects an action creates? Tired of repeating the same repetitive and slow\nactions over and over again? You can skip them for most test cases."),(0,o.kt)("p",null,"Cypress allows for browser context to be cached with\n",(0,o.kt)("a",{parentName:"p",href:"/api/commands/session"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.session()")),". This means as a user, you only need to\nperform authentication once for the entirety of your test suite, and restore the\nsaved session between each test. That means you do not have to visit a login\npage, type in a username and password and wait for the page to load and/or\nredirect for every test you run. You can accomplish this once with\n",(0,o.kt)("a",{parentName:"p",href:"/api/commands/session"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.session()"))," and if needed,\n",(0,o.kt)("a",{parentName:"p",href:"/api/commands/origin"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.origin()")),"."),(0,o.kt)("p",null,"Cypress also gives you the ability to take shortcuts and programmatically log\nin. With commands like ",(0,o.kt)("a",{parentName:"p",href:"/api/commands/request"},(0,o.kt)("inlineCode",{parentName:"a"},"cy.request()")),", you can send\nHTTP requests directly, yet have those requests synchronized with the browser.\nCookies are automatically sent and applied back. Worried about CORS? Don't be,\nit is completely bypassed. The power to choose when to test like a user and when\nto skip slow and repetitive parts is yours."),(0,o.kt)("h2",{id:"Flake-resistant"},"Flake resistant"),(0,o.kt)("p",null,"Cypress knows and understands everything that happens in your application\nsynchronously. It is notified the moment the page loads and the moment the page\nunloads. It is impossible for Cypress to miss elements when it fires events.\nCypress even knows how fast an element is animating and will\n",(0,o.kt)("a",{parentName:"p",href:"/guides/core-concepts/interacting-with-elements#Animations"},"wait for it to stop animating"),".\nAdditionally, it\n",(0,o.kt)("a",{parentName:"p",href:"/guides/core-concepts/interacting-with-elements#Visibility"},"automatically waits for elements to become visible"),",\nto ",(0,o.kt)("a",{parentName:"p",href:"/guides/core-concepts/interacting-with-elements#Disability"},"become enabled"),",\nand to\n",(0,o.kt)("a",{parentName:"p",href:"/guides/core-concepts/interacting-with-elements#Covering"},"stop being covered"),".\nWhen pages begin to transition, Cypress will pause command execution until the\nfollowing page is fully loaded. You can even tell Cypress to\n",(0,o.kt)("a",{parentName:"p",href:"/api/commands/wait"},"wait")," on specific network requests to finish."),(0,o.kt)("p",null,"Cypress executes the vast majority of its commands inside the browser, so there\nis no network lag. Commands execute and drive your application as fast as it is\ncapable of rendering. To deal with modern JavaScript frameworks with complex\nUIs, you use assertions to tell Cypress what the desired state of your\napplication should be. Cypress will automatically wait for your application to\nreach this state before moving on. You are completely insulated from fussing\nwith manual waits or retries. Cypress automatically waits for elements to exist\nand will never yield you stale elements that have been detached from the DOM."),(0,o.kt)("h2",{id:"Debuggability"},"Debuggability"),(0,o.kt)("p",null,"Above all else Cypress has been built for usability."),(0,o.kt)("p",null,"There are hundreds of custom error messages describing the exact reason Cypress\nfailed your test."),(0,o.kt)("p",null,"There is a rich UI which visually shows you the command execution, assertions,\nnetwork requests, spies, stubs, page loads, or URL changes."),(0,o.kt)("p",null,"Cypress takes snapshots of your application and enables you to time travel back\nto the state it was in when commands ran."),(0,o.kt)("p",null,"You can use the Developer Tools while your tests run, you can see every console\nmessage, every network request. You can inspect elements, and you can even use\ndebugger statements in your spec code or your application code. There is no\nfidelity loss - you can use all the tools you're already comfortable with. This\nenables you to test and develop all at the same time."),(0,o.kt)("h2",{id:"Trade-offs"},"Trade offs"),(0,o.kt)("p",null,"While there are many new and powerful capabilities of Cypress - there are also\nimportant trade-offs that we've made in making this possible."),(0,o.kt)("p",null,"If you're interested in understanding more, we've written\n",(0,o.kt)("a",{parentName:"p",href:"/guides/references/trade-offs"},"an entire guide")," on this topic."))}y.isMDXComponent=!0}}]);