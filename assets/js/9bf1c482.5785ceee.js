"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[494],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,l=r(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,m=u["".concat(p,".").concat(d)]||u[d]||h[d]||s;return n?o.createElement(m,i(i({ref:t},l),{},{components:n})):o.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=d;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[u]="string"==typeof e?e:a,i[1]=r;for(var c=2;c<s;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4299:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const s={title:"React Quickstart",sidebar_position:20,sidebar_label:"React Quickstart"},i=void 0,r={unversionedId:"guides/component-testing/react/quickstart",id:"guides/component-testing/react/quickstart",title:"React Quickstart",description:"Welcome! This tutorial will walk you through creating a React app and using",source:"@site/docs/guides/component-testing/react/quickstart.mdx",sourceDirName:"guides/component-testing/react",slug:"/guides/component-testing/react/quickstart",permalink:"/cypress-documentation/guides/component-testing/react/quickstart",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/component-testing/react/quickstart.mdx",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"React Quickstart",sidebar_position:20,sidebar_label:"React Quickstart"},sidebar:"guides",previous:{title:"React Overview",permalink:"/cypress-documentation/guides/component-testing/react/overview"},next:{title:"React Examples",permalink:"/cypress-documentation/guides/component-testing/react/examples"}},p={},c=[{value:"Getting Started",id:"Getting-Started",level:2},{value:"Create a React App",id:"Create-a-React-App",level:3},{value:"Install Cypress",id:"Install-Cypress",level:3},{value:"Configuring Component Testing",id:"Configuring-Component-Testing",level:3},{value:"Creating a Component",id:"Creating-a-Component",level:3},{value:"Testing React Components",id:"Testing-React-Components",level:2},{value:"Your First Component Test",id:"Your-First-Component-Test",level:3},{value:"Running the Test",id:"Running-the-Test",level:3},{value:"Selectors &amp; Assertions",id:"Selectors--Assertions",level:3},{value:"Passing Props to Components",id:"Passing-Props-to-Components",level:3},{value:"Testing Interactions",id:"Testing-Interactions",level:3},{value:"Testing React Components with Events",id:"Testing-React-Components-with-Events",level:2},{value:"Using Spies",id:"Using-Spies",level:3},{value:"What&#39;s Next?",id:"Whats-Next",level:2}],l=(u="DocsImage",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var u;const h={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Welcome! This tutorial will walk you through creating a React app and using\nCypress Component Testing to test it. We assume you are already familiar with\nReact, but if this is your first time with Cypress, that's okay; we'll walk you\nthrough all you need to know."),(0,a.kt)("h2",{id:"Getting-Started"},"Getting Started"),(0,a.kt)("h3",{id:"Create-a-React-App"},"Create a React App"),(0,a.kt)("p",null,"To start off, we are going to create a new React app."),(0,a.kt)("p",null,"We will use ",(0,a.kt)("a",{parentName:"p",href:"https://vitejs.dev/"},"Vite")," to create the app as it's quick to get\nup and running. If you use any of the other\n",(0,a.kt)("a",{parentName:"p",href:"/guides/component-testing/react/overview#Framework-Support"},"supported frameworks"),"\nin your project, the setup is the same."),(0,a.kt)("p",null,"To create a React project with Vite, run the following from your command prompt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm create vite@latest my-awesome-app -- --template react\n")),(0,a.kt)("p",null,"Go into the directory and run ",(0,a.kt)("inlineCode",{parentName:"p"},"npm install"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd my-awesome-app\nnpm install\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You can also download a Git repo with a fully working copy of this tutorial\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/component-testing-quickstart-apps/tree/main/react"},"here"),".")),(0,a.kt)("h3",{id:"Install-Cypress"},"Install Cypress"),(0,a.kt)("p",null,"Next, let's add Cypress to the app:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install cypress -D\n")),(0,a.kt)("p",null,"Open Cypress:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx cypress open\n")),(0,a.kt)("p",null,"The Cypress Launchpad will guide you through configuring your project."),(0,a.kt)("h3",{id:"Configuring-Component-Testing"},"Configuring Component Testing"),(0,a.kt)("p",null,'Whenever you run Cypress for the first time, the app will prompt you to set up\neither E2E Testing or Component Testing. Click on "Component Testing" to start\nthe configuration wizard.'),(0,a.kt)(l,{src:"/img/guides/component-testing/select-test-type.jpg",caption:"Choose Component Testing",mdxType:"DocsImage"}),(0,a.kt)("p",null,'The Project Setup screen automatically detects your framework and bundler,\nwhich, in our case, is React and Vite. Click "Next Step" to continue.'),(0,a.kt)(l,{src:"/img/guides/component-testing/project-setup-react.jpg",caption:"React and Vite are automatically detected",mdxType:"DocsImage"}),(0,a.kt)("p",null,'The next screen checks that all the required dependencies are installed. All the\nitems should have green checkboxes on them, indicating everything is good, so\nclick "Continue".'),(0,a.kt)(l,{src:"/img/guides/component-testing/dependency-detection-react.jpg",caption:"All necessary dependencies are installed",mdxType:"DocsImage"}),(0,a.kt)("p",null,'Next, Cypress generates all the necessary configuration files and gives you a\nlist of all the changes it made to your project. Click "Continue".'),(0,a.kt)(l,{src:"/img/guides/component-testing/scaffolded-files.jpg",caption:"The Cypress launchpad will scaffold all of these files for you",mdxType:"DocsImage"}),(0,a.kt)("p",null,"After setting up component testing, you will be at the browser selection screen."),(0,a.kt)("p",null,'Pick the browser of your choice and click the "Start Component Testing" button\nto open the Cypress test runner.'),(0,a.kt)(l,{src:"/img/guides/component-testing/select-browser.jpg",caption:"Choose your browser",mdxType:"DocsImage"}),(0,a.kt)("p",null,"When the test runner appears, it won't find any specs because we haven't created\nany yet. However, we don't currently have a component, either. Let's change\nthat!"),(0,a.kt)(l,{src:"/img/guides/component-testing/create-your-first-spec-cfc.jpg",mdxType:"DocsImage"}),(0,a.kt)("h3",{id:"Creating-a-Component"},"Creating a Component"),(0,a.kt)("p",null,"At this point, your project is set up, and Cypress is ready to go, but we have\nno components to test yet."),(0,a.kt)("p",null,"We will create a ",(0,a.kt)("inlineCode",{parentName:"p"},"<Stepper/>"),' component with zero dependencies and one bit of\ninternal state: a "counter" that can be incremented and decremented by the user.'),(0,a.kt)("p",null,"Open the project with your favorite code editor and create a file at\n",(0,a.kt)("strong",{parentName:"p"},"src/components/Stepper.jsx"),", then paste the following code into it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=src/components/Stepper.jsx",title:"src/components/Stepper.jsx"},'import { useState } from \'react\'\n\nexport default function Stepper({ initial = 0, onChange = () => {} }) {\n  const [count, setCount] = useState(initial)\n\n  const handleIncrement = () => {\n    const newCount = count + 1\n    setCount(newCount)\n    onChange(newCount)\n  }\n\n  const handleDecrement = () => {\n    const newCount = count - 1\n    setCount(newCount)\n    onChange(newCount)\n  }\n\n  return (\n    <div>\n      <button data-cy="decrement" onClick={handleDecrement}>\n        -\n      </button>\n      <span data-cy="counter">{count}</span>\n      <button data-cy="increment" onClick={handleIncrement}>\n        +\n      </button>\n    </div>\n  )\n}\n')),(0,a.kt)("p",null,"Our component consists of two buttons, one used to decrement the counter and one\nto increment it. A ",(0,a.kt)("inlineCode",{parentName:"p"},"span")," tag sits in the middle of the buttons to show the\ncurrent value of the counter."),(0,a.kt)("h2",{id:"Testing-React-Components"},"Testing React Components"),(0,a.kt)("p",null,"Now that you have a component, let's write a test to verify the component can\nmount without any issues."),(0,a.kt)("h3",{id:"Your-First-Component-Test"},"Your First Component Test"),(0,a.kt)("p",null,'To get started, go back to the Cypress test app and, in the "Create your first\nspec" screen, click "Create from component".'),(0,a.kt)("p",null,"A modal will pop up listing all the component files that are found in your app\n(Cypress will exclude ",(0,a.kt)("strong",{parentName:"p"},"*",".config.{js,ts}")," and ",(0,a.kt)("strong",{parentName:"p"},"*",".{cy,spec}.{js,ts,jsx,tsx}"),"\nfiles from this list). Expand the row for ",(0,a.kt)("strong",{parentName:"p"},"Stepper.jsx")," and select the\n",(0,a.kt)("strong",{parentName:"p"},"Stepper")," component:"),(0,a.kt)(l,{src:"/img/guides/component-testing/create-from-component-react.jpg",mdxType:"DocsImage"}),(0,a.kt)("p",null,"A spec file was created at ",(0,a.kt)("strong",{parentName:"p"},"src/component/Stepper.cy.jsx"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=src/components/Stepper.cy.jsx",title:"src/components/Stepper.cy.jsx"},"import React from 'react'\nimport Stepper from './Stepper'\n\ndescribe('<Stepper />', () => {\n  it('renders', () => {\n    // see: https://on.cypress.io/mounting-react\n    cy.mount(<Stepper />)\n  })\n})\n")),(0,a.kt)("p",null,"Let's break down the spec. First, we import the ",(0,a.kt)("inlineCode",{parentName:"p"},"Stepper")," component. Then, we\norganize our tests using the functions ",(0,a.kt)("inlineCode",{parentName:"p"},"describe")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"it"),", which we allow us to\ngroup tests into sections by using method blocks. These are global functions\nprovided by Cypress, which means you don't have to import them directly to use\nthem. The top-level ",(0,a.kt)("inlineCode",{parentName:"p"},"describe")," block will be the container for all our tests in\na file, and each ",(0,a.kt)("inlineCode",{parentName:"p"},"it")," represents an individual test. The ",(0,a.kt)("inlineCode",{parentName:"p"},"describe")," function\ntakes two parameters, the first of which is the name of the test suite, and the\nsecond is a function that will execute the tests."),(0,a.kt)("p",null,"We defined a test using the ",(0,a.kt)("inlineCode",{parentName:"p"},"it")," function inside ",(0,a.kt)("inlineCode",{parentName:"p"},"describe"),". The first parameter\nto ",(0,a.kt)("inlineCode",{parentName:"p"},"it")," is a brief description of the spec, and the second parameter is a\nfunction that contains the test code. In our example above, we only have one\ntest, but soon we'll see how we can add multiple ",(0,a.kt)("inlineCode",{parentName:"p"},"it")," blocks inside of a\n",(0,a.kt)("inlineCode",{parentName:"p"},"describe")," for a series of tests."),(0,a.kt)("p",null,"The test executes one command: ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount(<Stepper />)"),". The\n",(0,a.kt)("a",{parentName:"p",href:"/api/commands/mount"},"cy.mount()")," method will mount our component into the test\napp so we can begin running tests against it."),(0,a.kt)("p",null,"Now it's time to see the test in action."),(0,a.kt)("h3",{id:"Running-the-Test"},"Running the Test"),(0,a.kt)("p",null,"Switch back to the browser you opened for testing, and you should now see the\n",(0,a.kt)("strong",{parentName:"p"},"Stepper.cy.jsx")," file in the spec list. Click it to see the spec execute."),(0,a.kt)(l,{src:"/img/guides/component-testing/first-test-run-react.jpg",mdxType:"DocsImage"}),(0,a.kt)("p",null,"Our first test verifies the component can mount in it's default state without\nany errors. If there is a runtime error during test execution, the test will\nfail, and you will see a stack trace pointing to the source of the problem."),(0,a.kt)("p",null,"A basic test like the one above is an excellent way to start testing a\ncomponent. Cypress renders your component in a real browser, and you can use all\nthe techniques/tools you would normally during development, such as interacting\nwith the component in the test runner, and using the browser dev tools to\ninspect and debug both your tests and the component's code."),(0,a.kt)("p",null,"Feel free to play around with the ",(0,a.kt)("inlineCode",{parentName:"p"},"Stepper")," component by interacting with the\nincrement and decrement buttons."),(0,a.kt)("p",null,"Now that the component is mounted, our next step is to test that the behavior of\nthe component is correct."),(0,a.kt)("h3",{id:"Selectors--Assertions"},"Selectors & Assertions"),(0,a.kt)("p",null,"By default, the Stepper's counter is initialized to \"0\". We can override that\nvalue by specifying an initial count. Let's write a couple of tests that will\nverify both these states."),(0,a.kt)("p",null,"To do so, we will use a selector to access the ",(0,a.kt)("inlineCode",{parentName:"p"},"span")," element that contains the\ncounter, and then assert that the text value of the element is what we expect it\nto be."),(0,a.kt)("p",null,"There are various ways to select items from the DOM using Cypress. We will use\n",(0,a.kt)("a",{parentName:"p",href:"/api/commands/get"},"cy.get()"),", which allows us to pass in a CSS-like selector."),(0,a.kt)("p",null,'After we "get" the element, we use the ',(0,a.kt)("a",{parentName:"p",href:"/api/commands/should"},"should")," assertion\nmethod to verify it has the correct text value."),(0,a.kt)("p",null,"Add the following test inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"describe")," block, right below the first test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=src/components/Stepper.cy.jsx",title:"src/components/Stepper.cy.jsx"},"it('stepper should default to 0', () => {\n  cy.mount(<Stepper />)\n  cy.get('span').should('have.text', '0')\n})\n")),(0,a.kt)("p",null,"When you go back to the test runner, you should see the test pass."),(0,a.kt)("p",null,'In the above test, we select the element by passing in "span" to ',(0,a.kt)("inlineCode",{parentName:"p"},"cy.get()"),",\nwhich will select all ",(0,a.kt)("inlineCode",{parentName:"p"},"span")," tags in our component. We only have one ",(0,a.kt)("inlineCode",{parentName:"p"},"span"),"\ncurrently, so this works. However, if our component evolves and we add another\n",(0,a.kt)("inlineCode",{parentName:"p"},"span"),", then this test could start to fail. We should use a selector that will\nbe less brittle to future changes."),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"Stepper")," component, the ",(0,a.kt)("inlineCode",{parentName:"p"},"span")," tag has a ",(0,a.kt)("inlineCode",{parentName:"p"},"data-cy")," attribute on it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<span data-cy="counter">{count}</span>\n')),(0,a.kt)("p",null,"We assign a unique id to the ",(0,a.kt)("inlineCode",{parentName:"p"},"data-cy")," attribute that we can use for testing\npurposes. Update the test to use a CSS attribute selector to ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.get()"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=src/components/Stepper.cy.jsx",title:"src/components/Stepper.cy.jsx"},"it('stepper should default to 0', () => {\n  cy.mount(<Stepper />)\n  cy.get('[data-cy=counter]').should('have.text', '0')\n})\n")),(0,a.kt)("p",null,"The test will still pass as expected, and our selector is now future-proof. For\nmore info on writing good selectors, see our guide\n",(0,a.kt)("a",{parentName:"p",href:"/guides/references/best-practices#Selecting-Elements"},"Selector Best Practices"),"."),(0,a.kt)("h3",{id:"Passing-Props-to-Components"},"Passing Props to Components"),(0,a.kt)("p",null,"We should also have a test to ensure the ",(0,a.kt)("inlineCode",{parentName:"p"},"initial"),' prop sets the count to\nsomething else besides its default value of "0". We can pass in props to the\n',(0,a.kt)("inlineCode",{parentName:"p"},"Stepper")," component via JSX in the ",(0,a.kt)("inlineCode",{parentName:"p"},"mount")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=src/components/Stepper.cy.jsx",title:"src/components/Stepper.cy.jsx"},"it('supports an \"initial\" prop to set the value', () => {\n  cy.mount(<Stepper initial={100} />)\n  cy.get('[data-cy=counter]').should('have.text', '100')\n})\n")),(0,a.kt)("h3",{id:"Testing-Interactions"},"Testing Interactions"),(0,a.kt)("p",null,'We mounted and selected the element in the above tests but didn\'t interact with\nit. We should also test that the value of the counter changes when a user clicks\nthe "increment" and "decrement" buttons.'),(0,a.kt)("p",null,"To do so, we will interact with the component by using the\n",(0,a.kt)("a",{parentName:"p",href:"/api/commands/click"},"click()")," command, which clicks a DOM element just like a\nreal user would."),(0,a.kt)("p",null,"Add the following tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=src/components/Stepper.cy.jsx",title:"src/components/Stepper.cy.jsx"},"it('when the increment button is pressed, the counter is incremented', () => {\n  cy.mount(<Stepper />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('[data-cy=counter]').should('have.text', '1')\n})\n\nit('when the decrement button is pressed, the counter is decremented', () => {\n  cy.mount(<Stepper />)\n  cy.get('[data-cy=decrement]').click()\n  cy.get('[data-cy=counter]').should('have.text', '-1')\n})\n")),(0,a.kt)("p",null,'When you view the results of each of the tests, you will see that the counter is\nnow "1" in the increment test, and "-1" in the decrement test. Not only did our\ntests pass, but we can visually see the results in a browser!'),(0,a.kt)("p",null,"View the\n",(0,a.kt)("a",{parentName:"p",href:"/guides/core-concepts/interacting-with-elements"},"Interacting with Elements"),"\nguide to learn more about other commands you can use to interact with the DOM."),(0,a.kt)("h2",{id:"Testing-React-Components-with-Events"},"Testing React Components with Events"),(0,a.kt)("p",null,"All the state of ",(0,a.kt)("inlineCode",{parentName:"p"},"<Stepper />")," (ie: the count) is handled internally in the\ncomponent. Consumers are alerted to changes to the state by passing in a\ncallback to the ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange")," prop."),(0,a.kt)("p",null,"As the developer of the Stepper component, you want to make sure when the\nend-user clicks the increment and decrement buttons, that the ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange")," prop is\ncalled with the proper values in the consuming component."),(0,a.kt)("h3",{id:"Using-Spies"},"Using Spies"),(0,a.kt)("p",null,"We can use ",(0,a.kt)("a",{parentName:"p",href:"/guides/guides/stubs-spies-and-clocks#Spies"},"Cypress Spies")," to\nvalidate the ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange")," method is being called. A spy is a special function that\nkeeps track of how many times it was called and any parameters that it was\ncalled with. We can pass a spy into the ",(0,a.kt)("inlineCode",{parentName:"p"},"onChange")," event, interact with the\ncomponent, and then query the spy to validate it was called with the parameters\nwe expect."),(0,a.kt)("p",null,"Let's set up the spies and bind them to the component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=src/components/Stepper.cy.jsx",title:"src/components/Stepper.cy.jsx"},"it('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(<Stepper onChange={onChangeSpy} />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n")),(0,a.kt)("p",null,"First, we create a new spy by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.spy()")," method. We pass in a string\nthat gives the spy an ",(0,a.kt)("a",{parentName:"p",href:"/guides/core-concepts/variables-and-aliases"},"alias"),",\nwhich assigns the spy a name by which we can reference it later. In\n",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()"),", we initialize the component and pass the spy into it. After that,\nwe click the increment button."),(0,a.kt)("p",null,"The next line is a bit different. We've seen how we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.get()"),"\nmethod to select elements, but we can also use it to grab any aliases we've set\nup previously. We use ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.get()"),' to grab the alias to the spy (by prepending an\n"@" to the alias name). We assert that the method was called with the expected\nvalue.'),(0,a.kt)("p",null,"With that, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Stepper")," component is well tested. Nice job!"),(0,a.kt)("h2",{id:"Whats-Next"},"What's Next?"),(0,a.kt)("p",null,"Congratulations, you covered the basics for component testing a React component\nwith Cypress!"),(0,a.kt)("p",null,"To learn more about testing with Cypress, check out the\n",(0,a.kt)("a",{parentName:"p",href:"/guides/core-concepts/introduction-to-cypress"},"Introduction to Cypress")," guide."))}d.isMDXComponent=!0}}]);