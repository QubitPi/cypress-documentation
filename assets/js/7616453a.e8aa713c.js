"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[889],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=s,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(y,o(o({ref:t},c),{},{components:n})):a.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4411:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),s=(n(7294),n(3905));const r={title:"Migrating from Protractor to Cypress",slug:"/guides/end-to-end-testing/protractor-to-cypress"},o=void 0,i={unversionedId:"guides/end-to-end-testing/migration/protractor-to-cypress",id:"guides/end-to-end-testing/migration/protractor-to-cypress",title:"Migrating from Protractor to Cypress",description:"What you'll learn",source:"@site/docs/guides/end-to-end-testing/migration/protractor-to-cypress.mdx",sourceDirName:"guides/end-to-end-testing/migration",slug:"/guides/end-to-end-testing/protractor-to-cypress",permalink:"/cypress-documentation/guides/end-to-end-testing/protractor-to-cypress",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/end-to-end-testing/migration/protractor-to-cypress.mdx",tags:[],version:"current",lastUpdatedAt:1702622965,formattedLastUpdatedAt:"Dec 15, 2023",frontMatter:{title:"Migrating from Protractor to Cypress",slug:"/guides/end-to-end-testing/protractor-to-cypress"},sidebar:"guides",previous:{title:"Working with GraphQL",permalink:"/cypress-documentation/guides/end-to-end-testing/working-with-graphql"},next:{title:"Overview",permalink:"/cypress-documentation/guides/component-testing/overview"}},l={},p=[{value:"Introduction",id:"Introduction",level:2},{value:"Benefits of Using Cypress",id:"Benefits-of-Using-Cypress",level:2},{value:"Interact with your tests in a browser",id:"Interact-with-your-tests-in-a-browser",level:3},{value:"Faster feedback loops",id:"Faster-feedback-loops",level:3},{value:"Time travel through tests",id:"Time-travel-through-tests",level:3},{value:"Gain Visibility in Headless Mode with Screenshots and Videos",id:"Gain-Visibility-in-Headless-Mode-with-Screenshots-and-Videos",level:3},{value:"Test Retries",id:"Test-Retries",level:3},{value:"Getting Started",id:"Getting-Started",level:2},{value:"Recommended Installation",id:"Recommended-Installation",level:3},{value:"Manual Installation",id:"Manual-Installation",level:3},{value:"Working with the DOM",id:"Working-with-the-DOM",level:2},{value:"How to Get DOM Elements",id:"How-to-Get-DOM-Elements",level:3},{value:"Getting a single element on the page",id:"Getting-a-single-element-on-the-page",level:4},{value:"Getting multiple elements on a page",id:"Getting-multiple-elements-on-a-page",level:4},{value:"Selector Playground",id:"Selector-Playground",level:4},{value:"How to Interact with DOM Elements",id:"How-to-Interact-with-DOM-Elements",level:3},{value:"Assertions",id:"Assertions",level:2},{value:"Length",id:"Length",level:3},{value:"Class",id:"Class",level:3},{value:"Value",id:"Value",level:3},{value:"Text Content",id:"Text-Content",level:3},{value:"Visibility",id:"Visibility",level:3},{value:"Existence",id:"Existence",level:3},{value:"State",id:"State",level:3},{value:"CSS",id:"CSS",level:3},{value:"Disabled property",id:"Disabled-property",level:3},{value:"Negative assertions",id:"Negative-assertions",level:2},{value:"Network Handling",id:"Network-Handling",level:2},{value:"Network Spying",id:"Network-Spying",level:3},{value:"Network Stubbing",id:"Network-Stubbing",level:3},{value:"Navigating Websites",id:"Navigating-Websites",level:2},{value:"Automatic Retrying and Waiting",id:"Automatic-Retrying-and-Waiting",level:2},{value:"Cypress vs WebDriver Control Flow",id:"Cypress-vs-WebDriver-Control-Flow",level:2},{value:"Using Page Objects",id:"Using-Page-Objects",level:2},{value:"Protractor without Page Objects",id:"Protractor-without-Page-Objects",level:3},{value:"Protractor with Page Objects",id:"Protractor-with-Page-Objects",level:3},{value:"Cypress without Page Objects",id:"Cypress-without-Page-Objects",level:3},{value:"Cypress with Page Objects",id:"Cypress-with-Page-Objects",level:3},{value:"Continuous Integration",id:"Continuous-Integration",level:2},{value:"Parallelization",id:"Parallelization",level:2},{value:"Angular Schematic Configuration",id:"Angular-Schematic-Configuration",level:2},{value:"Running the builder with a specific browser",id:"Running-the-builder-with-a-specific-browser",level:3},{value:"Recording test results to Cypress Cloud",id:"Recording-test-results-to-Cypress-Cloud",level:3},{value:"Specifying a custom Cypress configuration file",id:"Specifying-a-custom-Cypress-configuration-file",level:3},{value:"Running Cypress in parallel mode within CI",id:"Running-Cypress-in-parallel-mode-within-CI",level:3},{value:"Code Coverage",id:"Code-Coverage",level:3},{value:"Questions or Issues?",id:"Questions-or-Issues",level:3},{value:"Next Steps",id:"Next-Steps",level:2},{value:"FAQs",id:"FAQs",level:2},{value:"Do I have to replace all of my tests with Cypress immediately?",id:"Do-I-have-to-replace-all-of-my-tests-with-Cypress-immediately",level:3},{value:"Can Protractor and Cypress coexist in the same app?",id:"Can-Protractor-and-Cypress-coexist-in-the-same-app",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",t)},u=c("Icon"),d=c("Badge"),m=c("DocsVideo"),y=c("Tabs"),g=c("TabItem"),h=c("TestReplayInfo"),k={toc:p};function f(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("h2",{parentName:"admonition",id:"What-youll-learn"},(0,s.kt)(u,{name:"graduation-cap",mdxType:"Icon"})," What you'll learn"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"Benefits of using Cypress in Angular apps"),(0,s.kt)("li",{parentName:"ul"},"How Cypress can create reliable e2e tests for Angular apps"),(0,s.kt)("li",{parentName:"ul"},"How to migrate Protractor tests to Cypress"))),(0,s.kt)("h2",{id:"Introduction"},"Introduction"),(0,s.kt)("p",null,"Protractor has been a popular end-to-end testing tool for Angular and AngularJS\napps. However, Protractor is\n",(0,s.kt)("a",{parentName:"p",href:"https://blog.angular.io/angular-v12-is-now-available-32ed51fbfd49"},"no longer included"),"\nin new Angular projects as of Angular 12. We've got you covered here with this\nmigration guide to help you and your team transition from Protractor to Cypress."),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"If you see any inaccuracies with this guide or feel like something has been\nmisrepresented, please\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/discussions/new"},"start a discussion here"),".")),(0,s.kt)("p",null,"To start, let's look at a quick code sample to see how approachable Cypress is\ncoming from Protractor. In this scenario, we have a test to validate that a user\ncan sign up for a new account."),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"describe('Authorization tests', () => {\n  it('allows the user to signup for a new account', () => {\n    browser.get('/signup')\n    element(by.css('#email-field')).sendKeys('user@email.com')\n    element(by.css('#confirm-email-field')).sendKeys('user@email.com')\n    element(by.css('#password-field')).sendKeys('testPassword1234')\n    element(by.cssContainingText('button', 'Create new account')).click()\n\n    expect(browser.getCurrentUrl()).toEqual('/signup/success')\n  })\n})\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"describe('Authorization Tests', () => {\n  it('allows the user to signup for a new account', () => {\n    cy.visit('/signup')\n    cy.get('#email-field').type('user@email.com')\n    cy.get('#confirm-email-field').type('user@email.com')\n    cy.get('#password-field').type('testPassword1234')\n    cy.get('button').contains('Create new account').click()\n\n    cy.url().should('include', '/signup/success')\n  })\n})\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"To see how this conversion would work with some of your own test code, you can\npaste it into the interactive\n",(0,s.kt)("a",{parentName:"p",href:"https://migrator.cypress.io/"},"Cypress Migrator tool"),", which will generate the\nequivalent Cypress code.")),(0,s.kt)("h2",{id:"Benefits-of-Using-Cypress"},"Benefits of Using Cypress"),(0,s.kt)("p",null,"As many developers can attest to, end-to-end testing is one of those things that\nthey know they ",(0,s.kt)("em",{parentName:"p"},"should")," do, but often do not. Or if they do run tests, the tests\nare often flaky and often very expensive due to how long it can take to run. And\nwhile there are often ideals of complete code coverage, the realities of\nbusiness and deadlines often take precedence and the tests are left unwritten,\nor worse, ignored when errors are being reported because they are not reliable.\nNot only does Cypress make sure that your tests will be reliable, but it\nprovides developers with tools that make e2e testing an asset to development\nrather than a hindrance."),(0,s.kt)("h3",{id:"Interact-with-your-tests-in-a-browser"},"Interact with your tests in a browser"),(0,s.kt)("p",null,"When Protractor runs tests, the browser automation launches a browser instance\nand often runs through tests too fast for the human eye. Without additional\nconfiguration, this often leads to a reliance on lengthy terminal messages that\ncan be expensive from a context-switching perspective."),(0,s.kt)("p",null,"With ",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/cypress-app"},"Cypress"),", your tests run in an\ninteractive browser environment in real time. Cypress's\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/cypress-app#Command-Log"},"Command Log")," displays the tests\nfrom your test suite and their assertions. When you\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/core-concepts/cypress-app#Clicking-on-Commands"},"click on a command or assertion"),"\nin the command log, a DOM snapshot displays so you can see what the application\nunder test looked like at the time of the test's execution. This allows you to\nsee the ",(0,s.kt)("strong",{parentName:"p"},"real rendered UI")," and the behavior of the app under ",(0,s.kt)("strong",{parentName:"p"},"real user\ninteractions.")," Since the app is loaded within a real browser, you can also\nmanually explore its behavior while it is under the state of a desired test\nscenario."),(0,s.kt)("p",null,"Cypress also helps you to write your tests by making it as easy as possible to\nfind the right CSS selectors for the DOM elements in your application with its\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/core-concepts/cypress-app#Selector-Playground"},"Selector Playground"),".\nThe Selector Playground helps you cut down on time spent finding the right\nselectors so you can focus on what's important: writing tests that verify your\napp's logic."),(0,s.kt)(m,{src:"/img/guides/migrating-to-cypress/DevTools.mp4",title:"interacting with tests in a browser",mdxType:"DocsVideo"}),(0,s.kt)("h3",{id:"Faster-feedback-loops"},"Faster feedback loops"),(0,s.kt)("p",null,"When it comes to your end-to-end tests, being able to see your tests as they run\nis critical to allowing you to confidently iterate faster. With Cypress, your\ntests are automatically re-run upon file save as you are iterating on them."),(0,s.kt)("p",null,"Having your code editor and application under test within a browser side-by-side\n(shown below) while re-running tests on save is a highly productive workflow. It\nprovides an instant feedback loop that allows you to iterate faster with\nconfidence."),(0,s.kt)(m,{src:"/img/guides/migrating-to-cypress/codeframe-ex.webm",title:"auto-reloading",mdxType:"DocsVideo"}),(0,s.kt)("h3",{id:"Time-travel-through-tests"},"Time travel through tests"),(0,s.kt)("p",null,"Cypress gives you time travel capabilities to see exactly how your app was\nbehaving at any point during test execution. Cypress takes DOM snapshots of your\napplication under test as the commands and assertions in your tests are\nexecuted. This enables you to view the ",(0,s.kt)("strong",{parentName:"p"},"real UI")," of your application at any\npoint during your tests' execution. By clicking from one command to another in\nthe ",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/cypress-app#Command-Log"},"command log"),", you can see\nwhich elements Cypress acted upon and how your application responded to the\nsimulated ",(0,s.kt)("strong",{parentName:"p"},"real user behavior"),"."),(0,s.kt)(m,{src:"/img/guides/migrating-to-cypress/interactivity.mp4",title:"Time travel debugging",mdxType:"DocsVideo"}),(0,s.kt)("h3",{id:"Gain-Visibility-in-Headless-Mode-with-Screenshots-and-Videos"},"Gain Visibility in Headless Mode with Screenshots and Videos"),(0,s.kt)("p",null,"Running browser tests in headless mode (locally or in continuous integration\npipeline) can be a bit of a black-box without much visibility. When tests fail,\nerror messages by themselves can often fall short in painting the picture of\n",(0,s.kt)("strong",{parentName:"p"},"why")," something failed, especially if assertions were not explicit enough or\ntoo indirect. To understand the reason behind test failures it also helps to see\nthe state of the app UI at the point of failure or see the events that led up to\nthe failure."),(0,s.kt)("p",null,"Cypress assists with debugging in headless mode, in numerous ways:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Replay the test as it executed during the recorded run with full debug capability using ",(0,s.kt)("a",{parentName:"li",href:"/guides/cloud/test-replay"},"Test Replay")," in Cypress Cloud."),(0,s.kt)("li",{parentName:"ul"},"By automatically taking a\nscreenshot of the app UI and command log at the exact point of test failure."),(0,s.kt)("li",{parentName:"ul"},"To see everything that happened prior to test failure, enable the ",(0,s.kt)("a",{parentName:"li",href:"/guides/references/configuration#Videos"},(0,s.kt)("inlineCode",{parentName:"a"},"video")),".\nconfiguration option to record (as an MP4 file) the full test spec run.")),(0,s.kt)("h3",{id:"Test-Retries"},"Test Retries"),(0,s.kt)("p",null,'End-to-end tests can be complicated because modern web applications are also\ncomplex. You may find that some features of your web application are challenging\nto test or the tests sporadically fail. We call these tests "flaky." Cypress\nallows you to ',(0,s.kt)("a",{parentName:"p",href:"/guides/guides/test-retries"},"retry failed tests"),". Sometimes tests\nwill fail in a CI environment when they otherwise would pass on a developer's\nmachine. Enabling test retries in the Cypress configuration can help you to get\nunblocked when unpredictable, flaky tests are occasionally failing."),(0,s.kt)("p",null,"Cypress Cloud goes a step further and helps you and your team to\n",(0,s.kt)("a",{parentName:"p",href:"/guides/cloud/flaky-test-management"},"detect flaky tests")," that run in your CI/CD\npipeline."),(0,s.kt)("h2",{id:"Getting-Started"},"Getting Started"),(0,s.kt)("h3",{id:"Recommended-Installation"},"Recommended Installation"),(0,s.kt)("p",null,"We recommend using our\n",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@cypress/schematic"},"official Cypress Angular schematic"),"\nto add Cypress to your Angular project:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"ng add @cypress/schematic\n")),(0,s.kt)("p",null,"This will install Cypress, add scripts for running Cypress in ",(0,s.kt)("inlineCode",{parentName:"p"},"run")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"open"),"\nmode, scaffold base Cypress files and directories, and (optional) prompt you to\nremove Protractor and reconfigure the default ",(0,s.kt)("inlineCode",{parentName:"p"},"ng e2e")," command to use Cypress."),(0,s.kt)("p",null,"With our schematic installed and Protractor removed, you can run Cypress in\n",(0,s.kt)("inlineCode",{parentName:"p"},"open")," mode with the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"ng e2e\n")),(0,s.kt)("p",null,"You can also use the following command to start Cypress in ",(0,s.kt)("inlineCode",{parentName:"p"},"open")," mode:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"ng run {your-project-name}:cypress-open\n")),(0,s.kt)("p",null,"Both of these commands will launch Cypress in an Electron browser."),(0,s.kt)("p",null,"You can also launch Cypress via ",(0,s.kt)("inlineCode",{parentName:"p"},"run")," mode, which runs headlessly:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"ng run {your-project-name}:cypress-run\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Check out the\n",(0,s.kt)("a",{parentName:"p",href:"#Angular-Schematic-Configuration"},"Cypress Angular Schematic Configuration section"),"\ndocumentation for more details like how to\n",(0,s.kt)("a",{parentName:"p",href:"#Running-the-builder-with-a-specific-browser"},"configure your tests to run in a specific browser"),"\nor ",(0,s.kt)("a",{parentName:"p",href:"#Recording-test-results-to-Cypress-Cloud"},"record test results")," to\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/cloud/introduction"},"Cypress Cloud"),".")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"The\n",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@cypress/schematic"},"Cypress Angular Schematic"),"\npackage was made possible by the original work of the\n",(0,s.kt)("a",{parentName:"p",href:"https://briebug.com/"},"Briebug")," team and the contributors of\n",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@briebug/cypress-schematic"},"@briebug/cypress-schematic"),"."),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"@briebug/cypress-schematic")," served as the starting point for improvements and\nnew functionality the Cypress team will continue to develop along with the\ncommunity.")),(0,s.kt)("h3",{id:"Manual-Installation"},"Manual Installation"),(0,s.kt)("p",null,"While we recommend using our official Angular schematic, you can still install\nCypress manually."),(0,s.kt)(y,{mdxType:"Tabs"},(0,s.kt)(g,{value:"npm",active:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev cypress\n"))),(0,s.kt)(g,{value:"yarn",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev cypress\n")))),(0,s.kt)("p",null,"Then, since Cypress can run in parallel with your application, let's install\n",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/concurrently"},"concurrently")," to simplify our npm\nscript. This is optional; however, you will need another way to serve your\nAngular app for Cypress to run tests against your application."),(0,s.kt)(y,{mdxType:"Tabs"},(0,s.kt)(g,{value:"npm",active:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev concurrently\n"))),(0,s.kt)(g,{value:"yarn",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev concurrently\n")))),(0,s.kt)("p",null,"Then we will update our ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," with the following scripts:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'// Example package.json\n{\n  "scripts": {\n    "cy:open": "concurrently \\"ng serve\\" \\"cypress open\\"",\n    "cy:run": "concurrently \\"ng serve\\" \\"cypress run\\""\n  },\n  "dependencies": { ... },\n  "devDependencies": { ... }\n}\n')),(0,s.kt)("p",null,"Now, when we run:"),(0,s.kt)(y,{mdxType:"Tabs"},(0,s.kt)(g,{value:"npm",active:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm run cy:open\n"))),(0,s.kt)(g,{value:"yarn",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn run cy:open\n")))),(0,s.kt)("p",null,"It will start up Cypress and our Angular app at the same time."),(0,s.kt)("p",null,"Again, we highly recommend using our\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/tree/develop/npm/cypress-schematic"},"Angular Schematic"),"\nto install Cypress, and we plan on adding new capabilities to it over time."),(0,s.kt)("h2",{id:"Working-with-the-DOM"},"Working with the DOM"),(0,s.kt)("h3",{id:"How-to-Get-DOM-Elements"},"How to Get DOM Elements"),(0,s.kt)("h4",{id:"Getting-a-single-element-on-the-page"},"Getting a single element on the page"),(0,s.kt)("p",null,"When it comes to e2e tests, one of the most common things you'll need to do is\nget one or more HTML elements on a page. Rather than split element fetching into\nmultiple methods that you need to memorize, everything can be accomplished with\n",(0,s.kt)("a",{parentName:"p",href:"/api/commands/get"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.get"))," while using CSS selectors or the preferred\n",(0,s.kt)("a",{parentName:"p",href:"https://on.cypress.io/selecting-elements"},(0,s.kt)("strong",{parentName:"a"},"data attribute")),"."),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Get an element\nelement(by.tagName('h1'))\n\n/// Get an element using a CSS selector.\nelement(by.css('.my-class'))\n\n// Get an element with the given id.\nelement(by.id('my-id'))\n\n// Get an element using an input name selector.\nelement(by.name('field-name'))\n\n//Get an element by the text it contains within a certain CSS selector\nelement(by.cssContainingText('.my-class', 'text'))\n\n//Get the first element containing a specific text (only for link elements)\nelement(by.linkText('text'))\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Get an element\ncy.get('h1')\n\n// Get an element using a CSS selector.\ncy.get('.my-class')\n\n// Get an element with the given id.\ncy.get('#my-id')\n\n// Get an element using an input name selector.\ncy.get('input[name=\"field-name\"]')\n\n//Get an element by the text it contains within a certain CSS selector\ncy.get('.my-class').contains('text')\n\n//Get the first element containing a specific text (available for any element)\ncy.contains('text')\n")),(0,s.kt)("p",null,"You can also get elements by their text value. This can be accomplished using\n",(0,s.kt)("a",{parentName:"p",href:"/api/commands/contains"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.contains"))," while using CSS selectors to account for\nall use cases."),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Get an element by the text it contains within a certain CSS selector\nelement(by.cssContainingText('.my-class', 'text'))\n\n// Get the first element containing a specific text (only for link elements)\nelement(by.linkText('text'))\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Get an element by the text it contains within a certain CSS selector\ncy.get('.my-class').contains('text')\n\n// Get the first element containing a specific text (available for any element)\ncy.contains('text')\n")),(0,s.kt)("h4",{id:"Getting-multiple-elements-on-a-page"},"Getting multiple elements on a page"),(0,s.kt)("p",null,"When you want to get access to more than one element on the page, you would need\nto chain the ",(0,s.kt)("inlineCode",{parentName:"p"},".all()")," method. However, in Cypress, no syntax change is\nnecessary!"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Get all list-item elements on the page\nelement.all(by.tagName('li'))\n\n/// Get all elements by using a CSS selector.\nelement.all(by.css('.list-item'))\n\n// Find an element using an input name selector.\nelement.all(by.name('field-name'))\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Get all list-item elements on the page\ncy.get('li')\n\n/// Get all elements by using a CSS selector.\ncy.get('.list-item')\n\n// Find an element using an input name selector.\ncy.get('input[name=\"field-name\"]')\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Another plugin that we recommend for selecting multiple elements is the\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/testing-library/cypress-testing-library"},"Cypress Testing Library"),".\nThis extends Cypress by adding ",(0,s.kt)("inlineCode",{parentName:"p"},"findBy")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"findAllBy")," commands.")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"You can learn more about\n",(0,s.kt)("a",{parentName:"p",href:"/api/commands/get#Syntax"},"how to get DOM elements in our official documentation"),".")),(0,s.kt)("h4",{id:"Selector-Playground"},"Selector Playground"),(0,s.kt)("p",null,"For those who are big fans of\n",(0,s.kt)("a",{parentName:"p",href:"https://www.protractortest.org/#/debugging#enabled-control-flow"},"Protractor's Element Explorer functionality"),",\nCypress also provides you with a\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/cypress-app#Selector-Playground"},"Selector Playground"),"\nthat allows you to:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Determine a unique selector for an element"),(0,s.kt)("li",{parentName:"ul"},"See what elements match a given selector"),(0,s.kt)("li",{parentName:"ul"},"See what element matches a string of text")),(0,s.kt)("p",null,"The Selector Playground can be useful when you need to find a specific selector\nto use in your Cypress tests."),(0,s.kt)(m,{src:"/img/snippets/selector-playground.mp4",title:"Selector Playground",mdxType:"DocsVideo"}),(0,s.kt)("h3",{id:"How-to-Interact-with-DOM-Elements"},"How to Interact with DOM Elements"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Click on the element\nelement(by.css('button')).click()\n\n// Send keys to the element (usually an input)\nelement(by.css('input')).sendKeys('my text')\n\n// Clear the text in an element (usually an input).\nelement(by.css('input')).clear()\n\n// Check the first checkbox on a page\nelement.all(by.css('[type=\"checkbox\"]')).first().click()\n\n// Check a radio button with the value \"radio1\"\nelement(by.css('[type=\"radio\"][value=\"radio1\"]')).click()\n\n// Uncheck the first checkbox that is checked\nelement.all(by.css('[type=\"checkbox\"][checked=\"true\"]')).first().click()\n\n// Select an option with the text value \"my value\" from a select list\nelement(by.cssContainingText('option', 'my value')).click()\n\n// Scroll an element into view\nbrowser\n  .actions()\n  .mouseMove(element(by.id('my-id')))\n  .perform()\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Click on the element\ncy.get('button').click()\n\n// Send keys to the element (usually an input)\ncy.get('input').type('my text')\n\n// Clear the text in an element (usually an input)\ncy.get('input').clear()\n\n// Check the first checkbox on a page\ncy.get('[type=\"checkbox\"]').first().check()\n\n// Check a radio button with the value \"radio1\"\ncy.get('[type=\"radio\"]').check('radio1')\n\n// Uncheck the first checkbox that is not disabled\ncy.get('[type=\"checkbox\"]').not('[disabled]').first().uncheck()\n\n// Select an option with the text value \"my value\" from a select list\ncy.get('select[name=\"optionsList\"]').select('my value')\n\n// Scroll an element into view\ncy.get('#my-id').scrollIntoView()\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"You can learn more about\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/interacting-with-elements"},"interacting with DOM elements in our official documentation"),".")),(0,s.kt)("h2",{id:"Assertions"},"Assertions"),(0,s.kt)("p",null,"Similar to Protractor, Cypress enables use of human readable assertions."),(0,s.kt)("p",null,"Here are some common DOM element assertions with Cypress and equivalent\nassertions with Protractor."),(0,s.kt)("h3",{id:"Length"},"Length"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const list = element.all(by.css('li.selected'))\nexpect(list.count()).toBe(3)\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// retry until we find 3 matching <li.selected>\ncy.get('li.selected').should('have.length', 3)\n")),(0,s.kt)("h3",{id:"Class"},"Class"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"expect(\n  element(by.tagName('form')).element(by.tagName('input')).getAttribute('class')\n).not.toContain('disabled')\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// retry until this input does not have class disabled\ncy.get('form').find('input').should('not.have.class', 'disabled')\n")),(0,s.kt)("h3",{id:"Value"},"Value"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"expect(element(by.tagName('textarea'))).getAttribute('value')).toBe('foo bar baz')\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// retry until this textarea has the correct value\ncy.get('textarea').should('have.value', 'foo bar baz')\n")),(0,s.kt)("h3",{id:"Text-Content"},"Text Content"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// assert the element's text content is exactly the given text\nexpect(element(by.id('user-name')).getText()).toBe('Joe Smith')\n// assert the element's text includes the given substring\nexpect(element(by.id('address')).getText()).toContain('Atlanta')\n// assert the span does not contain 'click me'\nconst child = element(by.tagName('a')).getWebElement()\nconst parent = child.getDriver().findElement(by.css('span.help'))\nexpect(parent.getText()).not.toContain('click me')\n// assert that the greeting starts with \"Hello\"\nelement(by.id('greeting').getText()).toMatch(/^Hello/)\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// assert the element's text content is exactly the given text\ncy.get('#user-name').should('have.text', 'Joe Smith')\n// assert the element's text includes the given substring\ncy.get('#address').should('include.text', 'Atlanta')\n// retry until this span does not contain 'click me'\ncy.get('a').parent('span.help').should('not.contain', 'click me')\n// the element's text should start with \"Hello\"\ncy.get('#greeting')\n  .invoke('text')\n  .should('match', /^Hello/)\n// tip: use cy.contains to find element with its text\n// matching the given regular expression\ncy.contains('#a-greeting', /^Hello/)\n")),(0,s.kt)("h3",{id:"Visibility"},"Visibility"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// assert button is visible\nexpect(element(by.tagName('button')).isDisplayed()).toBe(true)\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// retry until this button is visible\ncy.get('button').should('be.visible')\n")),(0,s.kt)("h3",{id:"Existence"},"Existence"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// assert the spinner no longer exists\nexpect(element(by.id('loading')).isPresent()).toBe(false)\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// retry until loading spinner no longer exists\ncy.get('#loading').should('not.exist')\n")),(0,s.kt)("h3",{id:"State"},"State"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"expect(element('input[type=\"radio\"]').isSelected()).toBeTruthy()\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// retry until our radio is checked\ncy.get(':radio').should('be.checked')\n")),(0,s.kt)("h3",{id:"CSS"},"CSS"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// assert .completed has css style \"line-through\" for \"text-decoration\" property\nexpect(element(by.css('.completed')).getCssValue('text-decoration')).toBe(\n  'line-through'\n)\n\n// assert the accordion does not have a \"display: none\"\nexpect(element(by.id('accordion')).getCssValue('display')).not.toBe('none')\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// retry until .completed has matching css\ncy.get('.completed').should('have.css', 'text-decoration', 'line-through')\n\n// retry while .accordion css has the \"display: none\" property\ncy.get('#accordion').should('not.have.css', 'display', 'none')\n")),(0,s.kt)("h3",{id:"Disabled-property"},"Disabled property"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<input type="text" id="example-input" disabled />\n')),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// assert the input is disabled\nexpect(element(by.id('example-input')).isEnabled()).toBe(false)\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('#example-input')\n  .should('be.disabled')\n  // let's enable this element from the test\n  .invoke('prop', 'disabled', false)\n\ncy.get('#example-input')\n  // we can use \"enabled\" assertion\n  .should('be.enabled')\n  // or negate the \"disabled\" assertion\n  .and('not.be.disabled')\n")),(0,s.kt)("p",null,"Cypress has one additional feature that can make a critical difference in the\nreliability of your tests' assertions:\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/core-concepts/retry-ability"},"retry-ability"),".\nWhen your test fails an assertion or command, Cypress will mimic a real user\nwith build-in wait times and multiple attempts at asserting your tests in order\nto minimize the amount of false negatives / positives."),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"describe('verify elements on a page', () => {\n  it('verifies that a link is visible', () => {\n    expect($('a.submit-link').isDisplayed()).toBe(true)\n  })\n})\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"describe('verify elements on a page', () => {\n  it('verifies that a link is visible', () => {\n    cy.get('a.submit-link').should('be.visible')\n  })\n})\n")),(0,s.kt)("p",null,"In the example above, if the submit link does not appear on the page at the\nexact moment when Protractor runs the test (which can be due to any number of\nfactors including API calls, slow browser rendering, etc.), your test will fail.\nHowever, Cypress factors these conditions into its assertions and will only fail\nif the time goes beyond a reasonable amount."),(0,s.kt)("h2",{id:"Negative-assertions"},"Negative assertions"),(0,s.kt)("p",null,'There are positive and negative assertions. Negative assertions have the "not"\nchainer prefixed to the assertion. Examples of negative assertions in both\nProtractor and Cypress:'),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"expect(\n  element(by.css('.todo'))\n    .getAttribute('class')\n    .then((classes) => {\n      return classes.split(' ').indexOf('completed') !== -1\n    })\n).not.toBe(true)\n\nexpect(element(by.id('loading')).isDisplayed()).not.toBe(true)\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('.todo').should('not.have.class', 'completed')\ncy.get('#loading').should('not.be.visible')\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Learn more about how Cypress handles\n",(0,s.kt)("a",{parentName:"p",href:"/guides/references/assertions"},"assertions"),".")),(0,s.kt)("h2",{id:"Network-Handling"},"Network Handling"),(0,s.kt)("h3",{id:"Network-Spying"},"Network Spying"),(0,s.kt)("p",null,"Protractor doesn't offer a built-in solution for network spying. With Cypress,\nyou can leverage the ",(0,s.kt)("a",{parentName:"p",href:"/api/commands/intercept"},"intercept API")," to spy on and\nmanage the behavior of any network request."),(0,s.kt)("p",null,"For example, if you wanted to wait on a network request to complete before\ncontinuing your test, you could write the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"it('should display a Load More button after fetching and displaying a list of users', () => {\n  cy.visit('/users')\n  cy.intercept('/users/**')\n  cy.get('button').contains('Load More')\n})\n")),(0,s.kt)("p",null,"Cypress will automatically wait for any request to ",(0,s.kt)("inlineCode",{parentName:"p"},"/users/**")," to complete\nbefore continuing your test."),(0,s.kt)("h3",{id:"Network-Stubbing"},"Network Stubbing"),(0,s.kt)("p",null,"Cypress's ",(0,s.kt)("a",{parentName:"p",href:"/api/commands/intercept"},"intercept API")," also allows you to stub any\nnetwork request for your app under test. You can use the\n",(0,s.kt)("a",{parentName:"p",href:"/api/commands/intercept"},"intercept API")," to make assertions based on different\nsimulated responses for your network requests. For example, you might want to\nsimulate a 3rd-party API outage by forcing a network error and test your app\nunder those conditions. With Cypress's ",(0,s.kt)("a",{parentName:"p",href:"/api/commands/intercept"},"intercept API"),",\nthis and more is possible!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"it('should display a warning when the third-party API is down', () => {\n  cy.intercept(\n    'GET',\n    'https://api.openweathermap.org/data/2.5/weather?q=Atlanta',\n    { statusCode: 500 }\n  )\n  cy.get('.weather-forecast').contains('Weather Forecast Unavailable')\n})\n")),(0,s.kt)("p",null,"You can also use the intercept API to stub a custom response for specific\nnetwork requests:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"it('projects endpoint should return 2 projects', () => {\n  cy.intercept('/projects', {\n    body: [{ projectId: '1' }, { projectId: '2' }],\n  }).as('projects')\n  cy.wait('@projects').its('response.body').should('have.length', 2)\n})\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"For more information, check out the\n",(0,s.kt)("a",{parentName:"p",href:"/api/commands/intercept"},"intercept API documentation"),".")),(0,s.kt)("h2",{id:"Navigating-Websites"},"Navigating Websites"),(0,s.kt)("p",null,"When you want to visit a page, you can do so with the following code:"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"it('visits a page', () => {\n  browser.get('/about')\n  browser.navigate().forward()\n  browser.navigate().back()\n})\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"it('visits a page', () => {\n  cy.visit('/about')\n  cy.go('forward')\n  cy.go('back')\n})\n")),(0,s.kt)("p",null,"However, Protractor assumes that all websites you want to visit are Angular\napps. As a result, you have to take an extra step to disable this behavior. When\nyou write Cypress tests though, you don't need to do any extra work!"),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"it('visit a non-Angular page', () => {\n  browser.waitForAngularEnabled(false)\n  browser.get('/about')\n})\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"it('visit a non-Angular page', () => {\n  cy.visit('/about')\n})\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"For more information, check out our\n",(0,s.kt)("a",{parentName:"p",href:"https://example.cypress.io/commands/navigation"},"official documentation on navigation"),"!")),(0,s.kt)("h2",{id:"Automatic-Retrying-and-Waiting"},"Automatic Retrying and Waiting"),(0,s.kt)("p",null,"Web applications are usually rarely synchronous. With Protractor, you may be\naccustomed to adding arbitrary timeouts or using the\n",(0,s.kt)("a",{parentName:"p",href:"https://www.protractortest.org/#/api?view=ProtractorBrowser.prototype.waitForAngular"},"waitForAngular"),"\nAPI to wait for Angular to finish rendering before attempting to interact with\nan element."),(0,s.kt)("p",null,"With Cypress, commands that query the DOM are\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/retry-ability"},"automatically retried"),". Cypress will\nautomatically wait and retry most commands until an element appears in the DOM.\nIf an element is not\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/interacting-with-elements#Actionability"},"actionable"),"\nwithin the\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/retry-ability#Timeouts"},(0,s.kt)("inlineCode",{parentName:"a"},"defaultCommandTimeout"))," setting,\nthe command will fail. This enables you to write tests without the need for\narbitrary timeouts, enabling you to write more predictable tests."),(0,s.kt)(d,{type:"danger",mdxType:"Badge"},"Before: Protractor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Clicking a button\nelement(by.css('button')).click()\n// Waiting for Angular to re-render the page\nbrowser.waitForAngular()\n// Make assertion after waiting for Angular to update\nexpect(by.css('.list-item').getText()).toEqual('my text')\n")),(0,s.kt)(d,{type:"success",mdxType:"Badge"},"After: Cypress"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Clicking a button\ncy.get('button').click()\n// Make assertion. No waiting necessary!\ncy.get('.list-item').contains('my text')\n")),(0,s.kt)("h2",{id:"Cypress-vs-WebDriver-Control-Flow"},"Cypress vs WebDriver Control Flow"),(0,s.kt)("p",null,"Cypress commands are similar to Protractor code at first glance. Cypress\ncommands are\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/introduction-to-cypress#Commands-Are-Asynchronous"},"not invoked immediately"),"\nand are enqueued to run serially at a later time. Cypress commands might look\nlike promises, but the\n",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/introduction-to-cypress#Commands-Are-Not-Promises"},"Cypress API is not an exact implementation of Promises"),".\nThe modern web is asychronous, therefore you need to interact with modern web\napps in an asynchronous fashion. This is why the Cypress API is asynchronous.\nThis allows you to write deterministic tests since all of your commands are\nexecuted serially, enabling your tests to run predictably each time."),(0,s.kt)("p",null,"In comparison, Protractor's WebDriverJS API is based on promises, which is\nmanaged by a control flow. This\n",(0,s.kt)("a",{parentName:"p",href:"https://www.protractortest.org/#/control-flow"},"Control Flow")," enables you to\nwrite asynchronous Protractor tests in a synchronous style."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Click on the element\n// This code looks synchronous!\nelement(by.css('button')).click()\n\n// Send keys to the element (usually an input)\nelement(by.css('input')).sendKeys('my text')\n")),(0,s.kt)("p",null,"Protractor's Control Flow can be disabled, allowing you to write your test cases\nas asynchronous functions."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Wait for the button to be found and click it\nawait element(by.css('button')).click()\n\n// Wait for the input to be found and type into the field\nawait element(by.css('input')).sendKeys('my text')\n")),(0,s.kt)("p",null,"The Control Flow example rewritten as a Cypress test would look something like\nthis:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Click on the element\ncy.get('button').click()\n\n// Send keys to the element (usually an input)\ncy.get('input').type('my text')\n")),(0,s.kt)("h2",{id:"Using-Page-Objects"},"Using Page Objects"),(0,s.kt)("p",null,"A common pattern when writing end-to-end tests, especially with Protractor, is\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/SeleniumHQ/selenium/wiki/PageObjects"},"Page Objects"),". Page\nObjects can simplify your test code by creating reusable methods if you find\nyourself writing the same test code across multiple test cases."),(0,s.kt)("h3",{id:"Protractor-without-Page-Objects"},"Protractor without Page Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Type into username field\nelement(by.css('.username')).sendKeys('my username')\n// Type into password field\nelement(by.css('.password')).sendKeys('my password')\n// Click the login button\nelement(by.css('button')).click()\n")),(0,s.kt)("h3",{id:"Protractor-with-Page-Objects"},"Protractor with Page Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const page = {\n  login: () => {\n    element(by.css('.username')).sendKeys('my username')\n    element(by.css('.password')).sendKeys('my password')\n    element(by.css('button')).click()\n  },\n}\n\nit('should display the username of a logged in user', () => {\n  page.login()\n  expect(by.css('.username').getText()).toEqual('my username')\n})\n")),(0,s.kt)("p",null,"You can use the same Page Object pattern within your Cypress tests:"),(0,s.kt)("h3",{id:"Cypress-without-Page-Objects"},"Cypress without Page Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"cy.get('.username').type('my username')\ncy.get('.password').type('my password')\ncy.get('button').click()\n")),(0,s.kt)("h3",{id:"Cypress-with-Page-Objects"},"Cypress with Page Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const page = {\n  login: () => {\n    cy.get('.username').type('my username')\n    cy.get('.password').type('my password')\n    cy.get('button').click()\n  },\n}\n\nit('should display the username of a logged in user', () => {\n  page.login()\n  cy.get('.username').contains('my username')\n})\n")),(0,s.kt)("p",null,"Cypress also provides a ",(0,s.kt)("a",{parentName:"p",href:"/api/cypress-api/custom-commands"},"Custom Command")," API\nto enable you to add methods to the ",(0,s.kt)("inlineCode",{parentName:"p"},"cy")," global directly:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"Cypress.Commands.add('login', (username, password) => {\n  cy.get('.username').type(username)\n  cy.get('.password').type(password)\n})\n")),(0,s.kt)("p",null,"You can use your own custom commands in any of your tests:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"it('should display the username of a logged in user', () => {\n  cy.login('Matt', Cypress.env('password'))\n  cy.get('.username').contains('Matt')\n})\n")),(0,s.kt)("h2",{id:"Continuous-Integration"},"Continuous Integration"),(0,s.kt)("p",null,"Cypress makes it easy to\n",(0,s.kt)("a",{parentName:"p",href:"/guides/continuous-integration/introduction"},"run your tests in all Continuous Integration environments"),"."),(0,s.kt)("p",null,"Check out our in-depth guides to run your Cypress tests in\n",(0,s.kt)("a",{parentName:"p",href:"/guides/continuous-integration/github-actions"},"GitHub Actions"),",\n",(0,s.kt)("a",{parentName:"p",href:"/guides/continuous-integration/introduction#CircleCI"},"CircleCI"),",\n",(0,s.kt)("a",{parentName:"p",href:"/guides/continuous-integration/gitlab-ci"},"GitLab CI"),",\n",(0,s.kt)("a",{parentName:"p",href:"/guides/continuous-integration/bitbucket-pipelines"},"Bitbucket Pipeline"),", or\n",(0,s.kt)("a",{parentName:"p",href:"/guides/continuous-integration/aws-codebuild"},"AWS CodeBuild"),"."),(0,s.kt)("p",null,"We also have code samples to get Cypress up and running in\n",(0,s.kt)("a",{parentName:"p",href:"/guides/continuous-integration/ci-provider-examples"},"many of the other popular CI environments"),".\nEven if your CI provider isn't listed, you can still run Cypress in your CI\nenvironment."),(0,s.kt)("h2",{id:"Parallelization"},"Parallelization"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/guides/cloud/introduction"},"Cypress Cloud")," allows you to run your test files in\nparallel across multiple CI machines."),(0,s.kt)("p",null,"With Cypress, your tests can be\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization"},"parallelized on a per spec file basis"),".\nThis is an important distinction between Protractor and Cypress parallelization.\nOne of the reasons why Cypress parallelizes tests per file is because some users\nmay write tests that build up state that subsequent tests, although we\n",(0,s.kt)("a",{parentName:"p",href:"/guides/references/best-practices#Having-tests-rely-on-the-state-of-previous-tests"},"do not recommend relying on the state of previous tests"),"."),(0,s.kt)("p",null,"With Cypress, all you need to do is pass the ",(0,s.kt)("inlineCode",{parentName:"p"},"--parallel")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"--record")," flag to\n",(0,s.kt)("inlineCode",{parentName:"p"},"cypress run"),", and it will take care of the rest for you:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cypress run --record --parallel\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"For more information, check out our\n",(0,s.kt)("a",{parentName:"p",href:"/guides/cloud/smart-orchestration/parallelization#Overview"},"docs on parallelization"),"!")),(0,s.kt)(h,{mdxType:"TestReplayInfo"}),(0,s.kt)("h2",{id:"Angular-Schematic-Configuration"},"Angular Schematic Configuration"),(0,s.kt)("p",null,"The\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/tree/develop/npm/cypress-schematic#readme"},"Cypress Angular Schematic"),"\nhas many configurable options to fit the needs of your project."),(0,s.kt)("h3",{id:"Running-the-builder-with-a-specific-browser"},"Running the builder with a specific browser"),(0,s.kt)("p",null,"Before running Cypress in ",(0,s.kt)("inlineCode",{parentName:"p"},"open")," mode, ensure that you have started your\napplication server using ",(0,s.kt)("inlineCode",{parentName:"p"},"ng serve"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'"cypress-open": {\n  "builder": "@cypress/schematic:cypress",\n  "options": {\n    "watch": true,\n    "headless": false,\n    "browser": "chrome"\n  },\n  "configurations": {\n    "production": {\n      "devServerTarget": "{project-name}:serve:production"\n    }\n  }\n}\n')),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Read the docs on ",(0,s.kt)("a",{parentName:"p",href:"http://on.cypress.io/launching-browsers"},"launching browsers"),"\nto learn more.")),(0,s.kt)("h3",{id:"Recording-test-results-to-Cypress-Cloud"},"Recording test results to Cypress Cloud"),(0,s.kt)("p",null,"We recommend setting your\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/cloud/introduction"},"Cypress Cloud")," recording key\nas an environment variable and ",(0,s.kt)("em",{parentName:"p"},"NOT")," as a builder option when running it in CI."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'"cypress-run": {\n  "builder": "@cypress/schematic:cypress",\n  "options": {\n    "devServerTarget": "{project-name}:serve",\n    "record": true,\n    "key": "your-cypress-dashboard-recording-key"\n  },\n  "configurations": {\n    "production": {\n      "devServerTarget": "{project-name}:production"\n    }\n  }\n}\n')),(0,s.kt)("p",null,"Read the docs on\n",(0,s.kt)("a",{parentName:"p",href:"http://on.cypress.io/recording-project-runs"},"recording test results")," to\n",(0,s.kt)("a",{parentName:"p",href:"/guides/cloud/introduction"},"Cypress Cloud")," to learn more."),(0,s.kt)("h3",{id:"Specifying-a-custom-Cypress-configuration-file"},"Specifying a custom Cypress configuration file"),(0,s.kt)("p",null,"It may be useful to have different Cypress configuration files per environment\n(ie. development, staging, production)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'"cypress-run": {\n  "builder": "@cypress/schematic:cypress",\n  "options": {\n    "devServerTarget": "{project-name}:serve",\n    "configFile": "cypress.production.config.js"\n  },\n  "configurations": {\n    "production": {\n      "devServerTarget": "{project-name}:production"\n    }\n  }\n}\n')),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Read our docs to learn more about all the\n",(0,s.kt)("a",{parentName:"p",href:"http://on.cypress.io/configuration"},"configuration options")," Cypress offers.")),(0,s.kt)("h3",{id:"Running-Cypress-in-parallel-mode-within-CI"},"Running Cypress in parallel mode within CI"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'"cypress-run": {\n  "builder": "@cypress/schematic:cypress",\n  "options": {\n    "devServerTarget": "{project-name}:serve",\n    "parallel": true,\n    "record": true,\n    "key": "your-cypress-dashboard-recording-key"\n  },\n  "configurations": {\n    "production": {\n      "devServerTarget": "{project-name}:production"\n    }\n  }\n}\n')),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Read our docs to learn more about speeding up test execution in CI via\n",(0,s.kt)("a",{parentName:"p",href:"http://on.cypress.io/parallelization"},"Cypress parallelization"))),(0,s.kt)("h3",{id:"Code-Coverage"},"Code Coverage"),(0,s.kt)("p",null,"As you write more and more end-to-end tests, you will find yourself wondering -\ndo I need to write more tests? Are there parts of the application still\nuntested? Are there parts of the application that perhaps are tested too much?\nThis ",(0,s.kt)("a",{parentName:"p",href:"https://on.cypress.io/code-coverage"},"code coverage guide")," is an excellent\nresource to learn how to add code coverage."),(0,s.kt)("h3",{id:"Questions-or-Issues"},"Questions or Issues?"),(0,s.kt)("p",null,"Visit our\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/discussions/categories/plugins"},"plugins discussion"),"\nto ask questions or report issues related to our Cypress Angular Schematic."),(0,s.kt)("h2",{id:"Next-Steps"},"Next Steps"),(0,s.kt)("p",null,"For more information on how to create end-to-end tests with Cypress, be sure to\ncheck out ",(0,s.kt)("a",{parentName:"p",href:"/guides/overview/why-cypress"},"our official documentation here"),"."),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"If you see any inaccuracies with this guide or feel like something has been\nmisrepresented, please\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/discussions/new"},"start a discussion here"),".")),(0,s.kt)("h2",{id:"FAQs"},"FAQs"),(0,s.kt)("h3",{id:"Do-I-have-to-replace-all-of-my-tests-with-Cypress-immediately"},"Do I have to replace all of my tests with Cypress immediately?"),(0,s.kt)("p",null,"Absolutely not. While it might sound ideal to replace Protractor immediately,\nyou can gradually migrate Protractor tests over to Cypress."),(0,s.kt)("h3",{id:"Can-Protractor-and-Cypress-coexist-in-the-same-app"},"Can Protractor and Cypress coexist in the same app?"),(0,s.kt)("p",null,"Yes! Your Protractor tests would continue to live in the ",(0,s.kt)("inlineCode",{parentName:"p"},"e2e")," directory that\nAngular CLI scaffolded while all Cypress tests would live in a sibling folder\nnamed ",(0,s.kt)("inlineCode",{parentName:"p"},"cypress"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 cypress\n\u251c\u2500\u2500 e2e\n\u251c\u2500\u2500 src\n\u251c\u2500\u2500 .editorconfig\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 angular.json\n\u251c\u2500\u2500 browserslist\n\u251c\u2500\u2500 cypress.config.js\n\u251c\u2500\u2500 karma.conf.js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 tsconfig.app.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 tsconfig.spec.json\n\u2514\u2500\u2500 tslint.json\n")),(0,s.kt)("p",null,"In fact, as you work through migrating to Cypress, we believe that progressively\nenhancing your e2e tests with Cypress is the best path forward to ensure that\nfeature development is not impacted."))}f.isMDXComponent=!0}}]);