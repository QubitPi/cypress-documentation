"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[5558],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=p(n),u=a,h=g["".concat(s,".").concat(u)]||g[u]||d[u]||i;return n?o.createElement(h,r(r({ref:t},c),{},{components:n})):o.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[g]="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},0:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const i={title:"Google Authentication",e2eSpecific:!0,slug:"/guides/end-to-end-testing/google-authentication"},r=void 0,l={unversionedId:"guides/end-to-end-testing/testing-strategies/google-authentication",id:"guides/end-to-end-testing/testing-strategies/google-authentication",title:"Google Authentication",description:"What you'll learn",source:"@site/docs/guides/end-to-end-testing/testing-strategies/google-authentication.mdx",sourceDirName:"guides/end-to-end-testing/testing-strategies",slug:"/guides/end-to-end-testing/google-authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/google-authentication",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/end-to-end-testing/testing-strategies/google-authentication.mdx",tags:[],version:"current",lastUpdatedAt:1702621628,formattedLastUpdatedAt:"Dec 15, 2023",frontMatter:{title:"Google Authentication",e2eSpecific:!0,slug:"/guides/end-to-end-testing/google-authentication"},sidebar:"guides",previous:{title:"Azure Active Directory Authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/azure-active-directory-authentication"},next:{title:"Okta Authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/okta-authentication"}},s={},p=[{value:"Google Developer Console Setup",id:"Google-Developer-Console-Setup",level:2},{value:"Google Project and Application Setup",id:"Google-Project-and-Application-Setup",level:3},{value:"Using the Google OAuth 2.0 Playground to Create Testing Credentials",id:"Using-the-Google-OAuth-20-Playground-to-Create-Testing-Credentials",level:3},{value:"Setting Google app credentials in Cypress",id:"Setting-Google-app-credentials-in-Cypress",level:2},{value:"Custom Command for Google Authentication",id:"Custom-Command-for-Google-Authentication",level:2},{value:"Adapting a Google App for Testing",id:"Adapting-a-Google-App-for-Testing",level:2},{value:"Adapting the back end",id:"Adapting-the-back-end",level:3},{value:"Adapting the front end",id:"Adapting-the-front-end",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},g=c("Icon"),d=c("CypressConfigFileTabs"),u={toc:p};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("h2",{parentName:"admonition",id:"What-youll-learn"},(0,a.kt)(g,{name:"graduation-cap",mdxType:"Icon"})," What you'll learn"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Programmatically authenticate with ",(0,a.kt)("a",{parentName:"li",href:"https://google.com"},"Google")," via a custom\nCypress command"),(0,a.kt)("li",{parentName:"ul"},"Adapting your ",(0,a.kt)("a",{parentName:"li",href:"https://google.com"},"Google")," application for programmatic\nauthentication during testing"))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("strong",null,"Why authenticate programmatically?"),(0,a.kt)("p",{parentName:"admonition"},"Typically, logging in a user within your app by authenticating via a third-party\nprovider requires visiting login pages hosted on a different domain. Since each\nCypress test is limited to visiting domains of the same origin, we can subvert\nvisiting and testing third-party login pages by programmatically interacting\nwith the third-party authentication API to login a user.")),(0,a.kt)("h2",{id:"Google-Developer-Console-Setup"},"Google Developer Console Setup"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The technique we will use for testing is to use the\n",(0,a.kt)("a",{parentName:"p",href:"https://developers.google.com/oauthplayground"},"Google OAuth 2.0 Playground")," to\ncreate a refresh token that can be exchanged for an access token and id token\nduring the testing phase.")),(0,a.kt)("h3",{id:"Google-Project-and-Application-Setup"},"Google Project and Application Setup"),(0,a.kt)("p",null,"First, a ",(0,a.kt)("a",{parentName:"p",href:"https://google.com"},"Google")," project is required. If you don't already\nhave a project, you can create one using the\n",(0,a.kt)("a",{parentName:"p",href:"https://console.cloud.google.com"},"Google Cloud Console"),". More information is\navailable in the\n",(0,a.kt)("a",{parentName:"p",href:"https://cloud.google.com/apis/docs/getting-started#creating_a_google_project"},"Google Cloud APIs Getting Started"),"."),(0,a.kt)("p",null,"Next, use the ",(0,a.kt)("a",{parentName:"p",href:"https://console.developers.google.com/APIs"},"Google API Console"),"\nto ",(0,a.kt)("a",{parentName:"p",href:"https://console.developers.google.com/apis/credentials"},"create credentials"),"\nfor your web application. In the top navigation, click ",(0,a.kt)("inlineCode",{parentName:"p"},"Create Credentials")," and\nchoose ",(0,a.kt)("inlineCode",{parentName:"p"},"OAuth client ID"),"."),(0,a.kt)("p",null,"On the ",(0,a.kt)("inlineCode",{parentName:"p"},"Create OAuth client ID")," page, enter the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Application Type: Web Application"),(0,a.kt)("li",{parentName:"ul"},"Name: Your Web Application Name"),(0,a.kt)("li",{parentName:"ul"},"Authorized JavaScript origins: http://localhost:3000"),(0,a.kt)("li",{parentName:"ul"},"Authorized redirect URIs: http://localhost:3000/callback and\n",(0,a.kt)("a",{parentName:"li",href:"https://developers.google.com/oauthplayground"},"https://developers.google.com/oauthplayground"))),(0,a.kt)("p",null,'Once saved, note the client ID and client secret. You can find these under the\n"OAuth 2.0 Client IDs" on the\n',(0,a.kt)("a",{parentName:"p",href:"https://console.developers.google.com/apis/credentials"},"Google API Credentials"),"\npage."),(0,a.kt)("h3",{id:"Using-the-Google-OAuth-20-Playground-to-Create-Testing-Credentials"},"Using the Google OAuth 2.0 Playground to Create Testing Credentials"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The refresh token from this process is unique to the authenticated Google user.\nThis process must be repeated for each user intended for testing.")),(0,a.kt)("p",null,"Note the client id and client secret from the previous step and visit the\n",(0,a.kt)("a",{parentName:"p",href:"https://developers.google.com/oauthplayground"},"Google OAuth 2.0 Playground"),"."),(0,a.kt)("p",null,"Click the ",(0,a.kt)("inlineCode",{parentName:"p"},"gear")," icon in the upper right corner to reveal a\n",(0,a.kt)("inlineCode",{parentName:"p"},"OAuth 2.0 configuration")," panel. In this panel set the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"OAuth flow: Server-side"),(0,a.kt)("li",{parentName:"ul"},"Access type: Offline"),(0,a.kt)("li",{parentName:"ul"},"Check ",(0,a.kt)("inlineCode",{parentName:"li"},"Use your own OAuth credentials"),"."),(0,a.kt)("li",{parentName:"ul"},"OAuth Client ID: Your Google Application Client ID"),(0,a.kt)("li",{parentName:"ul"},"OAuth Client secret: Your Google Application Client Secret")),(0,a.kt)("p",null,"Select the Google APIs needed for your application under\n",(0,a.kt)("inlineCode",{parentName:"p"},"Step 1 (Select & authorize APIs)"),", including the\n",(0,a.kt)("inlineCode",{parentName:"p"},"https://www.googleapis.com/auth/userinfo.profile")," endpoint under\n",(0,a.kt)("inlineCode",{parentName:"p"},"Google OAuth2 API v2")," at a minimum. Click ",(0,a.kt)("inlineCode",{parentName:"p"},"Authorize APIs"),"."),(0,a.kt)("p",null,"Next, sign in with Google credentials to your test Google user account."),(0,a.kt)("p",null,"You will be redirected back to the\n",(0,a.kt)("a",{parentName:"p",href:"https://developers.google.com/oauthplayground"},"Google OAuth 2.0 Playground"),"\nunder ",(0,a.kt)("inlineCode",{parentName:"p"},"Step 2 (Exchange authorization code for tokens)"),". Click the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Exchange authorization code for token")," button."),(0,a.kt)("p",null,"You will be taken to ",(0,a.kt)("inlineCode",{parentName:"p"},"Step 3 (Configure request to API)"),". Note the returned\nrefresh token to be used with testing."),(0,a.kt)("h2",{id:"Setting-Google-app-credentials-in-Cypress"},"Setting Google app credentials in Cypress"),(0,a.kt)("p",null,"To have access to test user credentials within our tests we need to configure\nCypress to use the ",(0,a.kt)("a",{parentName:"p",href:"https://google.com"},"Google")," environment variables set in the\n",(0,a.kt)("inlineCode",{parentName:"p"},".env")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// .env\nREACT_APP_GOOGLE_CLIENTID = 'your-client-id'\nREACT_APP_GOOGLE_CLIENT_SECRET = 'your-client-secret'\nGOOGLE_REFRESH_TOKEN = 'your-refresh-token'\n")),(0,a.kt)("cypress-config-example",null,(0,a.kt)(d,{mdxType:"CypressConfigFileTabs"},(0,a.kt)("pre",{parentName:"cypress-config-example"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n\nmodule.exports = defineConfig({\n  env: {\n    googleRefreshToken: process.env.GOOGLE_REFRESH_TOKEN,\n    googleClientId: process.env.REACT_APP_GOOGLE_CLIENTID,\n    googleClientSecret: process.env.REACT_APP_GOOGLE_CLIENT_SECRET,\n  },\n})\n")),(0,a.kt)("pre",{parentName:"cypress-config-example"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n\nexport default defineConfig({\n  env: {\n    googleRefreshToken: process.env.GOOGLE_REFRESH_TOKEN,\n    googleClientId: process.env.REACT_APP_GOOGLE_CLIENTID,\n    googleClientSecret: process.env.REACT_APP_GOOGLE_CLIENT_SECRET,\n  },\n})\n")))),(0,a.kt)("h2",{id:"Custom-Command-for-Google-Authentication"},"Custom Command for Google Authentication"),(0,a.kt)("p",null,"Next, we will write a command named ",(0,a.kt)("inlineCode",{parentName:"p"},"loginByGoogleApi")," to perform a programmatic\nlogin into ",(0,a.kt)("a",{parentName:"p",href:"https://google.com"},"Google")," and set an item in localStorage with the\nauthenticated users details, which we will use in our application code to verify\nwe are authenticated under test."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"loginByGoogleApi")," command will execute the following steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Use the refresh token from the\n",(0,a.kt)("a",{parentName:"li",href:"https://developers.google.com/oauthplayground"},"Google OAuth 2.0 Playground"),"\nto perform the programmatic login, exchanging the refresh token for an\n",(0,a.kt)("inlineCode",{parentName:"li"},"access_token"),"."),(0,a.kt)("li",{parentName:"ol"},"Use the ",(0,a.kt)("inlineCode",{parentName:"li"},"access_token")," returned to get the Google User profile."),(0,a.kt)("li",{parentName:"ol"},"Finally the ",(0,a.kt)("inlineCode",{parentName:"li"},"googleCypress")," localStorage item is set with the ",(0,a.kt)("inlineCode",{parentName:"li"},"access token"),"\nand user profile.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// cypress/support/commands.js\nCypress.Commands.add('loginByGoogleApi', () => {\n  cy.log('Logging in to Google')\n  cy.request({\n    method: 'POST',\n    url: 'https://www.googleapis.com/oauth2/v4/token',\n    body: {\n      grant_type: 'refresh_token',\n      client_id: Cypress.env('googleClientId'),\n      client_secret: Cypress.env('googleClientSecret'),\n      refresh_token: Cypress.env('googleRefreshToken'),\n    },\n  }).then(({ body }) => {\n    const { access_token, id_token } = body\n\n    cy.request({\n      method: 'GET',\n      url: 'https://www.googleapis.com/oauth2/v3/userinfo',\n      headers: { Authorization: `Bearer ${access_token}` },\n    }).then(({ body }) => {\n      cy.log(body)\n      const userItem = {\n        token: id_token,\n        user: {\n          googleId: body.sub,\n          email: body.email,\n          givenName: body.given_name,\n          familyName: body.family_name,\n          imageUrl: body.picture,\n        },\n      }\n\n      window.localStorage.setItem('googleCypress', JSON.stringify(userItem))\n      cy.visit('/')\n    })\n  })\n})\n")),(0,a.kt)("p",null,"With our Google app setup properly, necessary environment variables in place,\nand our ",(0,a.kt)("inlineCode",{parentName:"p"},"loginByGoogleApi")," command implemented, we will be able to authenticate\nwith Google while our app is under test. Below is a test to login as a user via\n",(0,a.kt)("a",{parentName:"p",href:"https://google.com"},"Google"),", complete the onboarding process and logout."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"describe('Google', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.loginByGoogleApi()\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("strong",null,"Try it out"),(0,a.kt)("p",{parentName:"admonition"},"The\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/tests/ui-auth-providers/google.spec.ts"},"runnable version of this test"),"\nis in the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,a.kt)("h2",{id:"Adapting-a-Google-App-for-Testing"},"Adapting a Google App for Testing"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("strong",null,"Note"),(0,a.kt)("p",{parentName:"admonition"},"The previous sections focused on the recommended Google authentication practice\nwithin Cypress tests. To use this practice it is assumed you are testing an app\nappropriately built or adapted to use Google."),(0,a.kt)("p",{parentName:"admonition"},"The following sections provides guidance on building or adapting an app to use\nGoogle authentication.")),(0,a.kt)("p",null,"The\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App")," is\nused and provides configuration and runnable code for both the React SPA and the\nExpress back end."),(0,a.kt)("p",null,"The front end uses the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/anthonyjgrove/react-google-login"},"react-google-login component"),"\nand the back end uses ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/auth0/express-jwt"},"express-jwt")," to\nvalidate the JWT provided by ",(0,a.kt)("a",{parentName:"p",href:"https://google.com"},"Google"),"."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("strong",null,"Note"),(0,a.kt)("p",{parentName:"admonition"},"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn dev:google")," command when starting the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,a.kt)("h3",{id:"Adapting-the-back-end"},"Adapting the back end"),(0,a.kt)("p",null,"In order to validate API requests from the frontend, we install\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/auth0/express-jwt"},"express-jwt")," and\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/auth0/node-jwks-rsa"},"jwks-rsa")," and configure validation for\nJWT's from ",(0,a.kt)("a",{parentName:"p",href:"https://google.com"},"Google"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// backend/helpers.ts\nimport jwt from 'express-jwt'\nimport jwksRsa from 'jwks-rsa'\n\ndotenv.config()\nconst googleJwtConfig = {\n  secret: jwksRsa.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: 'https://www.googleapis.com/oauth2/v3/certs',\n  }),\n  // Validate the audience and the issuer.\n  audience: process.env.REACT_APP_GOOGLE_CLIENTID,\n  issuer: 'accounts.google.com',\n  algorithms: ['RS256'],\n}\n")),(0,a.kt)("p",null,"Next, we'll define an Express middleware function to be use in our routes to\nverify the ",(0,a.kt)("a",{parentName:"p",href:"https://google.com"},"Google")," JWT sent by the front end API requests\nas the ",(0,a.kt)("inlineCode",{parentName:"p"},"Bearer")," token."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// backend/helpers.ts\n// ...\nexport const checkJwt = jwt(googleJwtConfig).unless({ path: ['/testData/*'] })\n")),(0,a.kt)("p",null,"Once this helper is defined, we can use globally to apply to all routes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// backend/app.ts\n// initial imports ...\nimport { checkJwt } from './helpers'\n\n// ...\nif (process.env.REACT_APP_GOOGLE) {\n  app.use(checkJwt)\n}\n// routes ...\n")),(0,a.kt)("h3",{id:"Adapting-the-front-end"},"Adapting the front end"),(0,a.kt)("p",null,"We need to update our front end React app to allow for authentication with\n",(0,a.kt)("a",{parentName:"p",href:"https://google.com"},"Google"),". As mentioned above, the front end uses the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/anthonyjgrove/react-google-login"},"react-google-login component"),"\nto perform the login."),(0,a.kt)("p",null,"First, we create a ",(0,a.kt)("inlineCode",{parentName:"p"},"AppGoogle.tsx")," container to render our application as it is\nauthenticated with ",(0,a.kt)("a",{parentName:"p",href:"https://google.com"},"Google"),". The component is identical to\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"App.tsx")," component, but has the addition of a ",(0,a.kt)("inlineCode",{parentName:"p"},"GoogleLogin")," component in\nplace of the original Sign Up and Sign In components."),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"useGoogleLogin")," hook is added to send a ",(0,a.kt)("inlineCode",{parentName:"p"},"GOOGLE")," event with the ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"token")," objects to work with the existing authentication layer\n(",(0,a.kt)("inlineCode",{parentName:"p"},"authMachine.ts"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'// src/containers/AppGoogle.tsx\n// initial imports ...\nimport { GoogleLogin, useGoogleLogin } from "react-google-login"\n// ...\nconst AppGoogle= () => {\n  // ...\n  useGoogleLogin({\n      clientId: process.env.REACT_APP_GOOGLE_CLIENTID!,\n      onSuccess: (res) => {\n      authService.send("GOOGLE", { user: res.profileObj, token: res.tokenId });\n    },\n    cookiePolicy: "single_host_origin",\n    isSignedIn: true,\n  });\n  // ...\n  const isLoggedIn =\n    isAuthenticated &&\n    (authState.matches("authorized") ||\n      authState.matches("refreshing") ||\n      authState.matches("updating"));\n  return (\n    <div className={classes.root}>\n      // ...\n      {authState.matches("unauthorized") && (\n        <Container component="main" maxWidth="xs">\n          <CssBaseline />\n          <div className={classes.paper}>\n            <GoogleLogin\n              clientId={process.env.REACT_APP_GOOGLE_CLIENTID!}\n              buttonText="Login"\n              cookiePolicy={"single_host_origin"}\n            />\n          </div>\n        </Container>\n      )}\n    </div>\n  );\n};\nexport default AppGoogle;\n')),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The full\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppGoogle.tsx"},"AppGoogle.tsx component"),"\nis in the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,a.kt)("p",null,"Next, we update our entry point (",(0,a.kt)("inlineCode",{parentName:"p"},"index.tsx"),") to conditionally load the\n",(0,a.kt)("inlineCode",{parentName:"p"},"AppGoogle")," component if we start the application with the ",(0,a.kt)("inlineCode",{parentName:"p"},"REACT_APP_GOOGLE"),"\nenvironment variable set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/index.tsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Router } from 'react-router-dom'\nimport { history } from './utils/historyUtils'\nimport App from './containers/App'\nimport AppGoogle from './containers/AppGoogle'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core'\nconst theme = createMuiTheme({\n  palette: {\n    secondary: {\n      main: '#fff',\n    },\n  },\n})\nReactDOM.render(\n  <Router history={history}>\n    <ThemeProvider theme={theme}>\n      {process.env.REACT_APP_GOOGLE ? <AppGoogle /> : <App />}\n    </ThemeProvider>\n  </Router>,\n  document.getElementById('root')\n)\n")))}h.isMDXComponent=!0}}]);