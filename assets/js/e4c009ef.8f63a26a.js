"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[6669],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=l(t),d=i,m=c["".concat(p,".").concat(d)]||c[d]||f[d]||a;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7368:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const a={title:"After Run API"},s=void 0,o={unversionedId:"api/plugins/after-run-api",id:"api/plugins/after-run-api",title:"After Run API",description:"The after:run event fires after a run is finished. When running cypress via",source:"@site/docs/api/plugins/after-run-api.mdx",sourceDirName:"api/plugins",slug:"/api/plugins/after-run-api",permalink:"/cypress-documentation/api/plugins/after-run-api",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/plugins/after-run-api.mdx",tags:[],version:"current",frontMatter:{title:"After Run API"},sidebar:"api",previous:{title:"Cypress.sinon",permalink:"/cypress-documentation/api/utilities/sinon"},next:{title:"After Screenshot API",permalink:"/cypress-documentation/api/plugins/after-screenshot-api"}},p={},l=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:2},{value:"Log the number of passed tests of a run",id:"Log-the-number-of-passed-tests-of-a-run",level:3},{value:"See also",id:"See-also",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},c=u("WarningSetupNodeEvents"),f=u("CypressConfigFileTabs"),d=u("Icon"),m={toc:l};function g(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"after:run")," event fires after a run is finished. When running cypress via\n",(0,i.kt)("inlineCode",{parentName:"p"},"cypress open"),", the event will fire when closing a project."),(0,i.kt)("p",null,"When running via ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress run"),", the event will fire each time ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress run"),"\nexecutes. As a result, if running your specs in\n",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/parallelization"},"parallel"),", the event will fire once for each\nmachine on which ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress run")," is called."),(0,i.kt)("h2",{id:"Syntax"},"Syntax"),(0,i.kt)(c,{mdxType:"WarningSetupNodeEvents"}),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"\u26a0\ufe0f When running via ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress open"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"after:run")," event only fires if the\n",(0,i.kt)("a",{parentName:"p",href:"/guides/references/configuration#Experiments"},"experimentalInteractiveRunEvents flag"),"\nis enabled.")),(0,i.kt)("cypress-config-plugin-example",null,(0,i.kt)(f,{mdxType:"CypressConfigFileTabs"},(0,i.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:run', (results) => {\n        /* ... */\n      })\n    },\n  },\n})\n")),(0,i.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:run', (results) => {\n        /* ... */\n      })\n    },\n  },\n})\n")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"})," results")," ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"(Object)"))),(0,i.kt)("p",null,"Results of the run, including the total number of passes/failures/etc, the\nproject config, and details about the browser and system. It is the same as the\nresults object resolved by the ",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/module-api#Results"},"Module API"),"."),(0,i.kt)("p",null,"Results are only provided when running via ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress run"),". When running via\n",(0,i.kt)("inlineCode",{parentName:"p"},"cypress open"),", the results will be undefined."),(0,i.kt)("h2",{id:"Usage"},"Usage"),(0,i.kt)("p",null,"You can return a promise from the ",(0,i.kt)("inlineCode",{parentName:"p"},"after:run")," event handler and it will be\nawaited before Cypress proceeds running your specs."),(0,i.kt)("h3",{id:"Log-the-number-of-passed-tests-of-a-run"},"Log the number of passed tests of a run"),(0,i.kt)("cypress-config-plugin-example",null,(0,i.kt)(f,{mdxType:"CypressConfigFileTabs"},(0,i.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:run', (results) => {\n        // results will look something like this when run via `cypress run`:\n        // {\n        //   totalDuration: 81,\n        //   totalSuites: 0,\n        //   totalTests: 1,\n        //   totalFailed: 0,\n        //   totalPassed: 1,\n        //   totalPending: 0,\n        //   totalSkipped: 0,\n        //   browserName: 'electron',\n        //   browserVersion: '59.0.3071.115',\n        //   osName: 'darwin',\n        //   osVersion: '16.7.0',\n        //   cypressVersion: '3.1.0',\n        //   config: {\n        //     projectId: '1qv3w7',\n        //     baseUrl: 'http://example.com',\n        //     viewportWidth: 1000,\n        //     viewportHeight: 660,\n        //     // ... more properties...\n        //   }\n        //   // ... more properties...\n        //   }\n        // }\n        if (results) {\n          // results will be undefined in interactive mode\n          console.log(\n            results.totalPassed,\n            'out of',\n            results.totalTests,\n            'passed'\n          )\n        }\n      })\n    },\n  },\n})\n")),(0,i.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:run', (results) => {\n        // results will look something like this when run via `cypress run`:\n        // {\n        //   totalDuration: 81,\n        //   totalSuites: 0,\n        //   totalTests: 1,\n        //   totalFailed: 0,\n        //   totalPassed: 1,\n        //   totalPending: 0,\n        //   totalSkipped: 0,\n        //   browserName: 'electron',\n        //   browserVersion: '59.0.3071.115',\n        //   osName: 'darwin',\n        //   osVersion: '16.7.0',\n        //   cypressVersion: '3.1.0',\n        //   config: {\n        //     projectId: '1qv3w7',\n        //     baseUrl: 'http://example.com',\n        //     viewportWidth: 1000,\n        //     viewportHeight: 660,\n        //     // ... more properties...\n        //   }\n        //   // ... more properties...\n        //   }\n        // }\n        if (results) {\n          // results will be undefined in interactive mode\n          console.log(\n            results.totalPassed,\n            'out of',\n            results.totalTests,\n            'passed'\n          )\n        }\n      })\n    },\n  },\n})\n")))),(0,i.kt)("h2",{id:"See-also"},"See also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/plugins/before-run-api"},"Before Run API")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/plugins/before-spec-api"},"Before Spec API")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/plugins/after-spec-api"},"After Spec API")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/guides/tooling/plugins-guide"},"Plugins Guide")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/plugins/writing-a-plugin"},"Writing a Plugin"))))}g.isMDXComponent=!0}}]);