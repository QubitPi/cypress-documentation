"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[9947],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=i,m=c["".concat(p,".").concat(d)]||c[d]||h[d]||o;return n?a.createElement(m,r(r({ref:t},l),{},{components:n})):a.createElement(m,r({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3294:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const o={title:"Auth0 Authentication",slug:"/guides/end-to-end-testing/auth0-authentication"},r=void 0,s={unversionedId:"guides/end-to-end-testing/testing-strategies/auth0-authentication",id:"guides/end-to-end-testing/testing-strategies/auth0-authentication",title:"Auth0 Authentication",description:"What you'll learn",source:"@site/docs/guides/end-to-end-testing/testing-strategies/auth0-authentication.mdx",sourceDirName:"guides/end-to-end-testing/testing-strategies",slug:"/guides/end-to-end-testing/auth0-authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/auth0-authentication",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/end-to-end-testing/testing-strategies/auth0-authentication.mdx",tags:[],version:"current",lastUpdatedAt:1696481464,formattedLastUpdatedAt:"Oct 5, 2023",frontMatter:{title:"Auth0 Authentication",slug:"/guides/end-to-end-testing/auth0-authentication"},sidebar:"guides",previous:{title:"Amazon Cognito Authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/amazon-cognito-authentication"},next:{title:"Azure Active Directory Authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/azure-active-directory-authentication"}},p={},u=[{value:"Auth0 Application Setup",id:"Auth0-Application-Setup",level:2},{value:"Setting Auth0 app credentials in Cypress",id:"Setting-Auth0-app-credentials-in-Cypress",level:2},{value:"Custom Command for Auth0 Authentication",id:"Custom-Command-for-Auth0-Authentication",level:2},{value:"Login with <code>cy.origin()</code>",id:"Login-with-cyorigin",level:3},{value:"Programmatic Login",id:"Programmatic-Login",level:3},{value:"Adapting an Auth0 App for Testing",id:"Adapting-an-Auth0-App-for-Testing",level:2},{value:"Adapting the back end",id:"Adapting-the-back-end",level:3},{value:"Adapting the front end",id:"Adapting-the-front-end",level:3},{value:"Auth0 Rate Limiting Logins",id:"Auth0-Rate-Limiting-Logins",level:2}],l=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},c=l("Icon"),h=l("CypressConfigFileTabs"),d=l("DocsVideo"),m={toc:u};function g(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("h2",{parentName:"admonition",id:"What-youll-learn"},(0,i.kt)(c,{name:"graduation-cap",mdxType:"Icon"})," What you'll learn"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Log in to ",(0,i.kt)("a",{parentName:"li",href:"https://auth0.com"},"Auth0")," through the UI with\n",(0,i.kt)("a",{parentName:"li",href:"/api/commands/origin"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.origin()"))),(0,i.kt)("li",{parentName:"ul"},"Programmatically authenticate with ",(0,i.kt)("a",{parentName:"li",href:"https://auth0.com"},"Auth0")," via a custom\nCypress command"),(0,i.kt)("li",{parentName:"ul"},"Adapt your ",(0,i.kt)("a",{parentName:"li",href:"https://auth0.com"},"Auth0")," application for programmatic\nauthentication during testing"))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This guide is setup for testing against an ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0")," Single\nPage Application using the\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/universal-login/classic"},"Classic Universal Login Experience"),'.\nThis configuration is recommended for a "Test Tenant" and/or "Test API" setup\nfor automated end-to-end testing.')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"Authenticate by visiting a different domain with\n",(0,i.kt)("a",{parentName:"strong",href:"/api/commands/origin"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.origin()")))),(0,i.kt)("p",{parentName:"admonition"},"Typically, logging in a user within your app by authenticating via a third-party\nprovider requires visiting a login page hosted on a different domain. Before\nCypress ",(0,i.kt)("a",{parentName:"p",href:"https://on.cypress.io/changelog#12-0-0"},"v12.0.0"),", Cypress tests were\nlimited to visiting domains of the same origin, making programmatic login the\nonly option for authenticating users with a third-party API. As of Cypress\n",(0,i.kt)("a",{parentName:"p",href:"https://on.cypress.io/changelog#12-0-0"},"v12.0.0"),", Cypress tests are no longer\nlimited to visiting domains of a single origin, meaning you can easily\nauthenticate with ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0")," via the UI!")),(0,i.kt)("h2",{id:"Auth0-Application-Setup"},"Auth0 Application Setup"),(0,i.kt)("p",null,"To get started with Auth0, an application needs to be setup within the\n",(0,i.kt)("a",{parentName:"p",href:"https://manage.auth0.com/dashboard"},"Auth0 Dashboard")," via the following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Visit the ",(0,i.kt)("a",{parentName:"li",href:"https://manage.auth0.com/dashboard"},"Auth0 Dashboard"),' and click the\n"Create Application" button.'),(0,i.kt)("li",{parentName:"ol"},"Enter the desired name for your application."),(0,i.kt)("li",{parentName:"ol"},'Select "Single Page Application"')),(0,i.kt)("p",null,"Once your application is created, visit the\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/dashboard/reference/settings-application"},"Application Settings"),"\ntab under your application, and add your local development URL and port (e.g\n",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),") under the following sections:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Allowed Callback URLs"),(0,i.kt)("li",{parentName:"ul"},"Allowed Logout URLs"),(0,i.kt)("li",{parentName:"ul"},"Allowed Web Origins"),(0,i.kt)("li",{parentName:"ul"},"Allowed Origins (CORS)")),(0,i.kt)("p",null,"In the bottom of\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/dashboard/reference/settings-application"},"Application Settings"),",\nclick\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/dashboard/reference/settings-application#advanced-settings"},"Show Advanced Settings"),',\nselect "Grant Types" tab and check "Password" (unchecked by default).'),(0,i.kt)("p",null,"Next, click your Tenant icon (upper right avatar menu) to go to your\n",(0,i.kt)("a",{parentName:"p",href:"https://manage.auth0.com/#/tenant"},"Tenant Settings"),". On the\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/dashboard/reference/settings-tenant#general"},"General"),"\ntab go to the\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/dashboard/reference/settings-tenant#api-authorization-settings"},"API Authorization Settings")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Set "Default Audience" to the Audience URL for the Application you are testing\n(e.g. ',(0,i.kt)("inlineCode",{parentName:"li"},"https://your-api-id.auth0.com/api/v2/"),")"),(0,i.kt)("li",{parentName:"ul"},'Set "Default Directory" to ',(0,i.kt)("strong",{parentName:"li"},'"Username-Password-Authentication"'))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Refer to the\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/dashboard/reference/settings-tenant"},"Auth0 Tenant Settings documentation"),"\nfor additional details.")),(0,i.kt)("p",null,"Finally, create a user in the\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/connections/database#using-the-auth0-user-store"},"Auth0 User Store"),"\nfor testing with Cypress. This testing-dedicated target user will be login to\nyour application within your test specs. If required for your testing purposes,\nyou can make as many users needed to test your specific application."),(0,i.kt)("h2",{id:"Setting-Auth0-app-credentials-in-Cypress"},"Setting Auth0 app credentials in Cypress"),(0,i.kt)("p",null,"To have access to test user credentials within our tests we need to configure\nCypress to use the ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0")," environment variables set in the\n",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file."),(0,i.kt)("cypress-config-example",null,(0,i.kt)(h,{mdxType:"CypressConfigFileTabs"},(0,i.kt)("pre",{parentName:"cypress-config-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n\nmodule.exports = defineConfig({\n  env: {\n    auth0_username: process.env.AUTH0_USERNAME,\n    auth0_password: process.env.AUTH0_PASSWORD,\n    auth0_domain: process.env.REACT_APP_AUTH0_DOMAIN,\n    auth0_audience: process.env.REACT_APP_AUTH0_AUDIENCE,\n    auth0_scope: process.env.REACT_APP_AUTH0_SCOPE,\n    auth0_client_id: process.env.REACT_APP_AUTH0_CLIENTID,\n    auth0_client_secret: process.env.AUTH0_CLIENT_SECRET,\n  },\n})\n")),(0,i.kt)("pre",{parentName:"cypress-config-example"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n// Populate process.env with values from .env file\nrequire('dotenv').config()\n\nexport default defineConfig({\n  env: {\n    auth0_username: process.env.AUTH0_USERNAME,\n    auth0_password: process.env.AUTH0_PASSWORD,\n    auth0_domain: process.env.REACT_APP_AUTH0_DOMAIN,\n    auth0_audience: process.env.REACT_APP_AUTH0_AUDIENCE,\n    auth0_scope: process.env.REACT_APP_AUTH0_SCOPE,\n    auth0_client_id: process.env.REACT_APP_AUTH0_CLIENTID,\n    auth0_client_secret: process.env.AUTH0_CLIENT_SECRET,\n  },\n})\n")))),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"auth0_client_secret")," is only needed for\n",(0,i.kt)("a",{parentName:"p",href:"#Programmatic-Login"},"programmatic login"),"."),(0,i.kt)("h2",{id:"Custom-Command-for-Auth0-Authentication"},"Custom Command for Auth0 Authentication"),(0,i.kt)("p",null,"There are two ways you can authenticate to Auth0:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#Login-with-cy-origin"},"Login with ",(0,i.kt)("inlineCode",{parentName:"a"},"cy.origin()"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#Programmatic-Login"},"Programmatic Login"))),(0,i.kt)("h3",{id:"Login-with-cyorigin"},"Login with ",(0,i.kt)("a",{parentName:"h3",href:"/api/commands/origin"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.origin()"))),(0,i.kt)("p",null,"Next, we'll write a custom command called ",(0,i.kt)("inlineCode",{parentName:"p"},"loginToAuth0")," to perform a login to\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0"),". This command will use\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/origin"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.origin()"))," to"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Navigate to the Auth0 login"),(0,i.kt)("li",{parentName:"ol"},"Input user credentials"),(0,i.kt)("li",{parentName:"ol"},"Sign in and redirect back to the\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App")),(0,i.kt)("li",{parentName:"ol"},"Cache the results with ",(0,i.kt)("a",{parentName:"li",href:"/api/commands/session"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.session()")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// cypress/support/auth-provider-commands/auth0.ts\n\nfunction loginViaAuth0Ui(username: string, password: string) {\n  // App landing page redirects to Auth0.\n  cy.visit('/')\n\n  // Login on Auth0.\n  cy.origin(\n    Cypress.env('auth0_domain'),\n    { args: { username, password } },\n    ({ username, password }) => {\n      cy.get('input#username').type(username)\n      cy.get('input#password').type(password, { log: false })\n      cy.contains('button[value=default]', 'Continue').click()\n    }\n  )\n\n  // Ensure Auth0 has redirected us back to the RWA.\n  cy.url().should('equal', 'http://localhost:3000/')\n}\n\nCypress.Commands.add('loginToAuth0', (username: string, password: string) => {\n  const log = Cypress.log({\n    displayName: 'AUTH0 LOGIN',\n    message: [`\ud83d\udd10 Authenticating | ${username}`],\n    // @ts-ignore\n    autoEnd: false,\n  })\n  log.snapshot('before')\n\n  loginViaAuth0Ui(username, password)\n\n  log.snapshot('after')\n  log.end()\n})\n")),(0,i.kt)("p",null,"Now, we can use our ",(0,i.kt)("inlineCode",{parentName:"p"},"loginToAuth0")," command in the test. Below is our test to\nlogin as a user via Auth0 and run a basic sanity check."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/tests/ui-auth-providers/auth0.spec.ts"},"runnable version of this test"),"\nis in the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('Auth0', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.intercept('POST', '/graphql').as('createBankAccount')\n    cy.loginToAuth0(\n      Cypress.env('auth0_username'),\n      Cypress.env('auth0_password')\n    )\n    cy.visit('/')\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n")),(0,i.kt)(d,{src:"https://vimeo.com/789093942",mdxType:"DocsVideo"}),(0,i.kt)("p",null,"Lastly, we can refactor our login command to take advantage of\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/session"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.session()"))," to store our logged in user so we don't\nhave to reauthenticate before every test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"Cypress.Commands.add('loginToAuth0', (username: string, password: string) => {\n  const log = Cypress.log({\n    displayName: 'AUTH0 LOGIN',\n    message: [`\ud83d\udd10 Authenticating | ${username}`],\n    // @ts-ignore\n    autoEnd: false,\n  })\n  log.snapshot('before')\n\n  cy.session(\n    `auth0-${username}`,\n    () => {\n      loginViaAuth0Ui(username, password)\n    },\n    {\n      validate: () => {\n        // Validate presence of access token in localStorage.\n        cy.wrap(localStorage)\n          .invoke('getItem', 'authAccessToken')\n          .should('exist')\n      },\n    }\n  )\n\n  log.snapshot('after')\n  log.end()\n})\n")),(0,i.kt)(d,{src:"https://vimeo.com/789093910",mdxType:"DocsVideo"}),(0,i.kt)("h3",{id:"Programmatic-Login"},"Programmatic Login"),(0,i.kt)("p",null,"Below is a command to programmatically login into ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0"),",\nusing the\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/protocols/protocol-oauth2#token-endpoint"},"/oauth/token endpoint"),"\nand set an item in ",(0,i.kt)("inlineCode",{parentName:"p"},"localStorage")," with the authenticated users details, which we\nwill use in our application code to verify we are authenticated under test."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"loginByAuth0Api")," command will execute the following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Use the\n",(0,i.kt)("a",{parentName:"li",href:"https://auth0.com/docs/protocols/protocol-oauth2#token-endpoint"},"/oauth/token endpoint"),"\nto perform the programmatic login."),(0,i.kt)("li",{parentName:"ol"},"Finally the ",(0,i.kt)("inlineCode",{parentName:"li"},"auth0Cypress")," ",(0,i.kt)("inlineCode",{parentName:"li"},"localStorage")," item is set with the\n",(0,i.kt)("inlineCode",{parentName:"li"},"access token"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"id_token")," and user profile.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// cypress/support/commands.js\nCypress.Commands.add(\n  'loginByAuth0Api',\n  (username: string, password: string) => {\n    cy.log(`Logging in as ${username}`)\n    const client_id = Cypress.env('auth0_client_id')\n    const client_secret = Cypress.env('auth0_client_secret')\n    const audience = Cypress.env('auth0_audience')\n    const scope = Cypress.env('auth0_scope')\n\n    cy.request({\n      method: 'POST',\n      url: `https://${Cypress.env('auth0_domain')}/oauth/token`,\n      body: {\n        grant_type: 'password',\n        username,\n        password,\n        audience,\n        scope,\n        client_id,\n        client_secret,\n      },\n    }).then(({ body }) => {\n      const claims = jwt.decode(body.id_token)\n      const {\n        nickname,\n        name,\n        picture,\n        updated_at,\n        email,\n        email_verified,\n        sub,\n        exp,\n      } = claims\n\n      const item = {\n        body: {\n          ...body,\n          decodedToken: {\n            claims,\n            user: {\n              nickname,\n              name,\n              picture,\n              updated_at,\n              email,\n              email_verified,\n              sub,\n            },\n            audience,\n            client_id,\n          },\n        },\n        expiresAt: exp,\n      }\n\n      window.localStorage.setItem('auth0Cypress', JSON.stringify(item))\n\n      cy.visit('/')\n    })\n  }\n)\n")),(0,i.kt)("p",null,"With our Auth0 app setup properly in the Auth0 Developer console, necessary\nenvironment variables in place, and our ",(0,i.kt)("inlineCode",{parentName:"p"},"loginByAuth0Api")," command implemented,\nwe will be able to authenticate with Auth0 while our app is under test. Below is\na test to login as a user via ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0"),", complete the\nonboarding process and logout."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"describe('Auth0', function () {\n  beforeEach(function () {\n    cy.task('db:seed')\n    cy.loginByAuth0Api(\n      Cypress.env('auth0_username'),\n      Cypress.env('auth0_password')\n    )\n  })\n\n  it('shows onboarding', function () {\n    cy.contains('Get Started').should('be.visible')\n  })\n})\n")),(0,i.kt)("h2",{id:"Adapting-an-Auth0-App-for-Testing"},"Adapting an Auth0 App for Testing"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("strong",null,"Note"),(0,i.kt)("p",{parentName:"admonition"},"The previous sections focused on the recommended Auth0 authentication practice\nwithin Cypress tests. To use this practice it is assumed you are testing an app\nappropriately built or adapted to use Auth0."),(0,i.kt)("p",{parentName:"admonition"},"The following sections provides guidance on building or adapting an app to use\nAuth0 authentication. Please note that if you are\n",(0,i.kt)("a",{parentName:"p",href:"#Login-with-cy-origin"},"logging in with ",(0,i.kt)("inlineCode",{parentName:"a"},"cy.origin()"))," and your app is already\nsuccessfully integrated with Auth0, you do not need to make any further changes\nto your app and the remainder of this guide should be regarded as purely\ninformational.")),(0,i.kt)("p",null,"The\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App")," is\nused and provides configuration and runnable code for both the React SPA and the\nExpress back end."),(0,i.kt)("p",null,"The front end uses the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/auth0/auth0-react"},"auth0-react SDK"),"\nfor React Single Page Applications (SPA), which uses the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/auth0/auth0-spa-js"},"auth0-spa-js SDK")," underneath. The back\nend uses ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/auth0/express-jwt"},"express-jwt")," to validate JWT's\nagainst ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("strong",null,"Note"),(0,i.kt)("p",{parentName:"admonition"},"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn dev:auth0")," command when starting the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),".")),(0,i.kt)("h3",{id:"Adapting-the-back-end"},"Adapting the back end"),(0,i.kt)("p",null,"In order to validate API requests from the frontend, we install\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/auth0/express-jwt"},"express-jwt")," and\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/auth0/node-jwks-rsa"},"jwks-rsa")," and configure validation for\nJWT's from ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// backend/helpers.ts\nimport jwt from 'express-jwt'\nimport jwksRsa from 'jwks-rsa'\n\ndotenv.config()\n\nconst auth0JwtConfig = {\n  secret: jwksRsa.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: `https://${process.env.REACT_APP_AUTH0_DOMAIN}/.well-known/jwks.json`,\n  }),\n\n  // Validate the audience and the issuer.\n  audience: process.env.REACT_APP_AUTH0_AUDIENCE,\n  issuer: `https://${process.env.REACT_APP_AUTH0_DOMAIN}/`,\n  algorithms: ['RS256'],\n}\n")),(0,i.kt)("p",null,"Next, we'll define an Express middleware function to be use in our routes to\nverify the ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0")," JWT sent by the front end API requests as\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Bearer")," token."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// backend/helpers.ts\n\n// ...\n\nexport const checkJwt = jwt(auth0JwtConfig).unless({ path: ['/testData/*'] })\n")),(0,i.kt)("p",null,"Once this helper is defined, we can use globally to apply to all routes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// backend/app.ts\n// initial imports ...\nimport { checkJwt } from './helpers'\n\n// ...\n\nif (process.env.REACT_APP_AUTH0) {\n  app.use(checkJwt)\n}\n\n// routes ...\n")),(0,i.kt)("h3",{id:"Adapting-the-front-end"},"Adapting the front end"),(0,i.kt)("p",null,"We need to update our front end React app to allow for authentication with\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0"),". As mentioned above, the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/auth0/auth0-react"},"auth0-react SDK")," for React Single Page\nApplications (SPA) is used."),(0,i.kt)("p",null,"First, we create a ",(0,i.kt)("inlineCode",{parentName:"p"},"AppAuth0.tsx")," container to render our application as it is\nauthenticated with ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0"),". The component is identical to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"App.tsx")," component, but uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"useAuth0")," React Hook, removes the need for\nthe Sign Up and Sign In routes and wraps the component with the\n",(0,i.kt)("inlineCode",{parentName:"p"},"withAuthenticationRequired")," higher order function (HOC)."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," hook is added to get the access token for the authenticated user\nand send an ",(0,i.kt)("inlineCode",{parentName:"p"},"AUTH0")," event with the ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"token")," objects to work with the\nexisting authentication layer (",(0,i.kt)("inlineCode",{parentName:"p"},"authMachine.ts"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// src/containers/AppAuth0.tsx\n\n// initial imports ...\n\nimport { withAuthenticationRequired, useAuth0 } from '@auth0/auth0-react'\n\n// ...\n\nconst AppAuth0 = () => {\n  const { isAuthenticated, user, getAccessTokenSilently } = useAuth0()\n\n  // ...\n\n  useEffect(() => {\n    ;(async function waitForToken() {\n      const token = await getAccessTokenSilently()\n      authService.send('AUTH0', { user, token })\n    })()\n  }, [user, getAccessTokenSilently])\n\n  // ...\n\n  const isLoggedIn =\n    isAuthenticated &&\n    (authState.matches('authorized') ||\n      authState.matches('refreshing') ||\n      authState.matches('updating'))\n\n  return <div className={classes.root}>// ...</div>\n}\n\nexport default withAuthenticationRequired(AppAuth0)\n")),(0,i.kt)("p",null,"Note: The full\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppAuth0.tsx"},"AppAuth0.tsx component"),"\nis in the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),"."),(0,i.kt)("p",null,"Next, we update our entry point (",(0,i.kt)("inlineCode",{parentName:"p"},"index.tsx"),") to wrap our application with the\n",(0,i.kt)("inlineCode",{parentName:"p"},"<Auth0Provider>")," from the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/auth0/auth0-react"},"auth0-react SDK")," SDK providing a custom\n",(0,i.kt)("inlineCode",{parentName:"p"},"onRedirectCallback"),". We pass props for the Auth0 environment variables set in\n",(0,i.kt)("inlineCode",{parentName:"p"},".env")," above, and render our ",(0,i.kt)("inlineCode",{parentName:"p"},"<AppAuth0>")," component as the application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'// src/index.tsx\n\n// initial imports ...\n\nimport AppAuth0 from "./containers/AppAuth0";\n\n// ..\n\nconst onRedirectCallback = (appState: any) => {\n  history.replace((appState && appState.returnTo) || window.location.pathname);\n};\n\nif (process.env.REACT_APP_AUTH0) {\n  ReactDOM.render(\n    <Auth0Provider\n      domain={process.env.REACT_APP_AUTH0_DOMAIN!}\n      clientId={process.env.REACT_APP_AUTH0_CLIENTID!}\n      redirectUri={window.location.origin}\n      audience={process.env.REACT_APP_AUTH0_AUDIENCE}\n      scope={process.env.REACT_APP_AUTH0_SCOPE}\n      onRedirectCallback={onRedirectCallback}\n    >\n      <Router history={history}>\n        <ThemeProvider theme={theme}>\n          <AppAuth0 />\n        </ThemeProvider>\n      </Router>\n    </Auth0Provider>,\n    document.getElementById("root")\n  );\n} else {\n  // render passport-local App.tsx\n}\n')),(0,i.kt)("p",null,"An update to our\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppAuth0.tsx"},"AppAuth0.tsx component"),"\nis needed to conditionally use the ",(0,i.kt)("inlineCode",{parentName:"p"},"auth0Cypress")," ",(0,i.kt)("inlineCode",{parentName:"p"},"localStorage")," item."),(0,i.kt)("p",null,"In the code below, we conditionally apply a ",(0,i.kt)("inlineCode",{parentName:"p"},"useEffect")," block based on being\nunder test with Cypress (using ",(0,i.kt)("inlineCode",{parentName:"p"},"window.Cypress"),")."),(0,i.kt)("p",null,"In addition, we will update the export to be wrapped with\n",(0,i.kt)("inlineCode",{parentName:"p"},"withAuthenticationRequired")," if we are not under test in Cypress. This allows\nour application to work with the ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com"},"Auth0")," redirect login flow\nin development/production but not when under test in Cypress."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'// src/containers/AppAuth0.tsx\n\n// initial imports ...\n\nimport { withAuthenticationRequired, useAuth0 } from "@auth0/auth0-react";\n\n// ...\n\nconst AppAuth0 = () => {\n  const { isAuthenticated, user, getAccessTokenSilently } = useAuth0();\n\n  // ...\n\n  useEffect(() => {\n      (async function waitForToken() {\n        const token = await getAccessTokenSilently();\n        authService.send("AUTH0", { user, token });\n      })();\n    }, [user, getAccessTokenSilently]);\n\n  // If under test in Cypress, get credentials from "auth0Cypress" localstorage item and send event to our state management to log the user into the SPA\n  if (window.Cypress) {\n    useEffect(() => {\n      const auth0 = JSON.parse(localStorage.getItem("auth0Cypress")!);\n      authService.send("AUTH0", {\n        user: auth0.body.decodedToken.user,\n        token: auth0.body.access_token,\n      });\n    }, []);\n  } else {\n    useEffect(() => {\n      (async function waitForToken() {\n        const token = await getAccessTokenSilently();\n        authService.send("AUTH0", { user, token });\n      })();\n    }, [isAuthenticated, user, getAccessTokenSilently]);\n  }\n\n  // ...\n\n  const isLoggedIn =\n    isAuthenticated &&\n    (authState.matches("authorized") ||\n      authState.matches("refreshing") ||\n      authState.matches("updating"));\n\n  return (\n    <div className={classes.root}>\n      // ...\n    </div>\n  );\n};\n\n// Conditional export wrapped with `withAuthenticationRequired` if we are not under test in Cypress.\nlet appAuth0 = window.Cypress ? AppAuth0 : withAuthenticationRequired(AppAuth0);\nexport default appAuth0\n')),(0,i.kt)("h2",{id:"Auth0-Rate-Limiting-Logins"},"Auth0 Rate Limiting Logins"),(0,i.kt)("p",null,"Be aware of the rate limit statement in the Auth0 documentation:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/connections/database/rate-limits"},"Auth0 Rate Limit"),' -\n"If a user attempts to login 20 times per minute as the same user from the same\nlocation, regardless of having the correct credentials, the rate limit will come\ninto effect. When this happens, the user can make 10 attempts per minute."'),(0,i.kt)("p",null,"This limit can be reached as the size of a test suite grows along with enabling\n",(0,i.kt)("a",{parentName:"p",href:"https://on.cypress.io/parallelization"},"parallelized runs")," to speed up test run\nduration."),(0,i.kt)("p",null,"If you run into this rate limit, a programmatic approach can be added to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"loginByAuth0")," command to clear a blocked IP prior to the test run."),(0,i.kt)("p",null,"Next you'll need to obtain a\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/api/management/v2/tokens"},"API token")," to interact with\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/api/management/v2"},"Auth0 Management API"),". This token\nis a JSON Web Token (JWT) and it contains specific granted permissions for the\nAPI."),(0,i.kt)("p",null,"Add this token as environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"AUTH0_MGMT_API_TOKEN")," to our\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"Cypress Real World App"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},".env")," with your API token."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// .env\n// ... additional keys\nAUTH0_MGMT_API_TOKEN = 'YOUR-MANAGEMENT-API-TOKEN'\n")),(0,i.kt)("p",null,"With this token in place, we can add interaction with the\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/api/management/v2#!/Anomaly/delete_ips_by_id"},"Auth0 Anomaly remove the blocked IP address endpoint"),"\nto our ",(0,i.kt)("inlineCode",{parentName:"p"},"loginByAuth0Api")," command. This will send a delete request to\n",(0,i.kt)("a",{parentName:"p",href:"https://auth0.com/docs/api/management/v2"},"Auth0 Management API")," anomaly\nendpoint to unblock an IP that may become blocked during the test run."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("strong",null,"Tip"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"http://icanhazip.com/"},"icanhazip.com")," is a free, hosted service to find a\nsystem's current external IP address.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"Cypress.Commands.add('loginByAuth0Api', (username, password) => {\n  // Useful when rate limited by Auth0\n  cy.exec('curl -4 icanhazip.com')\n    .its('stdout')\n    .then((ip) => {\n      cy.request({\n        method: 'DELETE',\n        url: `https://${Cypress.env(\n          'auth0_domain'\n        )}/api/v2/anomaly/blocks/ips/${ip}`,\n        auth: {\n          bearer: Cypress.env('auth0_mgmt_api_token'),\n        },\n      })\n    })\n\n  // ... remaining loginByAuth0Api command\n})\n")))}g.isMDXComponent=!0}}]);