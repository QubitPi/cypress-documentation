"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[3862],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=s,m=d["".concat(o,".").concat(h)]||d[h]||p[h]||l;return n?a.createElement(m,r(r({ref:t},u),{},{components:n})):a.createElement(m,r({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var l=n.length,r=new Array(l);r[0]=h;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[d]="string"==typeof e?e:s,r[1]=i;for(var c=2;c<l;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8228:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>k,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=n(7462),s=(n(7294),n(3905));const l={title:"should",sidebar_position:30,slug:"/api/commands/should"},r=void 0,i={unversionedId:"api/assertions/should",id:"api/assertions/should",title:"should",description:"Create an assertion. Assertions are automatically retried until they pass or",source:"@site/docs/api/assertions/should.mdx",sourceDirName:"api/assertions",slug:"/api/commands/should",permalink:"/cypress-documentation/api/commands/should",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/assertions/should.mdx",tags:[],version:"current",lastUpdatedAt:1698908846,formattedLastUpdatedAt:"Nov 2, 2023",sidebarPosition:30,frontMatter:{title:"should",sidebar_position:30,slug:"/api/commands/should"},sidebar:"api",previous:{title:"and",permalink:"/cypress-documentation/api/commands/and"},next:{title:"Actionability Guide",permalink:"/cypress-documentation/api/actions/actionability-guide"}},o={},c=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Arguments",id:"Arguments",level:3},{value:'Yields <Icon name="question-circle"/>',id:"Yields",level:3},{value:"Examples",id:"Examples",level:2},{value:"Chainers",id:"Chainers",level:3},{value:"Assert the checkbox is disabled",id:"Assert-the-checkbox-is-disabled",level:4},{value:"The current DOM element is yielded",id:"The-current-DOM-element-is-yielded",level:4},{value:"Value",id:"Value",level:3},{value:"Assert the class is &#39;form-horizontal&#39;",id:"Assert-the-class-is-form-horizontal",level:4},{value:"Assert the value is not &#39;Jane&#39;",id:"Assert-the-value-is-not-Jane",level:4},{value:"The current subject is yielded",id:"The-current-subject-is-yielded",level:4},{value:"Method and Value",id:"Method-and-Value",level:3},{value:"Assert the anchor element has href attribute",id:"Assert-the-anchor-element-has-href-attribute",level:4},{value:"Assert the href attribute is equal to &#39;/users&#39;",id:"Assert-the-href-attribute-is-equal-to-users",level:4},{value:"Focus",id:"Focus",level:3},{value:"Assert an input is focused after button click",id:"Assert-an-input-is-focused-after-button-click",level:4},{value:"Function",id:"Function",level:3},{value:"Verify length, content, and classes from multiple <code>&lt;p&gt;</code>",id:"Verify-length-content-and-classes-from-multiple-p",level:4},{value:"Assert class name contains <code>heading-</code>",id:"Assert-class-name-contains-heading-",level:4},{value:"Assert text content of 3 elements",id:"Assert-text-content-of-3-elements",level:4},{value:"Compare text values of two elements",id:"Compare-text-values-of-two-elements",level:4},{value:"Multiple Assertions",id:"Multiple-Assertions",level:3},{value:"Chaining multiple assertions",id:"Chaining-multiple-assertions",level:4},{value:"Wait until the assertions pass",id:"Wait-until-the-assertions-pass",level:3},{value:"Notes",id:"Notes",level:2},{value:"Subjects",id:"Subjects",level:3},{value:"How do I know which assertions change the subject and which keep it the same?",id:"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same",level:4},{value:"Using a callback function will not change what is yielded",id:"Using-a-callback-function-will-not-change-what-is-yielded",level:4},{value:"Differences",id:"Differences",level:3},{value:"Rules",id:"Rules",level:2},{value:'Requirements <Icon name="question-circle"/>',id:"Requirements",level:3},{value:'Timeouts <Icon name="question-circle"/>',id:"Timeouts",level:3},{value:"Command Log",id:"Command-Log",level:2},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",t)},d=u("Icon"),p=u("DocsImage"),h=u("ThenShouldAndDifference"),m={toc:c};function k(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Create an assertion. Assertions are automatically retried until they pass or\ntime out."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"An alias of ",(0,s.kt)("a",{parentName:"p",href:"/api/commands/and"},(0,s.kt)("inlineCode",{parentName:"a"},".and()")))),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Note:")," ",(0,s.kt)("inlineCode",{parentName:"p"},".should()")," assumes you are already familiar with core concepts such\nas ",(0,s.kt)("a",{parentName:"p",href:"/guides/core-concepts/introduction-to-cypress#Assertions"},"assertions"))),(0,s.kt)("h2",{id:"Syntax"},"Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},".should(chainers)\n.should(chainers, value)\n.should(chainers, method, value)\n.should(callbackFn)\n")),(0,s.kt)("h3",{id:"Usage"},"Usage"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," Correct Usage")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('.error').should('be.empty') // Assert that '.error' is empty\ncy.contains('Login').should('be.visible') // Assert that el is visible\ncy.wrap({ foo: 'bar' }).its('foo').should('eq', 'bar') // Assert the 'foo' property equals 'bar'\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Incorrect Usage")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.should('eq', '42') // Should not be chained off 'cy'\n")),(0,s.kt)("h3",{id:"Arguments"},"Arguments"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"angle-right",mdxType:"Icon"})," chainers")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(String)"))),(0,s.kt)("p",null,"Any valid chainer that comes from ",(0,s.kt)("a",{parentName:"p",href:"/guides/references/assertions#Chai"},"Chai")," or\n",(0,s.kt)("a",{parentName:"p",href:"/guides/references/assertions#Chai-jQuery"},"Chai-jQuery")," or\n",(0,s.kt)("a",{parentName:"p",href:"/guides/references/assertions#Sinon-Chai"},"Sinon-Chai"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"angle-right",mdxType:"Icon"})," value")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(String)"))),(0,s.kt)("p",null,"Value to assert against chainer."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"angle-right",mdxType:"Icon"})," method")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(String)"))),(0,s.kt)("p",null,"A method to be called on the chainer."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"angle-right",mdxType:"Icon"})," callbackFn")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(Function)"))),(0,s.kt)("p",null,"Pass a function that can have any number of explicit assertions within it.\nWhatever was passed to the function is what is yielded."),(0,s.kt)("h3",{id:"Yields"},"Yields ",(0,s.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Subject-Management"},(0,s.kt)(d,{name:"question-circle",mdxType:"Icon"}))),(0,s.kt)("p",null,"In most cases, ",(0,s.kt)("inlineCode",{parentName:"p"},".should()")," yields the same subject it was given from the\nprevious command."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('nav') // yields <nav>\n  .should('be.visible') // yields <nav>\n")),(0,s.kt)("p",null,"However, some chainers change the subject. In the example below, the second\n",(0,s.kt)("inlineCode",{parentName:"p"},".should()")," yields the string ",(0,s.kt)("inlineCode",{parentName:"p"},"sans-serif")," because the chainer\n",(0,s.kt)("inlineCode",{parentName:"p"},"have.css, 'font-family'")," changes the subject."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('nav') // yields <nav>\n  .should('be.visible') // yields <nav>\n  .should('have.css', 'font-family') // yields 'sans-serif'\n  .and('match', /serif/) // yields 'sans-serif'\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},".should()")," is an assertion, and it is ",(0,s.kt)("em",{parentName:"p"},"safe")," to chain further commands that use\nthe subject."),(0,s.kt)("h2",{id:"Examples"},"Examples"),(0,s.kt)("h3",{id:"Chainers"},"Chainers"),(0,s.kt)("h4",{id:"Assert-the-checkbox-is-disabled"},"Assert the checkbox is disabled"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get(':checkbox').should('be.disabled')\n")),(0,s.kt)("h4",{id:"The-current-DOM-element-is-yielded"},"The current DOM element is yielded"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('option:first')\n  .should('be.selected')\n  .then(($option) => {\n    // $option is yielded\n  })\n")),(0,s.kt)("h3",{id:"Value"},"Value"),(0,s.kt)("h4",{id:"Assert-the-class-is-form-horizontal"},"Assert the class is 'form-horizontal'"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('form').should('have.class', 'form-horizontal')\n")),(0,s.kt)("h4",{id:"Assert-the-value-is-not-Jane"},"Assert the value is not 'Jane'"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('input').should('not.have.value', 'Jane')\n")),(0,s.kt)("h4",{id:"The-current-subject-is-yielded"},"The current subject is yielded"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('button')\n  .should('have.id', 'new-user')\n  .then(($button) => {\n    // $button is yielded\n  })\n")),(0,s.kt)("h3",{id:"Method-and-Value"},"Method and Value"),(0,s.kt)("h4",{id:"Assert-the-anchor-element-has-href-attribute"},"Assert the anchor element has href attribute"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// have.attr comes from chai-jquery\ncy.get('#header a').should('have.attr', 'href')\n")),(0,s.kt)("h4",{id:"Assert-the-href-attribute-is-equal-to-users"},"Assert the href attribute is equal to '/users'"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('#header a').should('have.attr', 'href', '/users')\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," the ",(0,s.kt)("inlineCode",{parentName:"p"},"have.attr")," assertion changes the subject from the original\nelement to the attribute's value"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('#header a') // yields the element\n  .should('have.attr', 'href') // yields the \"href\" attribute\n  .and('equal', '/users') // checks the \"href\" value\n")),(0,s.kt)("h3",{id:"Focus"},"Focus"),(0,s.kt)("h4",{id:"Assert-an-input-is-focused-after-button-click"},"Assert an input is focused after button click"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('#btn-focuses-input').click()\ncy.get('#input-receives-focus').should('have.focus') // equivalent to should('be.focused')\n")),(0,s.kt)("h3",{id:"Function"},"Function"),(0,s.kt)("p",null,"Passing a function to ",(0,s.kt)("inlineCode",{parentName:"p"},".should()")," enables you to make multiple assertions on the\nyielded subject. This also gives you the opportunity to ",(0,s.kt)("em",{parentName:"p"},"massage")," what you'd\nlike to assert on."),(0,s.kt)("p",null,"Be sure ",(0,s.kt)("em",{parentName:"p"},"not")," to include any code that has side effects in your callback\nfunction. The callback function will be retried over and over again until no\nassertions within it throw."),(0,s.kt)("p",null,"You cannot invoke Cypress commands inside of a ",(0,s.kt)("inlineCode",{parentName:"p"},".should()")," callback function.\nUse Cypress commands before or after ",(0,s.kt)("inlineCode",{parentName:"p"},".should()")," instead."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Incorrect Usage")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('p').should(($p) => {\n  cy.log($p)\n  // ...\n})\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," Correct Usage")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('p')\n  .should(($p) => {\n    // ...\n  })\n  .log()\n\n// or\n\ncy.get('p').then(($p) => {\n  // ...\n  cy.log($p)\n})\n")),(0,s.kt)("h4",{id:"Verify-length-content-and-classes-from-multiple-p"},"Verify length, content, and classes from multiple ",(0,s.kt)("inlineCode",{parentName:"h4"},"<p>")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<div>\n  <p class="text-primary">Hello World</p>\n  <p class="text-danger">You have an error</p>\n  <p class="text-default">Try again later</p>\n</div>\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('p').should(($p) => {\n  // should have found 3 elements\n  expect($p).to.have.length(3)\n\n  // make sure the first contains some text content\n  expect($p.first()).to.contain('Hello World')\n\n  // use jquery's map to grab all of their classes\n  // jquery's map returns a new jquery object\n  const classes = $p.map((i, el) => {\n    return Cypress.$(el).attr('class')\n  })\n\n  // call classes.get() to make this a plain array\n  expect(classes.get()).to.deep.eq([\n    'text-primary',\n    'text-danger',\n    'text-default',\n  ])\n})\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Warning")," Any value returned\nfrom a ",(0,s.kt)("inlineCode",{parentName:"p"},".should()")," callback function will be ignored. The original subject will\nbe yielded to the next command."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"cy.get('p')\n  .should(($p) => {\n    expect($p).to.have.length(3)\n\n    return 'foo'\n  })\n  .then(($p) => {\n    // the argument $p will be the 3 elements, not \"foo\"\n  })\n")),(0,s.kt)("h4",{id:"Assert-class-name-contains-heading-"},"Assert class name contains ",(0,s.kt)("inlineCode",{parentName:"h4"},"heading-")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<div class="docs-header">\n  <div class="main-abc123 heading-xyz987">Introduction</div>\n</div>\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"cy.get('.docs-header')\n  .find('div')\n  // .should(cb) callback function will be retried\n  .should(($div) => {\n    expect($div).to.have.length(1)\n\n    const className = $div[0].className\n\n    expect(className).to.match(/heading-/)\n  })\n  // .then(cb) callback is not retried,\n  // it either passes or fails\n  .then(($div) => {\n    expect($div).to.have.text('Introduction')\n  })\n")),(0,s.kt)("p",null,"You can even throw your own errors from the callback function."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"cy.get('.docs-header')\n  .find('div')\n  .should(($div) => {\n    if ($div.length !== 1) {\n      // you can throw your own errors\n      throw new Error('Did not find 1 element')\n    }\n\n    const className = $div[0].className\n\n    if (!className.match(/heading-/)) {\n      throw new Error(`No class \"heading-\" in ${className}`)\n    }\n  })\n")),(0,s.kt)("h4",{id:"Assert-text-content-of-3-elements"},"Assert text content of 3 elements"),(0,s.kt)("p",null,"Example below first asserts that there are 3 elements, and then checks the text\ncontent of each one."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<ul class="connectors-list">\n  <li>Walk the dog</li>\n  <li>Feed the cat</li>\n  <li>Write JavaScript</li>\n</ul>\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('.connectors-list > li').should(($lis) => {\n  expect($lis).to.have.length(3)\n  expect($lis.eq(0)).to.contain('Walk the dog')\n  expect($lis.eq(1)).to.contain('Feed the cat')\n  expect($lis.eq(2)).to.contain('Write JavaScript')\n})\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Read\n",(0,s.kt)("a",{parentName:"p",href:"https://glebbahmutov.com/blog/cypress-should-callback/"},"Cypress should callback"),"\nblog post to see more variations of the above example.")),(0,s.kt)("p",null,"For clarity you can pass a string message as a second argument to any ",(0,s.kt)("inlineCode",{parentName:"p"},"expect"),"\nassertion, see ",(0,s.kt)("a",{parentName:"p",href:"https://www.chaijs.com/guide/styles/#expect"},"Chai#expect"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('.connectors-list > li').should(($lis) => {\n  expect($lis, '3 items').to.have.length(3)\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog')\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat')\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript')\n})\n")),(0,s.kt)("p",null,"These string messages will be shown in the Command Log giving each assertion\nmore context."),(0,s.kt)(p,{src:"/img/api/should/expect-with-message.png",alt:"Expect assertions with messages",mdxType:"DocsImage"}),(0,s.kt)("h4",{id:"Compare-text-values-of-two-elements"},"Compare text values of two elements"),(0,s.kt)("p",null,"The example below gets the text contained within one element and saves it in a\nclosure variable. Then the test gets the text in another element and asserts\nthat the two text values are the same after normalizing."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<div class="company-details">\n  <div class="title">Acme Developers</div>\n  <div class="identifier">ACMEDEVELOPERS</div>\n</div>\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const normalizeText = (s) => s.replace(/\\s/g, '').toLowerCase()\n\n// will keep text from title element\nlet titleText\n\ncy.get('.company-details')\n  .find('.title')\n  .then(($title) => {\n    // save text from the first element\n    titleText = normalizeText($title.text())\n  })\n\ncy.get('.company-details')\n  .find('.identifier')\n  .should(($identifier) => {\n    // we can massage text before comparing\n    const idText = normalizeText($identifier.text())\n\n    // text from the title element should already be set\n    expect(idText, 'ID').to.equal(titleText)\n  })\n")),(0,s.kt)("h3",{id:"Multiple-Assertions"},"Multiple Assertions"),(0,s.kt)("h4",{id:"Chaining-multiple-assertions"},"Chaining multiple assertions"),(0,s.kt)("p",null,"Cypress makes it easier to chain assertions together."),(0,s.kt)("p",null,"In this example we use ",(0,s.kt)("a",{parentName:"p",href:"/api/commands/and"},(0,s.kt)("inlineCode",{parentName:"a"},".and()"))," which is identical to\n",(0,s.kt)("inlineCode",{parentName:"p"},".should()"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// our subject is not changed by our first assertion,\n// so we can continue to use DOM based assertions\ncy.get('option:first').should('be.selected').and('have.value', 'Metallica')\n")),(0,s.kt)("h3",{id:"Wait-until-the-assertions-pass"},"Wait until the assertions pass"),(0,s.kt)("p",null,"Cypress won't resolve your commands until all of its assertions pass."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// Application Code\n$('button').click(function () {\n  $button = $(this)\n\n  setTimeout(() => {\n    $button.removeClass('inactive').addClass('active')\n  }, 1000)\n})\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('button')\n  .click()\n  .should('have.class', 'active')\n  .and('not.have.class', 'inactive')\n")),(0,s.kt)("h2",{id:"Notes"},"Notes"),(0,s.kt)("h3",{id:"Subjects"},"Subjects"),(0,s.kt)("h4",{id:"How-do-I-know-which-assertions-change-the-subject-and-which-keep-it-the-same"},"How do I know which assertions change the subject and which keep it the same?"),(0,s.kt)("p",null,"The chainers that come from ",(0,s.kt)("a",{parentName:"p",href:"/guides/references/bundled-libraries#Chai"},"Chai")," or\n",(0,s.kt)("a",{parentName:"p",href:"/guides/references/bundled-libraries#Chai-jQuery"},"Chai-jQuery")," will always\ndocument what they return."),(0,s.kt)("h4",{id:"Using-a-callback-function-will-not-change-what-is-yielded"},"Using a callback function will not change what is yielded"),(0,s.kt)("p",null,"Whatever is returned in the function is ignored. Cypress always forces the\ncommand to yield the value from the previous cy command's yield (which in the\nexample below is ",(0,s.kt)("inlineCode",{parentName:"p"},"<button>"),")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('button')\n  .should(($button) => {\n    expect({ foo: 'bar' }).to.deep.eq({ foo: 'bar' })\n\n    return { foo: 'bar' } // return is ignored, .should() yields <button>\n  })\n  .then(($button) => {\n    // do anything we want with <button>\n  })\n")),(0,s.kt)("h3",{id:"Differences"},"Differences"),(0,s.kt)(h,{mdxType:"ThenShouldAndDifference"}),(0,s.kt)("h2",{id:"Rules"},"Rules"),(0,s.kt)("h3",{id:"Requirements"},"Requirements ",(0,s.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Chains-of-Commands"},(0,s.kt)(d,{name:"question-circle",mdxType:"Icon"}))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},".should()")," requires being chained off a previous command.")),(0,s.kt)("h3",{id:"Timeouts"},"Timeouts ",(0,s.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Timeouts"},(0,s.kt)(d,{name:"question-circle",mdxType:"Icon"}))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},".should()")," will continue to ",(0,s.kt)("a",{parentName:"li",href:"/guides/core-concepts/retry-ability"},"retry")," its\nspecified assertions until it times out.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('input', { timeout: 10000 }).should('have.value', '10')\n// timeout here will be passed down to the '.should()'\n// and it will retry for up to 10 secs\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('input', { timeout: 10000 }).should(($input) => {\n  // timeout here will be passed down to the '.should()'\n  // unless an assertion throws earlier,\n  // ALL of the assertions will retry for up to 10 secs\n  expect($input).to.not.be('disabled')\n  expect($input).to.not.have.class('error')\n  expect($input).to.have.value('US')\n})\n")),(0,s.kt)("h2",{id:"Command-Log"},"Command Log"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Assert that there should be 8 children in a nav"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('.left-nav>.nav').children().should('have.length', 8)\n")),(0,s.kt)("p",null,"The commands above will display in the Command Log as:"),(0,s.kt)(p,{src:"/img/api/should/should-command-shows-up-as-assert-for-each-assertion.png",alt:"Command Log should",mdxType:"DocsImage"}),(0,s.kt)("p",null,"When clicking on ",(0,s.kt)("inlineCode",{parentName:"p"},"assert")," within the command log, the console outputs the\nfollowing:"),(0,s.kt)(p,{src:"/img/api/should/assertion-in-console-log-shows-actual-versus-expected-data.png",alt:"Console Log should",mdxType:"DocsImage"}),(0,s.kt)("h2",{id:"History"},"History"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Version"),(0,s.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/guides/references/changelog#11-0-0"},"11.0.0")),(0,s.kt)("td",{parentName:"tr",align:null},"Throw error if Cypress command used in callback")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/guides/references/changelog#0-11-4"},"0.11.4")),(0,s.kt)("td",{parentName:"tr",align:null},"Allows callback function argument")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/guides/references/changelog#0-3-3"},"< 0.3.3")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},".should()")," command added")))),(0,s.kt)("h2",{id:"See-also"},"See also"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/commands/and"},(0,s.kt)("inlineCode",{parentName:"a"},".and()"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/guides/core-concepts/introduction-to-cypress#Assertions"},"Guide: Introduction to Cypress")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/guides/references/assertions"},"Reference: List of Assertions")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://example.cypress.io/commands/assertions"},"cypress-example-kitchensink Assertions"))))}k.isMDXComponent=!0}}]);