"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[5223],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=l(n),u=i,h=c["".concat(p,".").concat(u)]||c[u]||m[u]||o;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[c]="string"==typeof e?e:i,s[1]=r;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9151:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=n(7462),i=(n(7294),n(3905));const o={title:"Writing Your First E2E Test",sidebar_position:10,slug:"/guides/end-to-end-testing/writing-your-first-end-to-end-test"},s=void 0,r={unversionedId:"guides/end-to-end-testing/introduction/writing-your-first-end-to-end-test",id:"guides/end-to-end-testing/introduction/writing-your-first-end-to-end-test",title:"Writing Your First E2E Test",description:"What you'll learn",source:"@site/docs/guides/end-to-end-testing/introduction/writing-your-first-end-to-end-test.mdx",sourceDirName:"guides/end-to-end-testing/introduction",slug:"/guides/end-to-end-testing/writing-your-first-end-to-end-test",permalink:"/cypress-documentation/guides/end-to-end-testing/writing-your-first-end-to-end-test",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/end-to-end-testing/introduction/writing-your-first-end-to-end-test.mdx",tags:[],version:"current",lastUpdatedAt:1697461007,formattedLastUpdatedAt:"Oct 16, 2023",sidebarPosition:10,frontMatter:{title:"Writing Your First E2E Test",sidebar_position:10,slug:"/guides/end-to-end-testing/writing-your-first-end-to-end-test"},sidebar:"guides",previous:{title:"Opening the App",permalink:"/cypress-documentation/guides/getting-started/opening-the-app"},next:{title:"Testing Your App",permalink:"/cypress-documentation/guides/end-to-end-testing/testing-your-app"}},p={},l=[{value:"Add a test file",id:"Add-a-test-file",level:2},{value:"Write your first test",id:"Write-your-first-test",level:2},{value:"Write a <em>real</em> test",id:"Write-a-real-test",level:2},{value:'<Icon name="globe" /> Step 1: Visit a page',id:"Step-1-Visit-a-page",level:3},{value:'<Icon name="search" /> Step 2: Query for an element',id:"Step-2-Query-for-an-element",level:3},{value:'<Icon name="mouse-pointer" /> Step 3: Click an element',id:"Step-3-Click-an-element",level:3},{value:'<Icon name="check-square" /> Step 4: Make an assertion',id:"Step-4-Make-an-assertion",level:3},{value:"Adding more commands and assertions",id:"Adding-more-commands-and-assertions",level:4},{value:"Record Tests with Cypress Studio",id:"Record-Tests-with-Cypress-Studio",level:2},{value:"Next steps",id:"Next-steps",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},c=d("Icon"),m=d("DocsImage"),u=d("DocsVideo"),h=d("IntellisenseCodeCompletion"),k={toc:l};function g(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("h2",{parentName:"admonition",id:"What-youll-learn"},(0,i.kt)(c,{name:"graduation-cap",mdxType:"Icon"})," What you'll learn"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"How to start testing a new project in Cypress."),(0,i.kt)("li",{parentName:"ul"},"What passing and failing tests look like."),(0,i.kt)("li",{parentName:"ul"},"Testing web navigation, DOM querying, and writing assertions."))),(0,i.kt)("h2",{id:"Add-a-test-file"},"Add a test file"),(0,i.kt)("p",null,"Assuming you've successfully\n",(0,i.kt)("a",{parentName:"p",href:"/guides/getting-started/installing-cypress"},"installed Cypress")," and\n",(0,i.kt)("a",{parentName:"p",href:"/guides/getting-started/opening-the-app"},"opened Cypress"),", now it's time to add\nyour first test. We're going to do this with the ",(0,i.kt)("strong",null,"Create new empty\nspec")," button."),(0,i.kt)(m,{src:"/img/guides/end-to-end-testing/writing-your-first-end-to-end-test/create-new-empty-spec.png",alt:"Cypress with the Create new empty spec button highlighted",mdxType:"DocsImage"}),(0,i.kt)("p",null,"On clicking it, you should see a dialog where you can enter the name of your new\nspec. Just accept the default name for now."),(0,i.kt)(m,{src:"/img/guides/end-to-end-testing/writing-your-first-end-to-end-test/enter-path-for-new-spec.png",alt:"The new spec path dialog",mdxType:"DocsImage"}),(0,i.kt)("p",null,"The newly-generated spec is displayed in a confirmation dialog. Just go ahead\nand close it with the \u2715 button."),(0,i.kt)(m,{src:"/img/guides/end-to-end-testing/writing-your-first-end-to-end-test/new-spec-added-confirmation.png",alt:"The new spec confirmation dialog",mdxType:"DocsImage"}),(0,i.kt)("p",null,"Once we've created that file, you should see it immediately displayed in the\nlist of end-to-end specs. Cypress monitors your spec files for any changes and\nautomatically displays any changes."),(0,i.kt)(m,{src:"/img/guides/end-to-end-testing/writing-your-first-end-to-end-test/spec-list-with-new-spec.png",alt:"Cypress showing the spec list with the newly created spec",mdxType:"DocsImage"}),(0,i.kt)("p",null,"Even though we haven't written any code yet - that's okay - let's click on your\nnew spec and watch Cypress launch it. Spoiler alert: it's probably going to\n",(0,i.kt)("strong",{parentName:"p"},"FAIL"),". Don't worry, it's just because you haven't set up Cypress to visit a\npage in your app yet! Let's try something different."),(0,i.kt)("h2",{id:"Write-your-first-test"},"Write your first test"),(0,i.kt)("p",null,"Now it's time to write your first test. We're going to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Write your first passing test."),(0,i.kt)("li",{parentName:"ol"},"Update it so it fails."),(0,i.kt)("li",{parentName:"ol"},"Watch Cypress reload in real time.")),(0,i.kt)("p",null,"Open up your favorite IDE and replace the contents of your spec with the code\nbelow."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('My First Test', () => {\n  it('Does not do much!', () => {\n    expect(true).to.equal(true)\n  })\n})\n")),(0,i.kt)("p",null,"Once you save this change you should see the browser reload."),(0,i.kt)("p",null,"Although it doesn't do anything useful, this is our first passing test! \u2705"),(0,i.kt)("p",null,"Over in the ",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/cypress-app#Command-Log"},"Command Log")," you'll\nsee Cypress display the suite, the test and your first assertion (which should\nbe passing in green)."),(0,i.kt)(m,{src:"/img/guides/getting-started/e2e/v10/first-test.png",alt:"My first test shown passing in Cypress",mdxType:"DocsImage"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Notice Cypress displays a message about this being the default page\n",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/cypress-app#Application-Under-Test"},"on the righthand side"),".\nCypress assumes you'll want to go out and ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/visit"},"visit")," a URL on\nthe internet - but it can also work just fine without that.")),(0,i.kt)("p",null,"Now let's write our first failing test."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('My First Test', () => {\n  it('Does not do much!', () => {\n    expect(true).to.equal(false)\n  })\n})\n")),(0,i.kt)("p",null,"Once you save again, you'll see Cypress display the failing test in red since\n",(0,i.kt)("inlineCode",{parentName:"p"},"true")," does not equal ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"Cypress also displays the stack trace and the code frame where the assertion\nfailed (when available). You can click on the blue file link to open the file\nwhere the error occurred in\n",(0,i.kt)("a",{parentName:"p",href:"/guides/tooling/IDE-integration#File-Opener-Preference"},"your preferred file opener"),".\nTo read more about the error's display, read about\n",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/debugging#Errors"},"Debugging Errors"),"."),(0,i.kt)(m,{src:"/img/guides/getting-started/e2e/v10/first-test-failing.png",alt:"Failing test",mdxType:"DocsImage"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/cypress-app"},"Cypress")," gives you a visual structure of\nsuites, tests, and assertions. Soon you'll also see commands, page events,\nnetwork requests, and more."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"What are ",(0,i.kt)("em",{parentName:"strong"},"describe"),", ",(0,i.kt)("em",{parentName:"strong"},"it"),", and ",(0,i.kt)("em",{parentName:"strong"},"expect")," ?")),(0,i.kt)("p",{parentName:"admonition"},"All of these functions come from\n",(0,i.kt)("a",{parentName:"p",href:"/guides/references/bundled-libraries"},"Bundled Libraries")," that Cypress bakes in."),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"describe")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"it")," come from ",(0,i.kt)("a",{parentName:"li",href:"https://mochajs.org"},"Mocha")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"expect")," comes from ",(0,i.kt)("a",{parentName:"li",href:"http://www.chaijs.com"},"Chai"))),(0,i.kt)("p",{parentName:"admonition"},"Cypress builds on these popular tools and frameworks that you ",(0,i.kt)("em",{parentName:"p"},"hopefully"),"\nalready have some familiarity and knowledge of. If not, that's okay too. Let's briefly discuss about them."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"describe")," is a simple BDD DSL for writing tests. BDD tests read like sentences and it should thus be easier to\nunderstand what the specification of a function/component is. Its usage is the following"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"describe(description, code)\n\nit(description, code = NULL)\n")),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description")," - description of the feature"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"code")," - test code containing the specs. Note that this is NOT the return code or some number from running a command")),(0,i.kt)("p",{parentName:"admonition"},"Tests using the ",(0,i.kt)("inlineCode",{parentName:"p"},"describe")," syntax not only ",(0,i.kt)("em",{parentName:"p"},"verify")," the tested code, but also ",(0,i.kt)("em",{parentName:"p"},"document")," its intended behaviour. ",(0,i.kt)("strong",{parentName:"p"},"Each\n",(0,i.kt)("inlineCode",{parentName:"strong"},"describe")," block specifies a larger component or function and contains a set of specifications. A specification is\ndefined by an ",(0,i.kt)("inlineCode",{parentName:"strong"},"it")," block"),". Each ",(0,i.kt)("inlineCode",{parentName:"p"},"it")," block functions as a test and is evaluated in its own environment. We can also\nhave nested ",(0,i.kt)("inlineCode",{parentName:"p"},"describe")," blocks."),(0,i.kt)("p",{parentName:"admonition"},"This test syntax helps to test the intended behaviour of our code. For example: we want to write a new function for our\npackage. Try to describe the specification first using ",(0,i.kt)("inlineCode",{parentName:"p"},"describe"),", before we write any code. After that, we start to\nimplement the tests for each specification (i.e. the ",(0,i.kt)("inlineCode",{parentName:"p"},"it")," block).")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("strong",null,"Using ESlint?"),(0,i.kt)("p",{parentName:"admonition"},"Check out our\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/eslint-plugin-cypress"},"Cypress ESLint plugin"),".")),(0,i.kt)("h2",{id:"Write-a-real-test"},"Write a ",(0,i.kt)("em",{parentName:"h2"},"real")," test"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"A solid test generally covers 3 phases:")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Set up the application state."),(0,i.kt)("li",{parentName:"ol"},"Take an action."),(0,i.kt)("li",{parentName:"ol"},"Make an assertion about the resulting application state.")),(0,i.kt)("p",null,'You might also see this phrased as "Given, When, Then", or "Arrange, Act,\nAssert". But the idea is: First you put the application into a specific state,\nthen you take some action in the application that causes it to change, and\nfinally you check the resulting application state.'),(0,i.kt)("p",null,"Today, we'll take a narrow view of these steps and map them cleanly to Cypress\ncommands:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Visit a web page."),(0,i.kt)("li",{parentName:"ol"},"Query for an element."),(0,i.kt)("li",{parentName:"ol"},"Interact with that element."),(0,i.kt)("li",{parentName:"ol"},"Assert about the content on the page.")),(0,i.kt)("h3",{id:"Step-1-Visit-a-page"},(0,i.kt)(c,{name:"globe",mdxType:"Icon"})," Step 1: Visit a page"),(0,i.kt)("p",null,"First, let's visit a web page. We will visit our\n",(0,i.kt)("a",{parentName:"p",href:"/examples/applications#Kitchen-Sink"},"Kitchen Sink")," application in this example\nso that you can try Cypress out without needing to worry about finding a page to\ntest."),(0,i.kt)("p",null,"We can pass the URL we want to visit to ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/visit"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.visit()")),".\nLet's replace our previous test with the one below that actually visits a page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('My First Test', () => {\n  it('Visits the Kitchen Sink', () => {\n    cy.visit('https://example.cypress.io')\n  })\n})\n")),(0,i.kt)("p",null,"Save the file and switch back over to the Cypress Test Runner. You might notice\na few things:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("a",{parentName:"li",href:"/guides/core-concepts/cypress-app#Command-Log"},"Command Log")," now shows\nthe new ",(0,i.kt)("inlineCode",{parentName:"li"},"VISIT")," action."),(0,i.kt)("li",{parentName:"ol"},"The Kitchen Sink application has been loaded into the\n",(0,i.kt)("a",{parentName:"li",href:"/guides/core-concepts/cypress-app#Overview"},"App Preview")," pane."),(0,i.kt)("li",{parentName:"ol"},"The test is green, even though we made no assertions."),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"VISIT")," displays a ",(0,i.kt)("strong",{parentName:"li"},"blue pending state")," until the page finishes\nloading.")),(0,i.kt)("p",null,"Had this request come back with a non ",(0,i.kt)("inlineCode",{parentName:"p"},"2xx")," status code such as ",(0,i.kt)("inlineCode",{parentName:"p"},"404")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"500"),",\nor if there was a JavaScript error in the application's code, the test would\nhave failed."),(0,i.kt)(u,{src:"/img/snippets/first-test-visit-30fps.mp4",title:"First test with cy.visit()",mdxType:"DocsVideo"}),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("strong",null,"Testing Apps You Don't Control"),(0,i.kt)("p",{parentName:"admonition"},"In this guide we are testing our example application:\n",(0,i.kt)("a",{parentName:"p",href:"https://example.cypress.io"},(0,i.kt)("inlineCode",{parentName:"a"},"https://example.cypress.io")),". However you should\nthink carefully about testing applications you ",(0,i.kt)("strong",{parentName:"p"},"don't control"),". Why?"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"They have the potential to change at any moment which will break tests."),(0,i.kt)("li",{parentName:"ul"},"They may do A/B testing which makes it impossible to get consistent results."),(0,i.kt)("li",{parentName:"ul"},"They may detect you are a script and block your access."),(0,i.kt)("li",{parentName:"ul"},"They may have security features enabled which prevent Cypress from working.")),(0,i.kt)("p",{parentName:"admonition"},"Generally speaking, the point of Cypress is to be a tool you use every day to\nbuild and test your own applications, not a general purpose web automation tool.\nHowever, this is a guideline rather than a hard-and-fast rule and there are a\nnumber of good reasons to make exceptions for certain kinds of application:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"They are specifically designed to integrate with third parties, e.g. SSO\nproviders."),(0,i.kt)("li",{parentName:"ul"},"They provide you with a complementary service, e.g. SaaS control panels or\nanalytics."),(0,i.kt)("li",{parentName:"ul"},"They reuse your content or provide plugins for an app you control.")),(0,i.kt)("p",{parentName:"admonition"},"The key here is to carefully weigh the benefits of the tests in question against\nthe possible disruption and flake these sorts of tests can introduce.")),(0,i.kt)("h3",{id:"Step-2-Query-for-an-element"},(0,i.kt)(c,{name:"search",mdxType:"Icon"})," Step 2: Query for an element"),(0,i.kt)("p",null,"Now that we've got a page loaded, we need to take some action on it. Why don't\nwe click a link on the page? Sounds easy enough, let's go look for one we\nlike... how about ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),"?"),(0,i.kt)("p",null,"To find this element by its contents, we'll use\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/contains"},"cy.contains()"),"."),(0,i.kt)("p",null,"Let's add it to our test and see what happens:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('My First Test', () => {\n  it('finds the content \"type\"', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type')\n  })\n})\n")),(0,i.kt)("p",null,"Our test should now display ",(0,i.kt)("inlineCode",{parentName:"p"},"CONTAINS")," in the\n",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/cypress-app#Command-Log"},"Command Log")," and still be green."),(0,i.kt)("p",null,"Even without adding an assertion, we know that everything is okay! This is\nbecause many of Cypress' commands are built to fail if they don't find what\nthey're expecting to find. This is known as an\n",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/introduction-to-cypress#Implicit-Assertions"},"Implicit Assertion"),"."),(0,i.kt)("p",null,"To verify this, replace ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," with something not on the page, like ",(0,i.kt)("inlineCode",{parentName:"p"},"hype"),".\nYou'll notice the test goes red, but only after about 4 seconds!"),(0,i.kt)("p",null,"Can you see what Cypress is doing under the hood? It's automatically waiting and\nretrying because it expects the content to ",(0,i.kt)("strong",{parentName:"p"},"eventually")," be found in the DOM.\nIt doesn't immediately fail!"),(0,i.kt)(m,{src:"/img/guides/getting-started/e2e/v10/first-test-failing-contains.png",alt:"Test failing to not find content 'hype'",mdxType:"DocsImage"}),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("strong",null,"Error Messages"),(0,i.kt)("p",{parentName:"admonition"},"We've taken care at Cypress to write hundreds of custom error messages that\nattempt to clearly explain what went wrong. In this case, Cypress ",(0,i.kt)("strong",{parentName:"p"},"timed out\nretrying")," to find the content ",(0,i.kt)("inlineCode",{parentName:"p"},"hype")," within the entire page. To read more about\nthe error's display, read about\n",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/debugging#Errors"},"Debugging Errors"),".")),(0,i.kt)("p",null,"Before we add another command - let's get this test back to passing. Replace\n",(0,i.kt)("inlineCode",{parentName:"p"},"hype")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),"."),(0,i.kt)(u,{src:"/img/snippets/first-test-contains-30fps.mp4",title:"First test with cy.contains()",mdxType:"DocsVideo"}),(0,i.kt)("h3",{id:"Step-3-Click-an-element"},(0,i.kt)(c,{name:"mouse-pointer",mdxType:"Icon"})," Step 3: Click an element"),(0,i.kt)("p",null,"Ok, now we want to click on the link we found. How do we do that? Add a\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/click"},".click()")," command to the end of the previous command, like\nso:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('My First Test', () => {\n  it('clicks the link \"type\"', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type').click()\n  })\n})\n")),(0,i.kt)("p",null,'You can almost read it like a little story! Cypress calls this "chaining" and we\nchain together commands to build tests that really express what the app does in\na declarative way.'),(0,i.kt)("p",null,"Also note that the ",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/cypress-app#Overview"},"App Preview"),"\npane has updated further after the click, following the link and showing the\ndestination page:"),(0,i.kt)("p",null,"Now we can assert something about this new page!"),(0,i.kt)(u,{src:"/img/snippets/first-test-click-30fps.mp4",title:"First test with .click()",mdxType:"DocsVideo"}),(0,i.kt)(h,{mdxType:"IntellisenseCodeCompletion"}),(0,i.kt)("h3",{id:"Step-4-Make-an-assertion"},(0,i.kt)(c,{name:"check-square",mdxType:"Icon"})," Step 4: Make an assertion"),(0,i.kt)("p",null,"Let's make an assertion about something on the new page we clicked into. Perhaps\nwe'd like to make sure the new URL is the expected URL. We can do that by\nlooking up the URL and chaining an assertion to it with\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/should"},".should()"),"."),(0,i.kt)("p",null,"Here's what that looks like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('My First Test', () => {\n  it('clicking \"type\" navigates to a new url', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type').click()\n\n    // Should be on a new URL which\n    // includes '/commands/actions'\n    cy.url().should('include', '/commands/actions')\n  })\n})\n")),(0,i.kt)("h4",{id:"Adding-more-commands-and-assertions"},"Adding more commands and assertions"),(0,i.kt)("p",null,"We are not limited to a single interaction and assertion in a given test. In\nfact, many interactions in an application may require multiple steps and are\nlikely to change your application state in more than one way."),(0,i.kt)("p",null,"We can continue the interactions and assertions in this test by adding another\nchain to interact with and verify the behavior of elements on this new page."),(0,i.kt)("p",null,"We can use ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/get"},"cy.get()")," to select an element based on its\nclass. Then we can use the ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/type"},".type()")," command to enter text\ninto the selected input. Finally, we can verify that the value of the input\nreflects the text that was typed with another ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/should"},".should()"),"."),(0,i.kt)("p",null,"In general, the structure of your test should flow query -> query -> command or\nassertion(s). It's best practice not to chain anything after an action command;\nfor more details on why this is, see our guide on\n",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/retry-ability"},"retry-ability"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('My First Test', () => {\n  it('Gets, types and asserts', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type').click()\n\n    // Should be on a new URL which\n    // includes '/commands/actions'\n    cy.url().should('include', '/commands/actions')\n\n    // Get an input, type into it\n    cy.get('.action-email').type('fake@email.com')\n\n    //  Verify that the value has been updated\n    cy.get('.action-email').should('have.value', 'fake@email.com')\n  })\n})\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"We normally don't suggest selecting and finding elements by their class names,\nbut we do so here since we are querying an external site, and sometimes that is\nall we have to work with."),(0,i.kt)("p",{parentName:"admonition"},"For more information on our guidance on selector best practices, see our guide\non it ",(0,i.kt)("a",{parentName:"p",href:"/guides/references/best-practices#Selecting-Elements"},"here"),".")),(0,i.kt)("p",null,"And there you have it: a short test in Cypress that visits a page, finds and\nclicks a link, verifies the URL and then verifies the behavior of an element on\nthe new page. If we read it out loud, it might sound like:"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"Visit: ",(0,i.kt)("inlineCode",{parentName:"em"},"https://example.cypress.io"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"Find the element with content: ",(0,i.kt)("inlineCode",{parentName:"em"},"type"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"Click on it")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"Get the URL")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"Assert it includes: ",(0,i.kt)("inlineCode",{parentName:"em"},"/commands/actions"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"Get the input with the ",(0,i.kt)("inlineCode",{parentName:"em"},"action-email")," data-testid")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"Type ",(0,i.kt)("inlineCode",{parentName:"em"},"fake@email.com")," into the input")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"Assert the input reflects the new value")))),(0,i.kt)("p",null,"Or in the ",(0,i.kt)("em",{parentName:"p"},"Given"),", ",(0,i.kt)("em",{parentName:"p"},"When"),", ",(0,i.kt)("em",{parentName:"p"},"Then")," syntax:"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Given")," a user visits ",(0,i.kt)("inlineCode",{parentName:"em"},"https://example.cypress.io"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"When")," they click the link labeled ",(0,i.kt)("inlineCode",{parentName:"em"},"type"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},'And they type "',(0,i.kt)("a",{parentName:"em",href:"mailto:fake@email.com"},"fake@email.com"),'" into the ',(0,i.kt)("inlineCode",{parentName:"em"},'[data-testid="action-email"]'),"\ninput")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("strong",{parentName:"em"},"Then")," the URL should include ",(0,i.kt)("inlineCode",{parentName:"em"},"/commands/actions"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("em",{parentName:"li"},"And the ",(0,i.kt)("inlineCode",{parentName:"em"},'[data-testid="action-email"]'),' input has "',(0,i.kt)("a",{parentName:"em",href:"mailto:fake@email.com"},"fake@email.com"),'" as its\nvalue')))),(0,i.kt)("p",null,"And hey, this is a very clean test! We didn't have to say anything about ",(0,i.kt)("em",{parentName:"p"},"how"),"\nthings work, just that we'd like to verify a particular series of events and\noutcomes."),(0,i.kt)(u,{src:"/img/snippets/first-test-assertions-30fps.mp4",title:"First test with assertions",mdxType:"DocsVideo"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("strong",null,"Page Transitions"),(0,i.kt)("p",{parentName:"admonition"},"Worth noting is that this test transitioned across two different pages."),(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},"The initial ",(0,i.kt)("a",{parentName:"li",href:"/api/commands/visit"},"cy.visit()")),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("a",{parentName:"li",href:"/api/commands/click"},".click()")," to a new page")),(0,i.kt)("p",{parentName:"admonition"},"Cypress automatically detects things like a ",(0,i.kt)("inlineCode",{parentName:"p"},"page transition event")," and will\nautomatically ",(0,i.kt)("strong",{parentName:"p"},"halt")," running commands until the next page has ",(0,i.kt)("strong",{parentName:"p"},"finished"),"\nloading."),(0,i.kt)("p",{parentName:"admonition"},"Had the ",(0,i.kt)("strong",{parentName:"p"},"next page")," not finished its loading phase, Cypress would have ended\nthe test and presented an error."),(0,i.kt)("p",{parentName:"admonition"},"Under the hood - this means you don't have to worry about commands accidentally\nrunning against a stale page, nor do you have to worry about running commands\nagainst a partially loaded page."),(0,i.kt)("p",{parentName:"admonition"},"We mentioned previously that Cypress waited ",(0,i.kt)("strong",{parentName:"p"},"4 seconds")," before timing out\nfinding a DOM element - but in this case, when Cypress detects a\n",(0,i.kt)("inlineCode",{parentName:"p"},"page transition event")," it automatically increases the timeout to ",(0,i.kt)("strong",{parentName:"p"},"60 seconds"),"\nfor the single ",(0,i.kt)("inlineCode",{parentName:"p"},"PAGE LOAD")," event."),(0,i.kt)("p",{parentName:"admonition"},"In other words, based on the commands and the events happening, Cypress\nautomatically alters its expected timeouts to match web application behavior."),(0,i.kt)("p",{parentName:"admonition"},"These various timeouts are defined in the\n",(0,i.kt)("a",{parentName:"p",href:"/guides/references/configuration#Timeouts"},"Configuration")," document.")),(0,i.kt)("h2",{id:"Record-Tests-with-Cypress-Studio"},"Record Tests with Cypress Studio"),(0,i.kt)("p",null,"If you want a minimal code approach to creating tests, you can use\n",(0,i.kt)("a",{parentName:"p",href:"/guides/references/cypress-studio"},"Cypress Studio")," to record your browser\ninteractions and generate tests. Visit our\n",(0,i.kt)("a",{parentName:"p",href:"/guides/references/cypress-studio"},"guide")," for more information."),(0,i.kt)("h2",{id:"Next-steps"},"Next steps"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Take our free\n",(0,i.kt)("a",{parentName:"li",href:"https://learn.cypress.io/testing-your-first-application"},"Testing your first application"),"\ncourse."),(0,i.kt)("li",{parentName:"ul"},"Learn more about the ",(0,i.kt)("a",{parentName:"li",href:"/guides/core-concepts/cypress-app"},"Cypress App")," UI."),(0,i.kt)("li",{parentName:"ul"},"Start ",(0,i.kt)("a",{parentName:"li",href:"/guides/end-to-end-testing/testing-your-app"},"testing your app"),"."),(0,i.kt)("li",{parentName:"ul"},"Set up\n",(0,i.kt)("a",{parentName:"li",href:"/guides/tooling/IDE-integration#Intelligent-Code-Completion"},"intelligent code completion"),"\nfor Cypress commands and assertions."),(0,i.kt)("li",{parentName:"ul"},"Record your test results to ",(0,i.kt)("a",{parentName:"li",href:"/guides/cloud/introduction"},"Cypress Cloud")," for\nadvanced features like parallelization, flake detection, and more."),(0,i.kt)("li",{parentName:"ul"},"Check out the ",(0,i.kt)(c,{name:"github",inline:"true",contentType:"rwa",mdxType:"Icon"})," for\npractical demonstrations of Cypress testing practices, configuration, and\nstrategies in a real-world project."),(0,i.kt)("li",{parentName:"ul"},"Search Cypress's documentation to quickly find what you need.")),(0,i.kt)(m,{src:"/img/guides/getting-started/e2e/search-box.png",alt:"Use the search box to find relevant documentation",mdxType:"DocsImage"}))}g.isMDXComponent=!0}}]);