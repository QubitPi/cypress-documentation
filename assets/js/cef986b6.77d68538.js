"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[7835],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4103:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={title:"GitLab CI"},s=void 0,o={unversionedId:"guides/continuous-integration/gitlab-ci",id:"guides/continuous-integration/gitlab-ci",title:"GitLab CI",description:"What you'll learn",source:"@site/docs/guides/continuous-integration/gitlab-ci.mdx",sourceDirName:"guides/continuous-integration",slug:"/guides/continuous-integration/gitlab-ci",permalink:"/cypress-documentation/guides/continuous-integration/gitlab-ci",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/continuous-integration/gitlab-ci.mdx",tags:[],version:"current",frontMatter:{title:"GitLab CI"},sidebar:"guides",previous:{title:"GitHub Actions",permalink:"/cypress-documentation/guides/continuous-integration/github-actions"},next:{title:"IDE Integration",permalink:"/cypress-documentation/guides/tooling/IDE-integration"}},l={},p=[{value:"Basic Setup",id:"Basic-Setup",level:2},{value:"Testing in Chrome and Firefox with Cypress Docker Images",id:"Testing-in-Chrome-and-Firefox-with-Cypress-Docker-Images",level:2},{value:"Caching Dependencies and Build Artifacts",id:"Caching-Dependencies-and-Build-Artifacts",level:2},{value:"Parallelization",id:"Parallelization",level:2},{value:"Install Job",id:"Install-Job",level:3},{value:"Worker Jobs",id:"Worker-Jobs",level:3},{value:"Using Cypress Cloud with GitLab CI/CD",id:"Using-Cypress-Cloud-with-GitLab-CICD",level:2},{value:"Cypress Real World Example with GitLab CI/CD",id:"Cypress-Real-World-Example-with-GitLab-CICD",level:2}],c=(u="Icon",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var u;const d={toc:p};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("h2",{parentName:"admonition",id:"What-youll-learn"},(0,i.kt)(c,{name:"graduation-cap",mdxType:"Icon"})," What you'll learn"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"How to run Cypress tests with GitLab as part of CI/CD pipeline"),(0,i.kt)("li",{parentName:"ul"},"How to parallelize Cypress test runs within GitLab CI/CD"))),(0,i.kt)("p",null,"With its hosted\n",(0,i.kt)("a",{parentName:"p",href:"https://about.gitlab.com/stages-devops-lifecycle/continuous-integration/"},"CI/CD Service"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://gitlab.com"},"GitLab"),' offers developers "a tool built into GitLab for\nsoftware development through the\n',(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/introduction/index.html#introduction-to-cicd-methodologies"},"continuous methodologies"),'".'),(0,i.kt)("p",null,"Detailed documentation is available in the\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/introduction/"},"GitLab CI/CD Documentation"),"."),(0,i.kt)("h2",{id:"Basic-Setup"},"Basic Setup"),(0,i.kt)("p",null,"The example below is basic CI setup and job using\n",(0,i.kt)("a",{parentName:"p",href:"https://about.gitlab.com/stages-devops-lifecycle/continuous-integration/"},"GitLab CI/CD"),"\nto run Cypress tests within the Electron browser. This GitLab CI configuration\nis placed within ",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"stages:\n  - test\n\ntest:\n  image: node:latest\n  stage: test\n  script:\n    # install dependencies\n    - npm ci\n    # start the server in the background\n    - npm run start:ci &\n    # run Cypress tests\n    - npm run e2e\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("strong",null,"Try it out"),(0,i.kt)("p",{parentName:"admonition"},"To try out the example above yourself, fork the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-example-kitchensink"},"Cypress Kitchen Sink"),"\nexample project and place the above GitHub Action configuration in\n",(0,i.kt)("inlineCode",{parentName:"p"},".gitlab-ci.yml"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"How this configuration works:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"On ",(0,i.kt)("em",{parentName:"li"},"push")," to this repository, this job will provision and start GitLab-hosted\nLinux instance for running the outlined ",(0,i.kt)("inlineCode",{parentName:"li"},"stages")," declared in ",(0,i.kt)("inlineCode",{parentName:"li"},"script")," with in\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},"test")," job section of the configuration."),(0,i.kt)("li",{parentName:"ul"},"The code is checked out from our GitHub/GitLab repository."),(0,i.kt)("li",{parentName:"ul"},"Finally, our scripts will:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Install npm dependencies"),(0,i.kt)("li",{parentName:"ul"},"Start the project web server (",(0,i.kt)("inlineCode",{parentName:"li"},"npm start"),")"),(0,i.kt)("li",{parentName:"ul"},"Run the Cypress tests within our GitHub repository within Electron.")))),(0,i.kt)("h2",{id:"Testing-in-Chrome-and-Firefox-with-Cypress-Docker-Images"},"Testing in Chrome and Firefox with Cypress Docker Images"),(0,i.kt)("p",null,"The Cypress team maintains the official\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-docker-images"},"Docker Images")," for running\nCypress tests locally and in CI, which are built with Google Chrome and Firefox.\nFor example, this allows us to run the tests in Firefox by passing the\n",(0,i.kt)("inlineCode",{parentName:"p"},"--browser firefox")," attribute to ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress run"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"stages:\n  - test\n\ntest:\n  image: cypress/browsers:node16.16.0-chrome107-ff107-edge\n  stage: test\n  script:\n    # install dependencies\n    - npm ci\n    # start the server in the background\n    - npm run start:ci &\n    # run Cypress tests\n    - npx cypress run --browser firefox\n")),(0,i.kt)("h2",{id:"Caching-Dependencies-and-Build-Artifacts"},"Caching Dependencies and Build Artifacts"),(0,i.kt)("p",null,"Caching of dependencies and build artifacts can be accomplished with the ",(0,i.kt)("inlineCode",{parentName:"p"},"cache"),"\nconfiguration. The\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/caching/"},"caching documentation")," contains all\noptions for caching dependencies and build artifacts across many different\nworkflows. Artifacts from a job can be defined by providing paths and an\noptional expiry time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"stages:\n  - test\n\ncache:\n  key: ${CI_COMMIT_REF_SLUG}\n  paths:\n    - node_modules/\n    - .npm/\n\ntest:\n  image: cypress/browsers:node16.16.0-chrome107-ff107-edge\n  stage: test\n  script:\n    # install dependencies\n    - npm ci\n    # start the server in the background\n    - npm run start:ci &\n    # run Cypress tests\n    - npx cypress run --browser firefox\n  artifacts:\n    when: always\n    paths:\n      - cypress/videos/**/*.mp4\n      - cypress/screenshots/**/*.png\n    expire_in: 1 day\n")),(0,i.kt)("h2",{id:"Parallelization"},"Parallelization"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/guides/cloud/introduction"},"Cypress Cloud")," offers the ability to\n",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/parallelization"},"parallelize and group test runs")," along with\nadditional insights and ",(0,i.kt)("a",{parentName:"p",href:"/guides/cloud/analytics"},"analytics")," for Cypress tests."),(0,i.kt)("p",null,"The addition of the\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/yaml/#parallel"},(0,i.kt)("inlineCode",{parentName:"a"},"parallel")," attribute")," to the\nconfiguration of a job will allow us to run multiples instances of Cypress at\nsame time as we will see later in this section."),(0,i.kt)("p",null,"Before diving into an example of a parallelization setup, it is important to\nunderstand the two different types of jobs that we will declare:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Install Job"),": A job that installs and caches dependencies that will be used\nby subsequent jobs later in the GitLab CI workflow."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Worker Job"),": A job that handles execution of Cypress tests and depends on\nthe ",(0,i.kt)("em",{parentName:"li"},"install job"),".")),(0,i.kt)("h3",{id:"Install-Job"},"Install Job"),(0,i.kt)("p",null,"The separation of installation from test running is necessary when running\nparallel jobs. It allows for reuse of various build steps aided by caching."),(0,i.kt)("p",null,"First, we will define the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," stage along with ",(0,i.kt)("inlineCode",{parentName:"p"},"cache")," and variables related\nto the cache."),(0,i.kt)("p",null,"Then we define the ",(0,i.kt)("inlineCode",{parentName:"p"},"install")," step that will be used by the worker jobs and\nassign it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," stage."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"stages:\n  - build\n\n## Set environment variables for folders in \"cache\" job settings for npm modules and Cypress binary\nvariables:\n  npm_config_cache: '$CI_PROJECT_DIR/.npm'\n  CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/cache/Cypress'\n\ncache:\n  key: ${CI_COMMIT_REF_SLUG}\n  paths:\n    - cache/Cypress\n    - node_modules\n    - build\n\n## Install NPM dependencies and Cypress\ninstall:\n  image: cypress/browsers:node16.16.0-chrome107-ff107-edge\n  stage: build\n  script:\n    - npm ci\n")),(0,i.kt)("h3",{id:"Worker-Jobs"},"Worker Jobs"),(0,i.kt)("p",null,"Next, we add a ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," stage and define the worker job named ",(0,i.kt)("inlineCode",{parentName:"p"},"ui-chrome-tests"),"\nthat will run Cypress tests with Chrome in parallel during the ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," stage."),(0,i.kt)("p",null,"The addition of the\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/ci/yaml/#parallel"},(0,i.kt)("inlineCode",{parentName:"a"},"parallel")," attribute")," to the\nconfiguration of a job will allow us to run multiples instances of Cypress at\nsame time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"stages:\n  - build\n  - test\n\n## Set environment variables for folders in \"cache\" job settings for npm modules and Cypress binary\nvariables:\n  npm_config_cache: '$CI_PROJECT_DIR/.npm'\n  CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/cache/Cypress'\n\ncache:\n  key: ${CI_COMMIT_REF_SLUG}\n  paths:\n    - .cache/*\n    - cache/Cypress\n    - node_modules\n    - build\n\n## Install NPM dependencies and Cypress\ninstall:\n  image: cypress/browsers:node16.16.0-chrome107-ff107-edge\n  stage: build\n  script:\n    - npm ci\n\nui-chrome-tests:\n  image: cypress/browsers:node16.16.0-chrome107-ff107-edge\n  stage: test\n  parallel: 5\n  script:\n    # install dependencies\n    - npm ci\n    # start the server in the background\n    - npm run start:ci &\n    # run Cypress tests in parallel\n    - npx cypress run --record --parallel --browser chrome --group \"UI - Chrome\"\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The above configuration using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--parallel")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--record")," flags to\n",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/command-line#cypress-run"},"cypress run")," requires setting up\nrecording test results to ",(0,i.kt)("a",{parentName:"p",href:"https://on.cypress.io/cloud"},"Cypress Cloud"),".")),(0,i.kt)("h2",{id:"Using-Cypress-Cloud-with-GitLab-CICD"},"Using Cypress Cloud with GitLab CI/CD"),(0,i.kt)("p",null,"In the GitLab CI configuration we have defined in the previous section, we are\nleveraging three useful features of\n",(0,i.kt)("a",{parentName:"p",href:"https://on.cypress.io/cloud"},"Cypress Cloud"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://on.cypress.io/how-do-i-record-runs"},"Recording test results with the ",(0,i.kt)("inlineCode",{parentName:"a"},"--record")," flag"),"\nto ",(0,i.kt)("a",{parentName:"p",href:"https://on.cypress.io/cloud"},"Cypress Cloud"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In-depth and shareable ",(0,i.kt)("a",{parentName:"li",href:"/guides/cloud/runs"},"test reports"),"."),(0,i.kt)("li",{parentName:"ul"},"Visibility into test failures via quick access to error messages, stack\ntraces, screenshots, videos, and contextual details."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/guides/cloud/gitlab-integration"},"Integrating testing with the merge-request process"),"\nvia\n",(0,i.kt)("a",{parentName:"li",href:"/guides/cloud/gitlab-integration#Commit-statuses"},"commit status guards"),"\nand convenient\n",(0,i.kt)("a",{parentName:"li",href:"/guides/cloud/gitlab-integration#Merge-Request-comments"},"test report comments"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/guides/cloud/flaky-test-management"},"Detecting flaky tests")," and surfacing\nthem via ",(0,i.kt)("a",{parentName:"li",href:"/guides/cloud/flaky-test-management#Slack"},"Slack alerts")," or\n",(0,i.kt)("a",{parentName:"li",href:"/guides/cloud/gitlab-integration"},"GitLab PR status checks"),"."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/guides/guides/parallelization"},"Parallelizing test runs")," and optimizing\ntheir execution via\n",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/parallelization#Balance-strategy"},"intelligent load-balancing"),"\nof test specs across CI machines with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--parallel")," flag.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Organizing and consolidating multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress run")," calls by labeled groups\ninto a single report within ",(0,i.kt)("a",{parentName:"p",href:"https://on.cypress.io/cloud"},"Cypress Cloud"),". In\nthe example above we use the ",(0,i.kt)("inlineCode",{parentName:"p"},'--group "UI - Chrome"'),' flag to organize all UI\ntests for the Chrome browser into a group labeled "UI - Chrome" in the\n',(0,i.kt)("a",{parentName:"p",href:"https://on.cypress.io/cloud"},"Cypress Cloud")," report."))),(0,i.kt)("h2",{id:"Cypress-Real-World-Example-with-GitLab-CICD"},"Cypress Real World Example with GitLab CI/CD"),(0,i.kt)("p",null,"A complete CI workflow against multiple browsers, viewports and operating\nsystems is available in the Cypress Real World App (RWA)."),(0,i.kt)("p",null,"Clone the ",(0,i.kt)(c,{name:"github",inline:"true",contentType:"rwa",mdxType:"Icon"})," and refer to\nthe\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/.gitlab-ci.yml"},".gitlab-ci.yml"),"\nfile."))}m.isMDXComponent=!0}}]);