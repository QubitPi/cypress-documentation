"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[4494],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>v});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=l(t),d=r,v=c["".concat(p,".").concat(d)]||c[d]||u[d]||i;return t?a.createElement(v,s(s({ref:n},m),{},{components:t})):a.createElement(v,s({ref:n},m))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[c]="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8872:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const i={title:"Cypress.env"},s=void 0,o={unversionedId:"api/cypress-api/env",id:"api/cypress-api/env",title:"Cypress.env",description:"get and set environment variables in your tests.",source:"@site/docs/api/cypress-api/env.mdx",sourceDirName:"api/cypress-api",slug:"/api/cypress-api/env",permalink:"/cypress-documentation/api/cypress-api/env",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/cypress-api/env.mdx",tags:[],version:"current",lastUpdatedAt:1697461007,formattedLastUpdatedAt:"Oct 16, 2023",frontMatter:{title:"Cypress.env"},sidebar:"api",previous:{title:"Cypress.ensure",permalink:"/cypress-documentation/api/cypress-api/ensure"},next:{title:"Cypress.isBrowser",permalink:"/cypress-documentation/api/cypress-api/isbrowser"}},p={},l=[{value:"Syntax",id:"Syntax",level:2},{value:"Arguments",id:"Arguments",level:3},{value:"Examples",id:"Examples",level:2},{value:"No Arguments",id:"No-Arguments",level:3},{value:"Get all environment variables from the Cypress configuration",id:"Get-all-environment-variables-from-the-Cypress-configuration",level:4},{value:"Name",id:"Name",level:3},{value:"Return a single environment variable from the Cypress configuration",id:"Return-a-single-environment-variable-from-the-Cypress-configuration",level:4},{value:"Name and Value",id:"Name-and-Value",level:3},{value:"Change environment variables from the Cypress configuration from within your tests",id:"Change-environment-variables-from-the-Cypress-configuration-from-within-your-tests",level:4},{value:"Object",id:"Object",level:3},{value:"Override multiple values from the Cypress configuration by passing an object",id:"Override-multiple-values-from-the-Cypress-configuration-by-passing-an-object",level:4},{value:"From a plugin",id:"From-a-plugin",level:3},{value:"Notes",id:"Notes",level:2},{value:"Why would I ever need to use environment variables?",id:"Why-would-I-ever-need-to-use-environment-variables",level:3},{value:"Can I pass in environment variables from the command line?",id:"Can-I-pass-in-environment-variables-from-the-command-line",level:3},{value:"Why is it <code>Cypress.env</code> and not <code>cy.env</code>?",id:"Why-is-it-Cypressenv-and-not-cyenv",level:3},{value:"See also",id:"See-also",level:2}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},c=m("Icon"),u=m("CypressConfigFileTabs"),d=m("WarningPluginsFile"),v={toc:l};function f(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set")," environment variables ",(0,r.kt)("em",{parentName:"p"},"in your tests"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("a",{parentName:"p",href:"/guides/guides/environment-variables"},"Environment Variable")," guide explains\nthe other ways you can set them ",(0,r.kt)("em",{parentName:"p"},"outside of your tests"),".")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("strong",null,"Scope"),(0,r.kt)("p",{parentName:"admonition"},"Environment variables set using ",(0,r.kt)("inlineCode",{parentName:"p"},"Cypress.env")," ",(0,r.kt)("em",{parentName:"p"},"are only in scope for the current\nspec file.")),(0,r.kt)("p",{parentName:"admonition"},"Cypress runs each spec file in isolation: the browser is exited between specs.\nEnvironment variables added or changed in one spec won't be visible in other\nspecs.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("strong",null,"Difference between OS-level and Cypress environment variables"),(0,r.kt)("p",{parentName:"admonition"},'In Cypress, "environment variables" are variables that are accessible via\n',(0,r.kt)("inlineCode",{parentName:"p"},"Cypress.env"),". These are not the same as OS-level environment variables.\nHowever,\n",(0,r.kt)("a",{parentName:"p",href:"/guides/guides/environment-variables#Option-3-CYPRESS_"},"it is possible to set Cypress environment variables from OS-level environment variables"),".")),(0,r.kt)("h2",{id:"Syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.env()\nCypress.env(name)\nCypress.env(name, value)\nCypress.env(object)\n")),(0,r.kt)("h3",{id:"Arguments"},"Arguments"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)(c,{name:"angle-right",mdxType:"Icon"})," name")," ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"(String)"))),(0,r.kt)("p",null,"The name of the environment variable to get or set."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)(c,{name:"angle-right",mdxType:"Icon"})," value")," ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"(String)"))),(0,r.kt)("p",null,"The value of the environment variable to set."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)(c,{name:"angle-right",mdxType:"Icon"})," object")," ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"(Object)"))),(0,r.kt)("p",null,"Set multiple environment variables with an object literal."),(0,r.kt)("h2",{id:"Examples"},"Examples"),(0,r.kt)("h3",{id:"No-Arguments"},"No Arguments"),(0,r.kt)("h4",{id:"Get-all-environment-variables-from-the-Cypress-configuration"},"Get all environment variables from the Cypress configuration"),(0,r.kt)("cypress-config-example",null,(0,r.kt)(u,{mdxType:"CypressConfigFileTabs"},(0,r.kt)("pre",{parentName:"cypress-config-example"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  env: {\n    foo: 'bar',\n    baz: 'quux',\n  },\n})\n")),(0,r.kt)("pre",{parentName:"cypress-config-example"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  env: {\n    foo: 'bar',\n    baz: 'quux',\n  },\n})\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.env() // => {foo: 'bar', baz: 'quux'}\n")),(0,r.kt)("h3",{id:"Name"},"Name"),(0,r.kt)("h4",{id:"Return-a-single-environment-variable-from-the-Cypress-configuration"},"Return a single environment variable from the Cypress configuration"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("strong",null,"Boolean"),(0,r.kt)("p",{parentName:"admonition"},"We automatically normalize both the key and the value when passed via the\ncommand line. Cypress will automatically convert values into Number or Boolean.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"CYPRESS_HOST=laura.dev CYPRESS_IS_CI=true CYPRESS_MY_ID=123 cypress run\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.env('HOST') // => \"laura.dev\"\nCypress.env('IS_CI') // => true\nCypress.env('MY_ID') // => 123\n")),(0,r.kt)("h3",{id:"Name-and-Value"},"Name and Value"),(0,r.kt)("h4",{id:"Change-environment-variables-from-the-Cypress-configuration-from-within-your-tests"},"Change environment variables from the Cypress configuration from within your tests"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("strong",null,"Scope"),(0,r.kt)("p",{parentName:"admonition"},"Remember, any changes that you make to environment variables using this API will\nonly be in effect for the remainder of the tests ",(0,r.kt)("em",{parentName:"p"},"in the same spec file."))),(0,r.kt)("cypress-config-example",null,(0,r.kt)(u,{mdxType:"CypressConfigFileTabs"},(0,r.kt)("pre",{parentName:"cypress-config-example"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  env: {\n    foo: 'bar',\n    baz: 'quux',\n  },\n})\n")),(0,r.kt)("pre",{parentName:"cypress-config-example"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  env: {\n    foo: 'bar',\n    baz: 'quux',\n  },\n})\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.env('host', 'http://server.dev.local')\n\nCypress.env('host') // => http://server.dev.local\n")),(0,r.kt)("h3",{id:"Object"},"Object"),(0,r.kt)("h4",{id:"Override-multiple-values-from-the-Cypress-configuration-by-passing-an-object"},"Override multiple values from the Cypress configuration by passing an object"),(0,r.kt)("cypress-config-example",null,(0,r.kt)(u,{mdxType:"CypressConfigFileTabs"},(0,r.kt)("pre",{parentName:"cypress-config-example"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  env: {\n    foo: 'bar',\n    baz: 'quux',\n  },\n})\n")),(0,r.kt)("pre",{parentName:"cypress-config-example"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  env: {\n    foo: 'bar',\n    baz: 'quux',\n  },\n})\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.env({\n  host: 'http://server.dev.local',\n  foo: 'foo',\n})\n\nCypress.env() // => {foo: 'foo', baz: 'quux', host: 'http://server.dev.local'}\n")),(0,r.kt)("h3",{id:"From-a-plugin"},"From a plugin"),(0,r.kt)(d,{mdxType:"WarningPluginsFile"}),(0,r.kt)("p",null,"Here's an example that uses ",(0,r.kt)("inlineCode",{parentName:"p"},"Cypress.env")," to access an environment variable\nthat's been\n",(0,r.kt)("a",{parentName:"p",href:"/guides/guides/environment-variables#Option-5-Plugins"},"dynamically set in a plugin"),"."),(0,r.kt)("p",null,"Use this approach to grab the value of an environment variable ",(0,r.kt)("em",{parentName:"p"},"once")," before any\nof the tests in your spec run."),(0,r.kt)("cypress-config-plugin-example",null,(0,r.kt)(u,{mdxType:"CypressConfigFileTabs"},(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      config.env.sharedSecret =\n        process.env.NODE_ENV === 'qa' ? 'hoop brick tort' : 'sushi cup lemon'\n\n      return config\n    },\n  },\n})\n")),(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      config.env.sharedSecret =\n        process.env.NODE_ENV === 'qa' ? 'hoop brick tort' : 'sushi cup lemon'\n\n      return config\n    },\n  },\n})\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// cypress/e2e/secrets.cy.js\ndescribe('Environment variable set in plugin', () => {\n  let sharedSecret\n\n  before(() => {\n    sharedSecret = Cypress.env('sharedSecret')\n  })\n\n  it.only('can be accessed within test.', () => {\n    cy.log(sharedSecret)\n  })\n})\n")),(0,r.kt)("h2",{id:"Notes"},"Notes"),(0,r.kt)("h3",{id:"Why-would-I-ever-need-to-use-environment-variables"},"Why would I ever need to use environment variables?"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/guides/guides/environment-variables"},"Environment Variables")," guide explains\ncommon use cases."),(0,r.kt)("h3",{id:"Can-I-pass-in-environment-variables-from-the-command-line"},"Can I pass in environment variables from the command line?"),(0,r.kt)("p",null,"Yes. You can do that and much more."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/guides/guides/environment-variables"},"Environment Variables")," guide explains\nthe other ways you can set environment variables for your tests."),(0,r.kt)("h3",{id:"Why-is-it-Cypressenv-and-not-cyenv"},"Why is it ",(0,r.kt)("inlineCode",{parentName:"h3"},"Cypress.env")," and not ",(0,r.kt)("inlineCode",{parentName:"h3"},"cy.env"),"?"),(0,r.kt)("p",null,"As a rule of thumb anything you call from ",(0,r.kt)("inlineCode",{parentName:"p"},"Cypress")," affects global state.\nAnything you call from ",(0,r.kt)("inlineCode",{parentName:"p"},"cy")," affects local state."),(0,r.kt)("p",null,"Since the environment variables added or changed by ",(0,r.kt)("inlineCode",{parentName:"p"},"Cypress.env")," are only in\nscope for the current spec file, you'd think that it should be ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.env")," and not\n",(0,r.kt)("inlineCode",{parentName:"p"},"Cypress.env"),"\u2026"," and you'd be right. The fact that ",(0,r.kt)("inlineCode",{parentName:"p"},"Cypress.env")," affects\nlocal state is an artifact of the API evolving over time: ",(0,r.kt)("inlineCode",{parentName:"p"},"Cypress.env")," used to\naffect global state","\u2014","environment variables added in one test spec file were\navailable in other specs","\u2014","but the Cypress team wisely made each spec run in\nisolation in ",(0,r.kt)("a",{parentName:"p",href:"/guides/references/changelog#3-0-0"},(0,r.kt)("inlineCode",{parentName:"a"},"3.0.0"))," and by that time\n",(0,r.kt)("inlineCode",{parentName:"p"},"Cypress.env")," was public API."),(0,r.kt)("h2",{id:"See-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"/guides/guides/environment-variables"},"Environment Variable")," guide"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/guides/references/configuration"},"Cypress configuration"))))}f.isMDXComponent=!0}}]);