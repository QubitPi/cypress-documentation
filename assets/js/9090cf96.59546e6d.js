"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[4136],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=a,g=c["".concat(l,".").concat(h)]||c[h]||d[h]||o;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4572:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={title:"Working with GraphQL",slug:"/guides/end-to-end-testing/working-with-graphql"},i=void 0,s={unversionedId:"guides/end-to-end-testing/testing-strategies/working-with-graphql",id:"guides/end-to-end-testing/testing-strategies/working-with-graphql",title:"Working with GraphQL",description:"What you'll learn",source:"@site/docs/guides/end-to-end-testing/testing-strategies/working-with-graphql.mdx",sourceDirName:"guides/end-to-end-testing/testing-strategies",slug:"/guides/end-to-end-testing/working-with-graphql",permalink:"/cypress-documentation/guides/end-to-end-testing/working-with-graphql",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/end-to-end-testing/testing-strategies/working-with-graphql.mdx",tags:[],version:"current",lastUpdatedAt:1698909506,formattedLastUpdatedAt:"Nov 2, 2023",frontMatter:{title:"Working with GraphQL",slug:"/guides/end-to-end-testing/working-with-graphql"},sidebar:"guides",previous:{title:"Social Authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/social-authentication"},next:{title:"Migrating from Protractor to Cypress",permalink:"/cypress-documentation/guides/end-to-end-testing/protractor-to-cypress"}},l={},p=[{value:"Alias multiple queries or mutations",id:"Alias-multiple-queries-or-mutations",level:2},{value:"Expectations for Query or Mutation Results",id:"Expectations-for-Query-or-Mutation-Results",level:2},{value:"Modifying a Query or Mutation Response",id:"Modifying-a-Query-or-Mutation-Response",level:2}],u=(c="Icon",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var c;const d={toc:p};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("h2",{parentName:"admonition",id:"What-youll-learn"},(0,a.kt)(u,{name:"graduation-cap",mdxType:"Icon"})," What you'll learn"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Best practices to alias multiple GraphQL queries or mutations for a group of\ntests."),(0,a.kt)("li",{parentName:"ul"},"Overriding an existing intercept to modify the query or mutation response"),(0,a.kt)("li",{parentName:"ul"},"Asserting against a GraphQL query or mutation response"))),(0,a.kt)("p",null,"The strategies below follow best known practices for waiting and asserting\nagainst GraphQL queries or mutations."),(0,a.kt)("p",null,"Waiting and asserting on GraphQL API requests rely on matching a query or\nmutation name in the POST body."),(0,a.kt)("p",null,"Using ",(0,a.kt)("a",{parentName:"p",href:"/api/commands/intercept"},"cy.intercept()")," we can override the response to\na GraphQL query or mutation by declaring an intercept at the beginning of the\ntest or closer to the expectation."),(0,a.kt)("h2",{id:"Alias-multiple-queries-or-mutations"},"Alias multiple queries or mutations"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeEach"),", we will use ",(0,a.kt)("a",{parentName:"p",href:"/api/commands/intercept"},"cy.intercept()")," to\ncapture all requests for a GraphQL endpoint (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"/graphql"),"), use conditionals\nto match the query or mutation and set an alias for using ",(0,a.kt)("inlineCode",{parentName:"p"},"req.alias"),"."),(0,a.kt)("p",null,"First, we'll create a set of utility functions to help match and alias our\nqueries and mutations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// utils/graphql-test-utils.js\n\n// Utility to match GraphQL mutation based on the operation name\nexport const hasOperationName = (req, operationName) => {\n  const { body } = req\n  return (\n    Object.prototype.hasOwnProperty.call(body, 'operationName') &&\n    body.operationName === operationName\n  )\n}\n\n// Alias query if operationName matches\nexport const aliasQuery = (req, operationName) => {\n  if (hasOperationName(req, operationName)) {\n    req.alias = `gql${operationName}Query`\n  }\n}\n\n// Alias mutation if operationName matches\nexport const aliasMutation = (req, operationName) => {\n  if (hasOperationName(req, operationName)) {\n    req.alias = `gql${operationName}Mutation`\n  }\n}\n")),(0,a.kt)("p",null,"In our test file, we can import these utilities and use them to alias the\nqueries and mutations for our tests in a ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeEach"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// app.cy.js\nimport { aliasQuery, aliasMutation } from '../utils/graphql-test-utils'\n\ncontext('Tests', () => {\n  beforeEach(() => {\n    cy.intercept('POST', 'http://localhost:3000/graphql', (req) => {\n      // Queries\n      aliasQuery(req, 'GetLaunchList')\n      aliasQuery(req, 'LaunchDetails')\n      aliasQuery(req, 'GetMyTrips')\n\n      // Mutations\n      aliasMutation(req, 'Login')\n      aliasMutation(req, 'BookTrips')\n    })\n  })\n  // ...\n})\n")),(0,a.kt)("h2",{id:"Expectations-for-Query-or-Mutation-Results"},"Expectations for Query or Mutation Results"),(0,a.kt)("p",null,"Expectations can be made against the response of an intercepted GraphQL query or\nmutation using ",(0,a.kt)("a",{parentName:"p",href:"/api/commands/wait"},"cy.wait()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// app.cy.js\nimport { aliasQuery } from '../utils/graphql-test-utils'\n\ncontext('Tests', () => {\n  beforeEach(() => {\n    cy.intercept('POST', 'http://localhost:3000/graphql', (req) => {\n      // Queries\n      aliasQuery(req, 'Login')\n\n      // ...\n    })\n  })\n\n  it('should verify login data', () => {\n    cy.wait('@gqlLoginQuery')\n      .its('response.body.data.login')\n      .should('have.property', 'id')\n      .and('have.property', 'token')\n  })\n})\n")),(0,a.kt)("h2",{id:"Modifying-a-Query-or-Mutation-Response"},"Modifying a Query or Mutation Response"),(0,a.kt)("p",null,"In the test below, the response is modified to test the UI for a single page of\nresults."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// app.cy.js\nimport { hasOperationName, aliasQuery } from '../utils/graphql-test-utils'\n\ncontext('Tests', () => {\n  beforeEach(() => {\n    cy.intercept('POST', 'http://localhost:3000/graphql', (req) => {\n      // Queries\n      aliasQuery(req, 'GetLaunchList')\n\n      // ...\n    })\n  })\n\n  it('should not display the load more button on the launches page', () => {\n    cy.intercept('POST', 'http://localhost:3000/graphql', (req) => {\n      const { body } = req\n      if (hasOperationName(req, 'GetLaunchList')) {\n        // Declare the alias from the initial intercept in the beforeEach\n        req.alias = 'gqlGetLaunchListQuery'\n\n        // Set req.fixture or use req.reply to modify portions of the response\n        req.reply((res) => {\n          // Modify the response body directly\n          res.body.data.launches.hasMore = false\n          res.body.data.launches.launches =\n            res.body.data.launches.launches.slice(5)\n        })\n      }\n    })\n\n    // Must visit after cy.intercept\n    cy.visit('/')\n\n    cy.wait('@gqlGetLaunchListQuery')\n      .its('response.body.data.launches')\n      .should((launches) => {\n        expect(launches.hasMore).to.be.false\n        expect(launches.length).to.be.lte(20)\n      })\n\n    cy.get('#launch-list').its('length').should('be.gte', 1).and('be.lt', 20)\n    cy.contains('button', 'Load More').should('not.exist')\n  })\n})\n")))}h.isMDXComponent=!0}}]);