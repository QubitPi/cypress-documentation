"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[4292],{3934:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=s(5893),i=s(1151);const r={title:"After Spec API"},o=void 0,l={id:"api/plugins/after-spec-api",title:"After Spec API",description:"The after:spec event fires after a spec file is run. When running cypress via",source:"@site/docs/api/plugins/after-spec-api.mdx",sourceDirName:"api/plugins",slug:"/api/plugins/after-spec-api",permalink:"/api/plugins/after-spec-api",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/plugins/after-spec-api.mdx",tags:[],version:"current",lastUpdatedAt:1728610821,formattedLastUpdatedAt:"Oct 11, 2024",frontMatter:{title:"After Spec API"},sidebar:"api",previous:{title:"After Screenshot API",permalink:"/api/plugins/after-screenshot-api"},next:{title:"Before Run API",permalink:"/api/plugins/before-run-api"}},c={},d=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:2},{value:"Log the relative spec path to stdout after the spec is run",id:"Log-the-relative-spec-path-to-stdout-after-the-spec-is-run",level:3},{value:"Examples",id:"Examples",level:2},{value:"Delete the recorded video if the spec passed",id:"Delete-the-recorded-video-if-the-spec-passed",level:3},{value:"Delete the recorded video if no tests retried",id:"Delete-the-recorded-video-if-no-tests-retried",level:3},{value:"See also",id:"See-also",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{CypressConfigFileTabs:s,Icon:r,WarningSetupNodeEvents:o}=n;return s||h("CypressConfigFileTabs",!0),r||h("Icon",!0),o||h("WarningSetupNodeEvents",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"after:spec"})," event fires after a spec file is run. When running cypress via\n",(0,t.jsx)(n.code,{children:"cypress open"}),", the event will fire when the browser closes."]}),"\n",(0,t.jsx)(n.h2,{id:"Syntax",children:"Syntax"}),"\n",(0,t.jsx)(o,{}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["\u26a0\ufe0f When running via ",(0,t.jsx)(n.code,{children:"cypress open"}),", the ",(0,t.jsx)(n.code,{children:"after:spec"})," event only fires if the\n",(0,t.jsx)(n.a,{href:"/guides/references/configuration#Experiments",children:"experimentalInteractiveRunEvents flag"}),"\nis enabled."]})}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        /* ... */\n      })\n    },\n  },\n})\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        /* ... */\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{name:"angle-right"})," ",(0,t.jsxs)(n.strong,{children:["spec ",(0,t.jsx)(n.em,{children:"(Object)"})]})]}),"\n",(0,t.jsx)(n.p,{children:"Details of the spec file, including the following properties:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"name"})}),(0,t.jsxs)(n.td,{children:["The base name of the spec file (e.g. ",(0,t.jsx)(n.code,{children:"login.cy.js"}),")"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"relative"})}),(0,t.jsxs)(n.td,{children:["The path to the spec file, relative to the project root (e.g. ",(0,t.jsx)(n.code,{children:"cypress/e2e/login.cy.js"}),")"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"absolute"})}),(0,t.jsxs)(n.td,{children:["The absolute path to the spec file (e.g. ",(0,t.jsx)(n.code,{children:"/Users/janelane/my-app/cypress/e2e/login.cy.js"}),")"]})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(r,{name:"angle-right"})," ",(0,t.jsxs)(n.strong,{children:["results ",(0,t.jsx)(n.em,{children:"(Object)"})]})]}),"\n",(0,t.jsx)(n.p,{children:"Details of the spec file's results, including numbers of passes/failures/etc and\ndetails on the tests themselves."}),"\n",(0,t.jsxs)(n.p,{children:["Results are only provided when running via ",(0,t.jsx)(n.code,{children:"cypress run"}),". When running via\n",(0,t.jsx)(n.code,{children:"cypress open"}),", the results will be undefined."]}),"\n",(0,t.jsx)(n.h2,{id:"Usage",children:"Usage"}),"\n",(0,t.jsxs)(n.p,{children:["You can return a promise from the ",(0,t.jsx)(n.code,{children:"after:spec"})," event handler and it will be\nawaited before Cypress proceeds with processing the spec's video or moving on to\nfurther specs if there are any."]}),"\n",(0,t.jsx)(n.h3,{id:"Log-the-relative-spec-path-to-stdout-after-the-spec-is-run",children:"Log the relative spec path to stdout after the spec is run"}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        // spec will look something like this:\n        // {\n        //   name: 'login.cy.js',\n        //   relative: 'cypress/e2e/login.cy.js',\n        //   absolute: '/Users/janelane/my-app/cypress/e2e/login.cy.js',\n        // }\n        // results will look something like this:\n        // {\n        //   stats: {\n        //     suites: 0,\n        //     tests: 1,\n        //     passes: 1,\n        //     pending: 0,\n        //     skipped: 0,\n        //     failures: 0,\n        //     // ...more properties\n        //   }\n        //   reporter: 'spec',\n        //   tests: [\n        //     {\n        //       title: ['login', 'logs user in'],\n        //       state: 'passed',\n        //       // ...more properties...\n        //     }\n        //   ],\n        //   error: null,\n        //   video: '/Users/janelane/my-app/cypress/videos/login.cy.js.mp4',\n        //   screenshots: [],\n        //   // ...more properties...\n        // }\n        console.log('Finished running', spec.relative)\n      })\n    },\n  },\n})\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        // spec will look something like this:\n        // {\n        //   name: 'login.cy.js',\n        //   relative: 'cypress/e2e/login.cy.js',\n        //   absolute: '/Users/janelane/my-app/cypress/e2e/login.cy.js',\n        // }\n        // results will look something like this:\n        // {\n        //   stats: {\n        //     suites: 0,\n        //     tests: 1,\n        //     passes: 1,\n        //     pending: 0,\n        //     skipped: 0,\n        //     failures: 0,\n        //     // ...more properties\n        //   }\n        //   reporter: 'spec',\n        //   tests: [\n        //     {\n        //       title: ['login', 'logs user in'],\n        //       state: 'passed',\n        //       // ...more properties...\n        //     }\n        //   ],\n        //   error: null,\n        //   video: '/Users/janelane/my-app/cypress/videos/login.cy.js.mp4',\n        //   screenshots: [],\n        //   // ...more properties...\n        // }\n        console.log('Finished running', spec.relative)\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"Examples",children:"Examples"}),"\n",(0,t.jsx)(n.h3,{id:"Delete-the-recorded-video-if-the-spec-passed",children:"Delete the recorded video if the spec passed"}),"\n",(0,t.jsx)(n.p,{children:"You can delete the recorded video for a spec when certain conditions are met.\nThis will skip the compression and uploading of the video when recording to\nCypress Cloud."}),"\n",(0,t.jsx)(n.p,{children:"The example below shows how to delete the recorded video for specs with no\nfailing tests."}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\nconst fs = require('fs')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        // Do we have failures?\n        if (results && results.video && results.stats.failures === 0) {\n          // delete the video if the spec passed\n          fs.unlinkSync(results.video)\n        }\n      })\n    },\n  },\n})\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\nimport fs from 'fs'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on(\n        'after:spec',\n        (spec: Cypress.Spec, results: CypressCommandLine.RunResult) => {\n          // Do we have failures?\n          if (results && results.video && results.stats.failures === 0) {\n            // delete the video if the spec passed\n            fs.unlinkSync(results.video)\n          }\n        }\n      )\n    },\n  },\n})\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"Delete-the-recorded-video-if-no-tests-retried",children:"Delete the recorded video if no tests retried"}),"\n",(0,t.jsx)(n.p,{children:"You can delete the recorded video for a spec when certain conditions are met.\nThis will skip the compression and uploading of the video when recording to\nCypress Cloud."}),"\n",(0,t.jsxs)(n.p,{children:["The example below shows how to delete the recorded video for specs that had no\nretry attempts when using Cypress ",(0,t.jsx)(n.a,{href:"/guides/guides/test-retries",children:"test retries"}),"."]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\nconst fs = require('fs')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        if (results && results.video) {\n          // Do we have failures for any retry attempts?\n          const failures = results.tests.some((test) =>\n            test.attempts.some((attempt) => attempt.state === 'failed')\n          )\n          if (!failures) {\n            // delete the video if the spec passed and no tests retried\n            fs.unlinkSync(results.video)\n          }\n        }\n      })\n    },\n  },\n})\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\nimport fs from 'fs'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on(\n        'after:spec',\n        (spec: Cypress.Spec, results: CypressCommandLine.RunResult) => {\n          if (results && results.video) {\n            // Do we have failures for any retry attempts?\n            const failures = results.tests.some((test) =>\n              test.attempts.some((attempt) => attempt.state === 'failed')\n            )\n            if (!failures) {\n              // delete the video if the spec passed and no tests retried\n              fs.unlinkSync(results.video)\n            }\n          }\n        }\n      )\n    },\n  },\n})\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"See-also",children:"See also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/api/plugins/before-spec-api",children:"Before Spec API"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/api/plugins/before-run-api",children:"Before Run API"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/api/plugins/after-run-api",children:"After Run API"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/guides/tooling/plugins-guide",children:"Plugins Guide"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/api/plugins/writing-a-plugin",children:"Writing a Plugin"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>o});var t=s(7294);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);