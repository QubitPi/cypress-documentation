"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[7064],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||r;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={title:"Best Practices"},s=void 0,o={unversionedId:"guides/references/best-practices",id:"guides/references/best-practices",title:"Best Practices",description:"Real World Practices",source:"@site/docs/guides/references/best-practices.mdx",sourceDirName:"guides/references",slug:"/guides/references/best-practices",permalink:"/cypress-documentation/guides/references/best-practices",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/references/best-practices.mdx",tags:[],version:"current",lastUpdatedAt:1698908846,formattedLastUpdatedAt:"Nov 2, 2023",frontMatter:{title:"Best Practices"},sidebar:"guides",previous:{title:"Assertions",permalink:"/cypress-documentation/guides/references/assertions"},next:{title:"Bundled Libraries",permalink:"/cypress-documentation/guides/references/bundled-libraries"}},l={},p=[{value:'<Icon name="angle-right" /> Organizing Tests, Logging In, Controlling State',id:"Organizing-Tests-Logging-In-Controlling-State",level:2},{value:'<Icon name="angle-right" /> Selecting Elements',id:"Selecting-Elements",level:2},{value:"How It Works",id:"How-It-Works",level:3},{value:'<Icon name="graduation-cap" /> Real World Example',id:"Real-World-Example",level:4},{value:"Text Content",id:"Text-Content",level:3},{value:"Cypress and Testing Library",id:"Cypress-and-Testing-Library",level:3},{value:'<Icon name="angle-right" /> Assigning Return Values',id:"Assigning-Return-Values",level:2},{value:'<Icon name="angle-right" /> Visiting External Sites',id:"Visiting-External-Sites",level:2},{value:"Potential Challenges Authenticating with Social Platforms",id:"Potential-Challenges-Authenticating-with-Social-Platforms",level:4},{value:"When logging in",id:"When-logging-in",level:3},{value:"3rd party servers",id:"3rd-party-servers",level:3},{value:"Verifying sent emails",id:"Verifying-sent-emails",level:3},{value:'<Icon name="angle-right" /> Having Tests Rely On The State Of Previous Tests',id:"Having-Tests-Rely-On-The-State-Of-Previous-Tests",level:2},{value:"1. Combine into one test",id:"1-Combine-into-one-test",level:3},{value:"2. Run shared code before each test",id:"2-Run-shared-code-before-each-test",level:3},{value:'<Icon name="angle-right" /> Creating &quot;Tiny&quot; Tests With A Single Assertion <E2EOnlyBadge />',id:"Creating-Tiny-Tests-With-A-Single-Assertion",level:2},{value:'<Icon name="angle-right" /> Using <code>after</code> Or <code>afterEach</code> Hooks',id:"Using-after-Or-afterEach-Hooks",level:2},{value:"Dangling state is your friend",id:"Dangling-state-is-your-friend",level:3},{value:"It&#39;s all downside with no upside",id:"Its-all-downside-with-no-upside",level:3},{value:"State reset should go before each test",id:"State-reset-should-go-before-each-test",level:3},{value:"Is resetting the state necessary?",id:"Is-resetting-the-state-necessary",level:3},{value:'<Icon name="graduation-cap" /> Real World Example',id:"Real-World-Example-1",level:4},{value:'<Icon name="angle-right" /> Unnecessary Waiting',id:"Unnecessary-Waiting",level:2},{value:"Unnecessary wait for <code>cy.request()</code>",id:"Unnecessary-wait-for-cyrequest",level:3},{value:"Unnecessary wait for <code>cy.visit()</code> <E2EOnlyBadge />",id:"Unnecessary-wait-for-cyvisit",level:3},{value:"Unnecessary wait for <code>cy.get()</code>",id:"Unnecessary-wait-for-cyget",level:3},{value:'<Icon name="angle-right" /> Running Tests Intelligently',id:"Running-Tests-Intelligently",level:2},{value:'<Icon name="angle-right" /> Web Servers',id:"Web-Servers",level:2},{value:'<Icon name="angle-right" /> Setting a Global <code>baseUrl</code>',id:"Setting-a-Global-baseUrl",level:2},{value:"Without <code>baseUrl</code> set, Cypress loads main window in <code>localhost</code> + random port",id:"Without-baseUrl-set-Cypress-loads-main-window-in-localhost--random-port",level:3},{value:"Cypress configuration file",id:"Cypress-configuration-file",level:3},{value:"With <code>baseUrl</code> set, Cypress loads main window in <code>baseUrl</code>",id:"With-baseUrl-set-Cypress-loads-main-window-in-baseUrl",level:3},{value:"Usage of <code>baseUrl</code> in depth",id:"Usage-of-baseUrl-in-depth",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},d=c("Icon"),m=c("DocsImage"),u=c("E2EOrCtTabs"),h=c("E2EOnlyBadge"),y=c("SupportFileConfiguration"),g=c("CypressConfigFileTabs"),k={toc:p};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("h3",{parentName:"admonition",id:"Real-World-Practices"},(0,i.kt)(d,{name:"graduation-cap",mdxType:"Icon"})," Real World Practices"),(0,i.kt)("p",{parentName:"admonition"},"The Cypress team maintains the\n","\xa0",(0,i.kt)(d,{name:"github",inline:"true",contentType:"rwa",mdxType:"Icon"}),", a full stack\nexample application that demonstrates ",(0,i.kt)("strong",{parentName:"p"},"best practices and scalable strategies\nwith Cypress in practical and realistic scenarios"),"."),(0,i.kt)("p",{parentName:"admonition"},"The RWA achieves full ",(0,i.kt)("a",{parentName:"p",href:"/guides/tooling/code-coverage"},"code-coverage")," with\nend-to-end tests\n",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/cross-browser-testing"},"across multiple browsers")," and\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/viewport"},"device sizes"),", but also includes\n",(0,i.kt)("a",{parentName:"p",href:"/guides/tooling/visual-testing"},"visual regression tests"),", API tests, unit\ntests, and runs them all in an\n",(0,i.kt)("a",{parentName:"p",href:"https://cloud.cypress.io/projects/7s5okt"},"efficient CI pipeline"),"."),(0,i.kt)("p",{parentName:"admonition"},"The app is bundled with everything you need,\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"just clone the repository"),"\nand start testing.")),(0,i.kt)("h2",{id:"Organizing-Tests-Logging-In-Controlling-State"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"})," Organizing Tests, Logging In, Controlling State"),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Anti-Pattern:"),"\nSharing page objects, using your UI to log in, and not taking shortcuts.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Best Practice:")," Test specs\nin isolation, programmatically log into your application, and take control of\nyour application's state.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},'We gave a "Best Practices" conference talk at AssertJS (February 2018). This\nvideo demonstrates how to approach breaking down your application and organizing\nyour tests.'),(0,i.kt)(d,{name:"play-circle",url:"https://www.youtube.com/watch?v=5XQOK0v_YRE",callout:"AssertJS - Cypress Best Practices",mdxType:"Icon"})),(0,i.kt)("p",null,"We have several\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-example-recipes#logging-in-recipes"},"Logging in recipes"),"\nin our examples."),(0,i.kt)("h2",{id:"Selecting-Elements"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"})," Selecting Elements"),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Anti-Pattern:")," Using\nhighly brittle selectors that are subject to change.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Best Practice:")," Use\n",(0,i.kt)("inlineCode",{parentName:"p"},"data-*")," attributes to provide context to your selectors and isolate them from\nCSS or JS changes.")),(0,i.kt)("p",null,"Every test you write will include selectors for elements. To save yourself a lot\nof headaches, you should write selectors that are resilient to changes."),(0,i.kt)("p",null,"Oftentimes we see users run into problems targeting their elements because:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Your application may use dynamic classes or ID's that change"),(0,i.kt)("li",{parentName:"ul"},"Your selectors break from development changes to CSS styles or JS behavior")),(0,i.kt)("p",null,"Luckily, it is possible to avoid both of these problems."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Don't target elements based on CSS attributes such as: ",(0,i.kt)("inlineCode",{parentName:"li"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"class"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"tag")),(0,i.kt)("li",{parentName:"ol"},"Don't target elements that may change their ",(0,i.kt)("inlineCode",{parentName:"li"},"textContent")),(0,i.kt)("li",{parentName:"ol"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"data-*")," attributes to make it easier to target elements")),(0,i.kt)("h3",{id:"How-It-Works"},"How It Works"),(0,i.kt)("p",null,"Given a button that we want to interact with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<button\n  id="main"\n  class="btn btn-large"\n  name="submission"\n  role="button"\n  data-cy="submit"\n>\n  Submit\n</button>\n')),(0,i.kt)("p",null,"Let's investigate how we could target it:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Selector"),(0,i.kt)("th",{parentName:"tr",align:null},"Recommended"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"cy.get('button').click()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Never"),(0,i.kt)("td",{parentName:"tr",align:null},"Worst - too generic, no context.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"cy.get('.btn.btn-large').click()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Never"),(0,i.kt)("td",{parentName:"tr",align:null},"Bad. Coupled to styling. Highly subject to change.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"cy.get('#main').click()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(d,{name:"exclamation-triangle",color:"orange",mdxType:"Icon"})," Sparingly"),(0,i.kt)("td",{parentName:"tr",align:null},"Better. But still coupled to styling or JS event listeners.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"cy.get('[name=\"submission\"]').click()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(d,{name:"exclamation-triangle",color:"orange",mdxType:"Icon"})," Sparingly"),(0,i.kt)("td",{parentName:"tr",align:null},"Coupled to the ",(0,i.kt)("inlineCode",{parentName:"td"},"name")," attribute which has HTML semantics.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"cy.contains('Submit').click()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," Depends"),(0,i.kt)("td",{parentName:"tr",align:null},"Much better. But still coupled to text content that may change.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"cy.get('[data-cy=\"submit\"]').click()")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," Always"),(0,i.kt)("td",{parentName:"tr",align:null},"Best. Isolated from all changes.")))),(0,i.kt)("p",null,"Targeting the element above by ",(0,i.kt)("inlineCode",{parentName:"p"},"tag"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," is very volatile and\nhighly subject to change. You may swap out the element, you may refactor CSS and\nupdate ID's, or you may add or remove classes that affect the style of the\nelement."),(0,i.kt)("p",null,"Instead, adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"data-cy")," attribute to the element gives us a targeted\nselector that's only used for testing."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"data-cy")," attribute will not change from CSS style or JS behavioral changes,\nmeaning it's not coupled to the ",(0,i.kt)("strong",{parentName:"p"},"behavior")," or ",(0,i.kt)("strong",{parentName:"p"},"styling")," of an element."),(0,i.kt)("p",null,"Additionally, it makes it clear to everyone that this element is used directly\nby test code."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("strong",null,"Did you know?"),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/cypress-app#Selector-Playground"},"Selector Playground"),"\nautomatically follows these best practices."),(0,i.kt)("p",{parentName:"admonition"},"When determining a unique selector, it will automatically prefer elements with:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data-cy")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data-test")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data-testid")))),(0,i.kt)("h4",{id:"Real-World-Example"},(0,i.kt)(d,{name:"graduation-cap",mdxType:"Icon"})," Real World Example"),(0,i.kt)("p",null,"The ",(0,i.kt)(d,{name:"github",inline:"true",contentType:"rwa",mdxType:"Icon"})," uses two useful\ncustom commands for selecting elements for testing:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getBySel")," yields elements with a ",(0,i.kt)("inlineCode",{parentName:"li"},"data-test")," attribute that ",(0,i.kt)("strong",{parentName:"li"},"match")," a\nspecified selector."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getBySelLike")," yields elements with a ",(0,i.kt)("inlineCode",{parentName:"li"},"data-test")," attribute that ",(0,i.kt)("strong",{parentName:"li"},"contains"),"\na specified selector.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// cypress/support/commands.ts\n\nCypress.Commands.add('getBySel', (selector, ...args) => {\n  return cy.get(`[data-test=${selector}]`, ...args)\n})\n\nCypress.Commands.add('getBySelLike', (selector, ...args) => {\n  return cy.get(`[data-test*=${selector}]`, ...args)\n})\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("em",{parentName:"p"},(0,i.kt)(d,{name:"github",mdxType:"Icon"})," Source:\n",(0,i.kt)("a",{parentName:"em",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/support/commands.ts"},"cypress/support/commands.ts")))),(0,i.kt)("h3",{id:"Text-Content"},"Text Content"),(0,i.kt)("p",null,"After reading the above rules you may be wondering:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If I should always use data attributes, then when should I use\n",(0,i.kt)("inlineCode",{parentName:"p"},"cy.contains()"),"?")),(0,i.kt)("p",null,"A rule of thumb is to ask yourself this:"),(0,i.kt)("p",null,"If the content of the element ",(0,i.kt)("strong",{parentName:"p"},"changed")," would you want the test to fail?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the answer is yes: then use ",(0,i.kt)("a",{parentName:"li",href:"/api/commands/contains"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.contains()"))),(0,i.kt)("li",{parentName:"ul"},"If the answer is no: then use a data attribute.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("p",null,"If we looked at the ",(0,i.kt)("inlineCode",{parentName:"p"},"<html>")," of our button again..."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<button id="main" class="btn btn-large" data-cy="submit">Submit</button>\n')),(0,i.kt)("p",null,"The question is: how important is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Submit")," text content to your test? If the\ntext changed from ",(0,i.kt)("inlineCode",{parentName:"p"},"Submit")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"Save")," - would you want the test to fail?"),(0,i.kt)("p",null,"If the answer is ",(0,i.kt)("strong",{parentName:"p"},"yes")," because the word ",(0,i.kt)("inlineCode",{parentName:"p"},"Submit")," is critical and should not be\nchanged - then use ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/contains"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.contains()"))," to target the\nelement. This way, if it is changed, the test will fail."),(0,i.kt)("p",null,"If the answer is ",(0,i.kt)("strong",{parentName:"p"},"no")," because the text could be changed - then use\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/get"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.get()"))," with data attributes. Changing the text to\n",(0,i.kt)("inlineCode",{parentName:"p"},"Save")," would then not cause a test failure."),(0,i.kt)("h3",{id:"Cypress-and-Testing-Library"},"Cypress and Testing Library"),(0,i.kt)("p",null,"Cypress loves the Testing Library project. We use Testing Library internally,\nand our philosophy aligns closely with Testing Library's ethos and approach to\nwriting tests. We strongly endorse their best practices."),(0,i.kt)("p",null,"You can use the\n",(0,i.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/cypress-testing-library/intro/"},"Cypress Testing Library"),"\npackage to use the familiar testing library methods (like ",(0,i.kt)("inlineCode",{parentName:"p"},"findByRole"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"findByLabelText"),", etc...) to select elements in Cypress specs."),(0,i.kt)("p",null,"In particular, if you're looking for more resources to understand how we\nrecommend you approach testing your components, look to: ",(0,i.kt)("a",{parentName:"p",href:"/guides/component-testing/overview"},"Cypress Component Testing"),"."),(0,i.kt)("h2",{id:"Assigning-Return-Values"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"})," Assigning Return Values"),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Anti-Pattern:")," Trying\nto assign the return value of Commands with ",(0,i.kt)("inlineCode",{parentName:"p"},"const"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"let"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"var"),".")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Best Practice:")," Use\n",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/variables-and-aliases"},"aliases and closures to access and store"),"\nwhat Commands yield you.")),(0,i.kt)("p",null,"Many first time users look at Cypress code and think it runs synchronously."),(0,i.kt)("p",null,"We see new users commonly write code that looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// DONT DO THIS. IT DOES NOT WORK\n// THE WAY YOU THINK IT DOES.\nconst a = cy.get('a')\n\ncy.visit('https://example.cypress.io')\n\n// nope, fails\na.first().click()\n\n// Instead, do this.\ncy.get('a').as('links')\ncy.get('@links').first().click()\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("strong",null,"Did you know?"),(0,i.kt)("p",{parentName:"admonition"},"You rarely have to ever use ",(0,i.kt)("inlineCode",{parentName:"p"},"const"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"let"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," in Cypress. If you're using\nthem, you will want to do some refactoring.")),(0,i.kt)("p",null,"If you are new to Cypress and wanting to better understand how Commands work -\n",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/introduction-to-cypress#Chains-of-Commands"},"please read our Introduction to Cypress guide"),"."),(0,i.kt)("p",null,"If you're familiar with Cypress commands already, but find yourself using\n",(0,i.kt)("inlineCode",{parentName:"p"},"const"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"let"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"var")," then you're typically trying to do one of two things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You're trying to ",(0,i.kt)("strong",{parentName:"li"},"store and compare")," values such as ",(0,i.kt)("strong",{parentName:"li"},"text"),", ",(0,i.kt)("strong",{parentName:"li"},"classes"),",\n",(0,i.kt)("strong",{parentName:"li"},"attributes"),"."),(0,i.kt)("li",{parentName:"ul"},"You're trying to share ",(0,i.kt)("strong",{parentName:"li"},"values")," between tests and hooks like ",(0,i.kt)("inlineCode",{parentName:"li"},"before")," and\n",(0,i.kt)("inlineCode",{parentName:"li"},"beforeEach"),".")),(0,i.kt)("p",null,"For working with either of these patterns, please read our\n",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/variables-and-aliases"},"Variables and Aliases guide"),"."),(0,i.kt)("h2",{id:"Visiting-External-Sites"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"})," Visiting External Sites"),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Anti-Pattern:")," Trying\nto visit or interact with sites or servers you do not control.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Best Practice:")," Only test\nwebsites that you control. Try to avoid visiting or requiring a 3rd party\nserver. If you choose, you may use ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/request"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.request()"))," to\ntalk to 3rd party servers via their APIs. If possible, cache results via\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/session"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.session()"))," to avoid repeat visits.")),(0,i.kt)("p",null,"One of the first things many of our users attempt to do is involve 3rd party\nservers or services in their tests."),(0,i.kt)("p",null,"You may want to access 3rd party services in several situations:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Testing log in when your app uses another provider via OAuth."),(0,i.kt)("li",{parentName:"ol"},"Verifying your server updates a 3rd party server."),(0,i.kt)("li",{parentName:"ol"},'Checking your email to see if your server sent a "forgot password" email.')),(0,i.kt)("p",null,"If you choose, these situations can be tested with\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/visit"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.visit()"))," and ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/origin"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.origin()")),".\nHowever, you will only want to utilize these commands for resources in your\ncontrol, either by controlling the domain or hosted instance. These use cases\nare common for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Authentication as a service platforms, such as Auth0, Okta, Microsoft, AWS\nCognito, and others via username/password authentication. These domains and\nservice instances are usually owned and controlled by you or your\norganization."),(0,i.kt)("li",{parentName:"ul"},"CMS instances, such as a Contentful or Wordpress instance."),(0,i.kt)("li",{parentName:"ul"},"Other types of services under a domain in which you control.")),(0,i.kt)("h4",{id:"Potential-Challenges-Authenticating-with-Social-Platforms"},"Potential Challenges Authenticating with Social Platforms"),(0,i.kt)("p",null,"Other services, such as social logins through popular media providers, are not\nrecommended. Testing social logins may work, especially if run locally. However,\nwe consider this a bad practice and do not recommend it because:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It's incredibly time consuming and slows down your tests (unless using\n",(0,i.kt)("a",{parentName:"li",href:"/api/commands/session"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.session()")),")."),(0,i.kt)("li",{parentName:"ul"},"The 3rd party site may have changed or updated its content."),(0,i.kt)("li",{parentName:"ul"},"The 3rd party site may be having issues outside of your control."),(0,i.kt)("li",{parentName:"ul"},"The 3rd party site may detect you are testing via a script and block you."),(0,i.kt)("li",{parentName:"ul"},"The 3rd party site might have policies against automated login, leading to\nbanning of accounts."),(0,i.kt)("li",{parentName:"ul"},"The 3rd party site might detect you are a bot, and provide mechanisms such as\ntwo-factor authentication, captchas, and other means to prevent automation.\nThis is common with continuous integration platforms and general automation."),(0,i.kt)("li",{parentName:"ul"},"The 3rd party site may be running A/B campaigns.")),(0,i.kt)("p",null,"Let's look at a few strategies for dealing with these situations."),(0,i.kt)("h3",{id:"When-logging-in"},"When logging in"),(0,i.kt)("p",null,"Many OAuth providers, especially social logins, run A/B experiments, which means\nthat their login screen is dynamically changing. This makes automated testing\ndifficult."),(0,i.kt)("p",null,"Many OAuth providers also throttle the number of web requests you can make to\nthem. For instance, if you try to test Google, Google will ",(0,i.kt)("strong",{parentName:"p"},"automatically"),"\ndetect that you are not a human and instead of giving you an OAuth login screen,\nthey will make you fill out a captcha."),(0,i.kt)("p",null,"Additionally, testing through an OAuth provider is mutable - you will first need\na real user on their service and then modifying anything on that user might\naffect other tests downstream."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Here are solutions you may choose to use to alleviate these problems:")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Use another platform that you control to log in with username and password\nvia ",(0,i.kt)("a",{parentName:"li",href:"/api/commands/origin"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.origin()")),". This likely guarantees that you\nwill not run into the problems listed above, while still being able to\nautomate your login flow. You can reduce the amount of authentication\nrequests by utilizing ",(0,i.kt)("a",{parentName:"li",href:"/api/commands/session"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.session()")),"."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"/api/commands/stub"},"Stub")," out the OAuth provider and bypass it using their\nUI altogether if ",(0,i.kt)("a",{parentName:"li",href:"/api/commands/origin"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.origin()"))," is not an option. You\ncould trick your application into believing the OAuth provider has passed its\ntoken to your application."),(0,i.kt)("li",{parentName:"ol"},"If you ",(0,i.kt)("strong",{parentName:"li"},"must")," get a real token and ",(0,i.kt)("a",{parentName:"li",href:"/api/commands/origin"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.origin()"))," is\nnot an option, you can use ",(0,i.kt)("a",{parentName:"li",href:"/api/commands/request"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.request()"))," and use\nthe ",(0,i.kt)("strong",{parentName:"li"},"programmatic")," API that your OAuth provider provides. These APIs likely\nchange ",(0,i.kt)("strong",{parentName:"li"},"more")," infrequently and you avoid problems like throttling and A/B\ncampaigns."),(0,i.kt)("li",{parentName:"ol"},"Instead of having your test code bypass OAuth, you could also ask your server\nfor help. Perhaps all an OAuth token does is generate a user in your\ndatabase. Oftentimes OAuth is only useful initially and your server\nestablishes its own session with the client. If that is the case, use\n",(0,i.kt)("a",{parentName:"li",href:"/api/commands/request"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.request()"))," to get the session directly from your\nserver and bypass the provider altogether if\n",(0,i.kt)("a",{parentName:"li",href:"/api/commands/origin"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.origin()"))," is not an option.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("strong",null,"Recipes"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"/examples/recipes"},"We have several examples of doing this in our logging in recipes."))),(0,i.kt)("h3",{id:"3rd-party-servers"},"3rd party servers"),(0,i.kt)("p",null,"Sometimes actions that you take in your application ",(0,i.kt)("strong",{parentName:"p"},"may")," affect another 3rd\nparty application. These situations are not that common, but it is possible.\nImagine your application integrates with GitHub and by using your application\nyou can change data inside of GitHub."),(0,i.kt)("p",null,"After running your test, instead of trying to\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/visit"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.visit()"))," GitHub, you can use\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/request"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.request()"))," to programmatically interact with\nGitHub's APIs directly."),(0,i.kt)("p",null,"This avoids ever needing to touch the UI of another application."),(0,i.kt)("h3",{id:"Verifying-sent-emails"},"Verifying sent emails"),(0,i.kt)("p",null,"Typically, when going through scenarios like user registration or forgotten\npasswords, your server schedules an email to be delivered."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"If your application is running locally and is sending the emails directly\nthrough an SMTP server, you can use a temporary local test SMTP server\nrunning inside Cypress. Read the blog post\n",(0,i.kt)("a",{parentName:"li",href:"https://www.cypress.io/blog/2021/05/11/testing-html-emails-using-cypress/"},'"Testing HTML Emails using Cypress"'),"\nfor details."),(0,i.kt)("li",{parentName:"ol"},"If your application is using a 3rd party email service, or you cannot stub\nthe SMTP requests, you can use a test email inbox with an API access. Read\nthe blog post\n",(0,i.kt)("a",{parentName:"li",href:"https://www.cypress.io/blog/2021/05/24/full-testing-of-html-emails-using-ethereal-accounts/"},'"Full Testing of HTML Emails using SendGrid and Ethereal Accounts"'),"\nfor details.")),(0,i.kt)("p",null,"Cypress can even load the received HTML email in its browser to verify the\nemail's functionality and visual style:"),(0,i.kt)(m,{src:"/img/guides/references/email-test.png",title:"The HTML email loaded during the test",alt:"The test finds and clicks the Confirm registration button",mdxType:"DocsImage"}),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"In other cases, you should try using ",(0,i.kt)("a",{parentName:"li",href:"/api/commands/request"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.request()")),"\ncommand to query the endpoint on your server that tells you what email has\nbeen queued or delivered. That would give you a programmatic way to know\nwithout involving the UI. Your server would have to expose this endpoint."),(0,i.kt)("li",{parentName:"ol"},"You could also use ",(0,i.kt)("inlineCode",{parentName:"li"},"cy.request()")," to a 3rd party email recipient server that\nexposes an API to read off emails. You will then need the proper\nauthentication credentials, which your server could provide, or you could use\nenvironment variables. Some email services already provide\n",(0,i.kt)("a",{parentName:"li",href:"/plugins#email"},"Cypress plugins")," to access emails.")),(0,i.kt)("h2",{id:"Having-Tests-Rely-On-The-State-Of-Previous-Tests"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"})," Having Tests Rely On The State Of Previous Tests"),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Anti-Pattern:"),"\nCoupling multiple tests together.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Best Practice:")," Tests\nshould always be able to be run independently from one another ",(0,i.kt)("strong",{parentName:"p"},"and still\npass"),".")),(0,i.kt)("p",null,"You only need to do one thing to know whether you've coupled your tests\nincorrectly, or if one test is relying on the state of a previous one."),(0,i.kt)("p",null,"Change ",(0,i.kt)("inlineCode",{parentName:"p"},"it")," to ",(0,i.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/api#testonlyname-fn-timeout"},(0,i.kt)("inlineCode",{parentName:"a"},"it.only")),"\non the test and refresh the browser."),(0,i.kt)("p",null,"If this test can run ",(0,i.kt)("strong",{parentName:"p"},"by itself")," and pass - congratulations you have written a\ngood test."),(0,i.kt)("p",null,"If this is not the case, then you should refactor and change your approach."),(0,i.kt)("p",null,"How to solve this:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Move repeated code in previous tests to ",(0,i.kt)("inlineCode",{parentName:"li"},"before")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"beforeEach")," hooks."),(0,i.kt)("li",{parentName:"ul"},"Combine multiple tests into one larger test.")),(0,i.kt)("p",null,"Let's imagine the following test that is filling out the form."),(0,i.kt)("visit-mount-example",null,(0,i.kt)(u,{mdxType:"E2EOrCtTabs"},(0,i.kt)("pre",{parentName:"visit-mount-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// an example of what NOT TO DO\ndescribe('my form', () => {\n  it('visits the form', () => {\n    cy.visit('/users/new')\n  })\n\n  it('requires first name', () => {\n    cy.get('[data-testid=\"first-name\"]').type('Johnny')\n  })\n\n  it('requires last name', () => {\n    cy.get('[data-testid=\"last-name\"]').type('Appleseed')\n  })\n\n  it('can submit a valid form', () => {\n    cy.get('form').submit()\n  })\n})\n")),(0,i.kt)("pre",{parentName:"visit-mount-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// an example of what NOT TO DO\ndescribe('my form', () => {\n  it('visits the form', () => {\n    cy.mount(<UserForm />)\n  })\n\n  it('requires first name', () => {\n    cy.get('[data-testid=\"first-name\"]').type('Johnny')\n  })\n\n  it('requires last name', () => {\n    cy.get('[data-testid=\"last-name\"]').type('Appleseed')\n  })\n\n  it('can submit a valid form', () => {\n    cy.get('form').submit()\n  })\n})\n")))),(0,i.kt)("p",null,"What's wrong with the above tests? They are all coupled together!"),(0,i.kt)("p",null,"If you were to change ",(0,i.kt)("inlineCode",{parentName:"p"},"it")," to\n",(0,i.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/api#testonlyname-fn-timeout"},(0,i.kt)("inlineCode",{parentName:"a"},"it.only"))," on any of the\nlast three tests, they would fail. Each test requires the previous to run in a\nspecific order in order to pass."),(0,i.kt)("p",null,"Here's 2 ways we can fix this:"),(0,i.kt)("h3",{id:"1-Combine-into-one-test"},"1. Combine into one test"),(0,i.kt)("visit-mount-example",null,(0,i.kt)(u,{mdxType:"E2EOrCtTabs"},(0,i.kt)("pre",{parentName:"visit-mount-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// a bit better\ndescribe('my form', () => {\n  it('can submit a valid form', () => {\n    cy.visit('/users/new')\n\n    cy.log('filling out first name') // if you really need this\n    cy.get('[data-testid=\"first-name\"]').type('Johnny')\n\n    cy.log('filling out last name') // if you really need this\n    cy.get('[data-testid=\"last-name\"]').type('Appleseed')\n\n    cy.log('submitting form') // if you really need this\n    cy.get('form').submit()\n  })\n})\n")),(0,i.kt)("pre",{parentName:"visit-mount-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// a bit better\ndescribe('my form', () => {\n  it('can submit a valid form', () => {\n    cy.mount(<NewUser />)\n\n    cy.log('filling out first name') // if you really need this\n    cy.get('[data-testid=\"first-name\"]').type('Johnny')\n\n    cy.log('filling out last name') // if you really need this\n    cy.get('[data-testid=\"last-name\"]').type('Appleseed')\n\n    cy.log('submitting form') // if you really need this\n    cy.get('form').submit()\n  })\n})\n")))),(0,i.kt)("p",null,"Now we can put an ",(0,i.kt)("inlineCode",{parentName:"p"},".only")," on this test and it will run successfully irrespective\nof any other test. The ideal Cypress workflow is writing and iterating on a\nsingle test at a time."),(0,i.kt)("h3",{id:"2-Run-shared-code-before-each-test"},"2. Run shared code before each test"),(0,i.kt)("visit-mount-example",null,(0,i.kt)(u,{mdxType:"E2EOrCtTabs"},(0,i.kt)("pre",{parentName:"visit-mount-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('my form', () => {\n  beforeEach(() => {\n    cy.visit('/users/new')\n    cy.get('[data-testid=\"first-name\"]').type('Johnny')\n    cy.get('[data-testid=\"last-name\"]').type('Appleseed')\n  })\n\n  it('displays form validation', () => {\n    // clear out first name\n    cy.get('[data-testid=\"first-name\"]').clear()\n    cy.get('form').submit()\n    cy.get('[data-testid=\"errors\"]').should('contain', 'First name is required')\n  })\n\n  it('can submit a valid form', () => {\n    cy.get('form').submit()\n  })\n})\n")),(0,i.kt)("pre",{parentName:"visit-mount-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('my form', () => {\n  beforeEach(() => {\n    cy.mount(<NewUser />)\n    cy.get('[data-testid=\"first-name\"]').type('Johnny')\n    cy.get('[data-testid=\"last-name\"]').type('Appleseed')\n  })\n\n  it('displays form validation', () => {\n    // clear out first name\n    cy.get('[data-testid=\"first-name\"]').clear()\n    cy.get('form').submit()\n    cy.get('[data-testid=\"errors\"]').should('contain', 'First name is required')\n  })\n\n  it('can submit a valid form', () => {\n    cy.get('form').submit()\n  })\n})\n")))),(0,i.kt)("p",null,"This above example is ideal because now we are resetting the state between each\ntest and ensuring nothing in previous tests leaks into subsequent ones."),(0,i.kt)("p",null,'We\'re also paving the way to make it less complicated to write multiple tests\nagainst the "default" state of the form. That way each test stays lean but each\ncan be run independently and pass.'),(0,i.kt)("h2",{id:"Creating-Tiny-Tests-With-A-Single-Assertion"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"}),' Creating "Tiny" Tests With A Single Assertion ',(0,i.kt)(h,{mdxType:"E2EOnlyBadge"})),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Anti-Pattern:")," Acting\nlike you're writing unit tests.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Best Practice:")," Add\nmultiple assertions and don't worry about it")),(0,i.kt)("p",null,"We've seen many users writing this kind of code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('my form', () => {\n  beforeEach(() => {\n    cy.visit('/users/new')\n    cy.get('[data-testid=\"first-name\"]').type('johnny')\n  })\n\n  it('has validation attr', () => {\n    cy.get('[data-testid=\"first-name\"]').should(\n      'have.attr',\n      'data-validation',\n      'required'\n    )\n  })\n\n  it('has active class', () => {\n    cy.get('[data-testid=\"first-name\"]').should('have.class', 'active')\n  })\n\n  it('has formatted first name', () => {\n    cy.get('[data-testid=\"first-name\"]')\n      // capitalized first letter\n      .should('have.value', 'Johnny')\n  })\n})\n")),(0,i.kt)("p",null,"While technically this runs fine - this is really excessive, and not performant."),(0,i.kt)("p",null,"Why you do this pattern in component and unit tests:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When assertions failed you relied on the test's title to know what failed"),(0,i.kt)("li",{parentName:"ul"},"You were told that adding multiple assertions was bad and accepted this as\ntruth"),(0,i.kt)("li",{parentName:"ul"},"There was no performance penalty splitting up multiple tests because they run\nreally fast")),(0,i.kt)("p",null,"Why you shouldn't do this in end-to-end tests:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Writing integration tests is not the same as unit tests"),(0,i.kt)("li",{parentName:"ul"},"You will always know (and can visually see) which assertion failed in a large\ntest"),(0,i.kt)("li",{parentName:"ul"},"Cypress runs a series of async lifecycle events that reset state between tests"),(0,i.kt)("li",{parentName:"ul"},"Resetting tests is much slower than adding more assertions")),(0,i.kt)("p",null,"It is common for tests in Cypress to issue 30+ commands. Because nearly every\ncommand has an implicit assertion (and can therefore fail), even by limiting\nyour assertions you're not saving yourself anything because ",(0,i.kt)("strong",{parentName:"p"},"any single command\ncould implicitly fail"),"."),(0,i.kt)("p",null,"How you should rewrite those tests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('my form', () => {\n  beforeEach(() => {\n    cy.visit('/users/new')\n  })\n\n  it('validates and formats first name', () => {\n    cy.get('[data-testid=\"first-name\"]')\n      .type('johnny')\n      .should('have.attr', 'data-validation', 'required')\n      .and('have.class', 'active')\n      .and('have.value', 'Johnny')\n  })\n})\n")),(0,i.kt)("h2",{id:"Using-after-Or-afterEach-Hooks"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"})," Using ",(0,i.kt)("inlineCode",{parentName:"h2"},"after")," Or ",(0,i.kt)("inlineCode",{parentName:"h2"},"afterEach")," Hooks"),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Anti-Pattern:")," Using\n",(0,i.kt)("inlineCode",{parentName:"p"},"after")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"afterEach")," hooks to clean up state.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Best Practice:")," Clean up\nstate ",(0,i.kt)("strong",{parentName:"p"},"before")," tests run.")),(0,i.kt)("p",null,"We see many of our users adding code to an ",(0,i.kt)("inlineCode",{parentName:"p"},"after")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"afterEach")," hook in order\nto clean up the state generated by the current test(s)."),(0,i.kt)("p",null,"We most often see test code that looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"describe('logged in user', () => {\n  beforeEach(() => {\n    cy.login()\n  })\n\n  afterEach(() => {\n    cy.logout()\n  })\n\n  it('tests', ...)\n  it('more', ...)\n  it('things', ...)\n})\n")),(0,i.kt)("p",null,"Let's look at why this is not really necessary."),(0,i.kt)("h3",{id:"Dangling-state-is-your-friend"},"Dangling state is your friend"),(0,i.kt)("p",null,"One of the ",(0,i.kt)("strong",{parentName:"p"},"best")," parts of Cypress is its emphasis on debuggability. Unlike\nother testing tools - when your tests end - you are left with your working\napplication at the exact point where your test finished."),(0,i.kt)("p",null,"This is an ",(0,i.kt)("strong",{parentName:"p"},"excellent")," opportunity for you to ",(0,i.kt)("strong",{parentName:"p"},"use")," your application in the\nstate the tests finished! This enables you to write ",(0,i.kt)("strong",{parentName:"p"},"partial tests")," that drive\nyour application step by step, writing your test and application code at the\nsame time."),(0,i.kt)("p",null,"We have built Cypress to support this use case. In fact, Cypress ",(0,i.kt)("strong",{parentName:"p"},"does not"),"\nclean up its own internal state when the test ends. We ",(0,i.kt)("strong",{parentName:"p"},"want")," you to have\ndangling state at the end of the test! Things like ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/stub"},"stubs"),",\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/spy"},"spies"),", even ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/intercept"},"intercepts")," are\n",(0,i.kt)("strong",{parentName:"p"},"not")," removed at the end of the test. This means your application will behave\nidentically while it is running Cypress commands or when you manually work with\nit after a test ends."),(0,i.kt)("p",null,"If you remove your application's state after each test, then you instantly lose\nthe ability to use your application in this mode. Logging out at the end would\nalways leave you with the same login page at the end of the test. In order to\ndebug your application or write a partial test, you would always be left\ncommenting out your custom ",(0,i.kt)("inlineCode",{parentName:"p"},"cy.logout()")," command."),(0,i.kt)("h3",{id:"Its-all-downside-with-no-upside"},"It's all downside with no upside"),(0,i.kt)("p",null,"For the moment, let's assume that for some reason your application desperately\n",(0,i.kt)("strong",{parentName:"p"},"needs")," that last bit of ",(0,i.kt)("inlineCode",{parentName:"p"},"after")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"afterEach")," code to run. Let's assume that\nif that code is not run - all is lost."),(0,i.kt)("p",null,"That is fine - but even if this is the case, it should not go in an ",(0,i.kt)("inlineCode",{parentName:"p"},"after")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"afterEach")," hook. Why? So far we have been talking about logging out, but let's\nuse a different example. Let's use the pattern of needing to reset your\ndatabase."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"The idea goes like this:")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"After each test I want to ensure the database is reset back to 0 records so\nwhen the next test runs, it is run with a clean state.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"With that in mind you write something like this:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"afterEach(() => {\n  cy.resetDb()\n})\n")),(0,i.kt)("p",null,"Here is the problem: ",(0,i.kt)("strong",{parentName:"p"},"there is no guarantee that this code will run.")),(0,i.kt)("p",null,"If, hypothetically, you have written this command because it ",(0,i.kt)("strong",{parentName:"p"},"has")," to run\nbefore the next test does, then the absolute ",(0,i.kt)("strong",{parentName:"p"},"worst place")," to put it is in an\n",(0,i.kt)("inlineCode",{parentName:"p"},"after")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"afterEach")," hook."),(0,i.kt)("p",null,"Why? Because if you refresh Cypress in the middle of the test - you will have\nbuilt up partial state in the database, and your custom ",(0,i.kt)("inlineCode",{parentName:"p"},"cy.resetDb()")," function\n",(0,i.kt)("strong",{parentName:"p"},"will never get called"),"."),(0,i.kt)("p",null,"If this state cleanup is ",(0,i.kt)("strong",{parentName:"p"},"truly")," required, then the next test will instantly\nfail. Why? Because resetting the state never happened when you refreshed\nCypress."),(0,i.kt)("h3",{id:"State-reset-should-go-before-each-test"},"State reset should go before each test"),(0,i.kt)("p",null,"The simplest solution here is to move your reset code to ",(0,i.kt)("strong",{parentName:"p"},"before")," the test\nruns."),(0,i.kt)("p",null,"Code put in a ",(0,i.kt)("inlineCode",{parentName:"p"},"before")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeEach")," hook will ",(0,i.kt)("strong",{parentName:"p"},"always")," run prior to the\ntest - even if you refreshed Cypress in the middle of an existing one!"),(0,i.kt)("p",null,"This is also a great opportunity to use\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mochajs/mochajs.github.io/blob/master/index.md#root-level-hooks"},"root level hooks in mocha"),"."),(0,i.kt)(y,{mdxType:"SupportFileConfiguration"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hooks you add to the root will always run on all suites!")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// cypress/support/e2e.js or cypress/support/component.js\n\nbeforeEach(() => {\n  // now this runs prior to every test\n  // across all files no matter what\n  cy.resetDb()\n})\n")),(0,i.kt)("h3",{id:"Is-resetting-the-state-necessary"},"Is resetting the state necessary?"),(0,i.kt)("p",null,"One final question you should ask yourself is - is resetting the state even\nnecessary? Remember, Cypress already automatically enforces\n",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/writing-and-organizing-tests#Test-Isolation"},"test isolation"),"\nby clearing state before each test. Make sure you are not trying to clean up\nstate that is already cleaned up by Cypress automatically."),(0,i.kt)("p",null,"If the state you are trying to clean lives on the server - by all means, clean\nthat state. You will need to run these types of routines! But if the state is\nrelated to your application currently under test - you likely do not even need\nto clear it."),(0,i.kt)("p",null,"The only times you ",(0,i.kt)("strong",{parentName:"p"},"ever")," need to clean up state, is if the operations that\none test runs affects another test downstream. In only those cases do you need\nstate cleanup."),(0,i.kt)("h4",{id:"Real-World-Example-1"},(0,i.kt)(d,{name:"graduation-cap",mdxType:"Icon"})," Real World Example"),(0,i.kt)("p",null,"The ",(0,i.kt)(d,{name:"github",inline:"true",contentType:"rwa",mdxType:"Icon"})," resets and re-seeds\nits database via a custom ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/task"},"Cypress task")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"db:seed")," in\na ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeEach")," hook. This allows each test to start from a clean slate and a\ndeterministic state. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// cypress/tests/ui/auth.cy.ts\n\nbeforeEach(function () {\n  cy.task('db:seed')\n  // ...\n})\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("em",{parentName:"p"},(0,i.kt)(d,{name:"github",mdxType:"Icon"})," Source:\n",(0,i.kt)("a",{parentName:"em",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/tests/ui/auth.spec.ts"},"cypress/tests/ui/auth.cy.ts")))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"db:seed")," task is defined within the\n",(0,i.kt)("a",{parentName:"p",href:"/guides/tooling/plugins-guide#Using-a-plugin"},"setupNodeEvents")," function of the\nproject, and in this case sends a request to a dedicated back end API of the app\nto appropriately re-seed the database."),(0,i.kt)("cypress-config-plugin-example",null,(0,i.kt)(g,{mdxType:"CypressConfigFileTabs"},(0,i.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        async 'db:seed'() {\n          // Send request to backend API to re-seed database with test data\n          const { data } = await axios.post(`${testDataApiEndpoint}/seed`)\n          return data\n        },\n        //...\n      })\n    },\n  },\n})\n")),(0,i.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        async 'db:seed'() {\n          // Send request to backend API to re-seed database with test data\n          const { data } = await axios.post(`${testDataApiEndpoint}/seed`)\n          return data\n        },\n        //...\n      })\n    },\n  },\n})\n")))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("em",{parentName:"p"},(0,i.kt)(d,{name:"github",mdxType:"Icon"})," Source:\n",(0,i.kt)("a",{parentName:"em",href:"https://github.com/cypress-io/cypress-realworld-app/blob/develop/cypress/plugins/index.ts"},"cypress/plugins/index.ts")))),(0,i.kt)("p",null,"The same practice above can be used for any type of database (PostgreSQL,\nMongoDB, etc.). In this example, a request is sent to a back end API, but you\ncould also interact directly with your database with direct queries, custom\nlibraries, etc. If you already have non-JavaScript methods of handling or\ninteracting with your database, you can use ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/exec"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.exec")),",\ninstead of ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/task"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.task")),", to execute any system command or\nscript."),(0,i.kt)("h2",{id:"Unnecessary-Waiting"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"})," Unnecessary Waiting"),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Anti-Pattern:"),"\nWaiting for arbitrary time periods using\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/wait#Time"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.wait(Number)")),".")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Best Practice:")," Use route\naliases or assertions to guard Cypress from proceeding until an explicit\ncondition is met.")),(0,i.kt)("p",null,"In Cypress, you almost never need to use ",(0,i.kt)("inlineCode",{parentName:"p"},"cy.wait()")," for an arbitrary amount of\ntime. If you are finding yourself doing this, there is likely a much simpler\nway."),(0,i.kt)("p",null,"Let's imagine the following examples:"),(0,i.kt)("h3",{id:"Unnecessary-wait-for-cyrequest"},"Unnecessary wait for ",(0,i.kt)("inlineCode",{parentName:"h3"},"cy.request()")),(0,i.kt)("p",null,"Waiting here is unnecessary since the ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/request"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.request()")),"\ncommand will not resolve until it receives a response from your server. Adding\nthe wait here only adds 5 seconds after the\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/request"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.request()"))," has already resolved."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.request('http://localhost:8080/db/seed')\ncy.wait(5000) // <--- this is unnecessary\n")),(0,i.kt)("h3",{id:"Unnecessary-wait-for-cyvisit"},"Unnecessary wait for ",(0,i.kt)("inlineCode",{parentName:"h3"},"cy.visit()")," ",(0,i.kt)(h,{mdxType:"E2EOnlyBadge"})),(0,i.kt)("p",null,"Waiting for this is unnecessary because the ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/visit"},"cy.visit()"),"\nresolves once the page fires its ",(0,i.kt)("inlineCode",{parentName:"p"},"load")," event. By that time all of your assets\nhave been loaded including javascript, stylesheets, and html."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.visit('http://localhost/8080')\ncy.wait(5000) // <--- this is unnecessary\n")),(0,i.kt)("h3",{id:"Unnecessary-wait-for-cyget"},"Unnecessary wait for ",(0,i.kt)("inlineCode",{parentName:"h3"},"cy.get()")),(0,i.kt)("p",null,"Waiting for the ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/get"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.get()"))," below is unnecessary because\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/get"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.get()"))," automatically retries until the table's ",(0,i.kt)("inlineCode",{parentName:"p"},"tr")," has\na length of 2."),(0,i.kt)("p",null,"Whenever commands have an assertion they will not resolve until their associated\nassertions pass. This enables you to describe the state of your application\nwithout having to worry about when it gets there."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.intercept('GET', '/users', [{ name: 'Maggy' }, { name: 'Joan' }])\ncy.get('#fetch').click()\ncy.wait(4000) // <--- this is unnecessary\ncy.get('table tr').should('have.length', 2)\n")),(0,i.kt)("p",null,"Alternatively a better solution to this problem is by waiting explicitly for an\naliased route."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.intercept('GET', '/users', [{ name: 'Maggy' }, { name: 'Joan' }]).as(\n  'getUsers'\n)\ncy.get('[data-testid=\"fetch-users\"]').click()\ncy.wait('@getUsers') // <--- wait explicitly for this route to finish\ncy.get('table tr').should('have.length', 2)\n")),(0,i.kt)("h2",{id:"Running-Tests-Intelligently"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"})," Running Tests Intelligently"),(0,i.kt)("p",null,"As your test suite grows and takes longer to run, you may find yourself hitting\nperformance bottlenecks on your CI system. We recommend integrating your source\ncontrol system with your test suite such that merges are blocked until all your\nCypress tests have passed. The downside of this is that longer test execution\ntimes slow the velocity at which branches may be merged and features may be\nshipped. This issue is compounded further if you have dependent chains of\nbranches waiting to be merged."),(0,i.kt)("p",null,"One solution to this problem is ",(0,i.kt)("strong",{parentName:"p"},"Smart Orchestration")," with Cypress Cloud.\nUsing a combination of\n",(0,i.kt)("a",{parentName:"p",href:"/guides/cloud/smart-orchestration/parallelization"},"parallelization"),",\n",(0,i.kt)("a",{parentName:"p",href:"/guides/cloud/smart-orchestration/load-balancing#Balance-strategy"},"load balancing"),",\n",(0,i.kt)("a",{parentName:"p",href:"/guides/cloud/smart-orchestration/run-cancellation"},"Auto Cancellation"),", and\n",(0,i.kt)("a",{parentName:"p",href:"/guides/cloud/smart-orchestration/spec-prioritization"},"Spec Prioritization"),",\nSmart Orchestration maximizes your available compute resources & minimizes\nwaste."),(0,i.kt)("h2",{id:"Web-Servers"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"})," Web Servers"),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Anti-Pattern:")," Trying\nto start a web server from within Cypress scripts with\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/exec"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.exec()"))," or ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/task"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.task()")),".")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Best Practice:")," Start a web\nserver prior to running Cypress.")),(0,i.kt)("p",null,"We do NOT recommend trying to start your back end web server from within\nCypress."),(0,i.kt)("p",null,"Any command run by ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/exec"},"cy.exec()")," or\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/task"},"cy.task()")," has to exit eventually. Otherwise, Cypress will\nnot continue running any other commands."),(0,i.kt)("p",null,"Trying to start a web server from ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/exec"},"cy.exec()")," or\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/task"},"cy.task()")," causes all kinds of problems because:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You have to background the process"),(0,i.kt)("li",{parentName:"ul"},"You lose access to it via terminal"),(0,i.kt)("li",{parentName:"ul"},"You don't have access to its ",(0,i.kt)("inlineCode",{parentName:"li"},"stdout")," or logs"),(0,i.kt)("li",{parentName:"ul"},"Every time your tests run, you'd have to work out the complexity around\nstarting an already running web server."),(0,i.kt)("li",{parentName:"ul"},"You would likely encounter constant port conflicts")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Why can't I shut down the process in an ",(0,i.kt)("inlineCode",{parentName:"strong"},"after")," hook?")),(0,i.kt)("p",null,"Because there is no guarantee that code running in an ",(0,i.kt)("inlineCode",{parentName:"p"},"after")," will always run."),(0,i.kt)("p",null,"While working in the Cypress Test Runner you can always restart / refresh while\nin the middle of a test. When that happens, code in an ",(0,i.kt)("inlineCode",{parentName:"p"},"after")," won't execute."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"What should I do then?")),(0,i.kt)("p",null,"Start your web server before running Cypress and kill it after it completes."),(0,i.kt)("p",null,"Are you trying to run in CI?"),(0,i.kt)("p",null,"We have\n",(0,i.kt)("a",{parentName:"p",href:"/guides/continuous-integration/introduction#Boot-your-server"},"examples showing you how to start and stop your web server"),"."),(0,i.kt)("h2",{id:"Setting-a-Global-baseUrl"},(0,i.kt)(d,{name:"angle-right",mdxType:"Icon"})," Setting a Global ",(0,i.kt)("inlineCode",{parentName:"h2"},"baseUrl")),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Anti-Pattern:")," Using\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/visit"},"cy.visit()")," without setting a ",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl"),".")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"\u202f",(0,i.kt)(d,{name:"check-circle",color:"green",mdxType:"Icon"})," ",(0,i.kt)("strong",{parentName:"p"},"Best Practice:")," Set a\n",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl")," in your ",(0,i.kt)("a",{parentName:"p",href:"/guides/references/configuration"},"Cypress configuration"),".")),(0,i.kt)("p",null,"By adding a ",(0,i.kt)("a",{parentName:"p",href:"/guides/references/configuration#Global"},"baseUrl")," in your\nconfiguration Cypress will attempt to prefix the ",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl")," any URL provided to\ncommands like ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/visit"},"cy.visit()")," and\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/request"},"cy.request()")," that are not fully qualified domain name\n(FQDN) URLs."),(0,i.kt)("p",null,"This allows you to omit hard-coding fully qualified domain name (FQDN) URLs in\ncommands. For example,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.visit('http://localhost:8080/index.html')\n")),(0,i.kt)("p",null,"can be shortened to"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.visit('index.html')\n")),(0,i.kt)("p",null,"Not only does this create tests that can easily switch between domains, i.e.\nrunning a dev server on ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:8080")," vs a deployed production server\ndomain, but adding a ",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl")," can also save some time during the initial\nstartup of your Cypress tests."),(0,i.kt)("p",null,"When you start running your tests, Cypress does not know the url of the app you\nplan to test. So, Cypress initially opens on ",(0,i.kt)("inlineCode",{parentName:"p"},"https://localhost")," + a random\nport."),(0,i.kt)("h3",{id:"Without-baseUrl-set-Cypress-loads-main-window-in-localhost--random-port"},"Without ",(0,i.kt)("inlineCode",{parentName:"h3"},"baseUrl")," set, Cypress loads main window in ",(0,i.kt)("inlineCode",{parentName:"h3"},"localhost")," + random port"),(0,i.kt)(m,{src:"/img/guides/references/cypress-loads-in-localhost-and-random-port.png",alt:"Url address shows localhost:53927/__/#tests/integration/organizations/list_spec.coffee",mdxType:"DocsImage"}),(0,i.kt)("p",null,"As soon as it encounters a ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/visit"},"cy.visit()"),", Cypress then\nswitches to the url of the main window to the url specified in your visit. This\ncan result in a 'flash' or 'reload' when your tests first start."),(0,i.kt)("p",null,"By setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl"),", you can avoid this reload altogether. Cypress will\nload the main window in the ",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl")," you specified as soon as your tests start."),(0,i.kt)("h3",{id:"Cypress-configuration-file"},"Cypress configuration file"),(0,i.kt)("cypress-config-example",null,(0,i.kt)(g,{mdxType:"CypressConfigFileTabs"},(0,i.kt)("pre",{parentName:"cypress-config-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  e2e: {\n    baseUrl: 'http://localhost:8484',\n  },\n})\n")),(0,i.kt)("pre",{parentName:"cypress-config-example"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  e2e: {\n    baseUrl: 'http://localhost:8484',\n  },\n})\n")))),(0,i.kt)("h3",{id:"With-baseUrl-set-Cypress-loads-main-window-in-baseUrl"},"With ",(0,i.kt)("inlineCode",{parentName:"h3"},"baseUrl")," set, Cypress loads main window in ",(0,i.kt)("inlineCode",{parentName:"h3"},"baseUrl")),(0,i.kt)(m,{src:"/img/guides/references/cypress-loads-window-in-base-url-localhost.png",alt:"Url address bar shows localhost:8484/__tests/integration/organizations/list_spec.coffee",mdxType:"DocsImage"}),(0,i.kt)("p",null,"Having a ",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl")," set gives you the added bonus of seeing an error if your\nserver is not running during ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress open")," at the specified ",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl"),"."),(0,i.kt)(m,{src:"/img/guides/references/cypress-ensures-baseUrl-server-is-running.png",alt:"Cypress Launchpad with warning about how Cypress could not verify server set as the baseUrl is running",mdxType:"DocsImage"}),(0,i.kt)("p",null,"We also display an error if your server is not running at the specified\n",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl")," during ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress run")," after several retries."),(0,i.kt)(m,{src:"/img/guides/references/cypress-verifies-server-is-running-during-cypress-run.png",alt:"The terminal warns and retries when the url at your baseUrl is not running",mdxType:"DocsImage"}),(0,i.kt)("h3",{id:"Usage-of-baseUrl-in-depth"},"Usage of ",(0,i.kt)("inlineCode",{parentName:"h3"},"baseUrl")," in depth"),(0,i.kt)("p",null,"This ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=f5UaXuAc52c"},"short video")," explains in\ndepth how to use ",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl")," correctly."))}f.isMDXComponent=!0}}]);