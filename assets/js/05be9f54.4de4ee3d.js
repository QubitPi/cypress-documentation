"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[1289],{509:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>r});var t=i(5893),n=i(1151);const l={sidebar_label:"Block pull requests and set policies",title:"Block pull requests and set policies | Cypress Accessibility Documentation",description:"Set policies and block pull requests automatically with Cypress Accessibility's Results API, enabling custom CI workflows to enforce accessibility standards and prevent regressions.",sidebar_position:40},c="Block pull requests and set policies",o={id:"accessibility/guides/block-pull-requests",title:"Block pull requests and set policies | Cypress Accessibility Documentation",description:"Set policies and block pull requests automatically with Cypress Accessibility's Results API, enabling custom CI workflows to enforce accessibility standards and prevent regressions.",source:"@site/docs/accessibility/guides/block-pull-requests.mdx",sourceDirName:"accessibility/guides",slug:"/accessibility/guides/block-pull-requests",permalink:"/accessibility/guides/block-pull-requests",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/accessibility/guides/block-pull-requests.mdx",tags:[],version:"current",lastUpdatedAt:1752681606,formattedLastUpdatedAt:"Jul 16, 2025",sidebarPosition:40,frontMatter:{sidebar_label:"Block pull requests and set policies",title:"Block pull requests and set policies | Cypress Accessibility Documentation",description:"Set policies and block pull requests automatically with Cypress Accessibility's Results API, enabling custom CI workflows to enforce accessibility standards and prevent regressions.",sidebar_position:40},sidebar:"accessibility",previous:{title:"Maintain accessibility",permalink:"/accessibility/guides/maintain-accessibility"},next:{title:"Feedback during local development",permalink:"/accessibility/guides/local-development"}},a={},r=[{value:"Using the Results API",id:"Using-the-Results-API",level:2},{value:"Implementing a status check",id:"Implementing-a-status-check",level:2},{value:"Defining policies in the verification step",id:"Defining-policies-in-the-verification-step",level:2}];function u(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...e.components},{DocsImage:i,ProductHeading:l}=s;return i||p("DocsImage",!0),l||p("ProductHeading",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(l,{product:"accessibility"}),"\n",(0,t.jsx)(s.h1,{id:"Block-pull-requests-and-set-policies",children:"Block pull requests and set policies"}),"\n",(0,t.jsx)(s.p,{children:"Cypress Accessibility reports are generated server-side in Cypress Cloud, based on test artifacts uploaded during execution. This ensures there is no performance impact on your Cypress test runs."}),"\n",(0,t.jsx)(s.h2,{id:"Using-the-Results-API",children:"Using the Results API"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.a,{href:"/accessibility/results-api",children:"Cypress Accessibility Results API"})," allows you to access accessibility results post-test run, enabling workflows like blocking pull requests or triggering alerts based on specific accessibility criteria. This involves adding a dedicated accessibility verification step to your CI pipeline. With a Cypress helper function, you can automatically fetch the report for the relevant test run within the CI build context. Below is an example of how to block a pull request in GitHub Actions if accessibility violations occur:"]}),"\n",(0,t.jsx)(i,{src:"/img/accessibility/guides/github-actions-a11y-block.png",width:"75%",alt:"On the left hand side, a list of Github Actions jobs is presented related to building, testing and deploying a website. Everything has a green checkmark except the `verify-accessibility-results` job, and the 'test' job that is its parents. On the right hand side we see the terminal output for that job which warns us that the 'button-name' rule has been broken, and that it was previously passing.",noBorder:!0}),"\n",(0,t.jsx)(s.h2,{id:"Implementing-a-status-check",children:"Implementing a status check"}),"\n",(0,t.jsx)(s.p,{children:"The Results API offers full flexibility to analyze results and take tailored actions. It can also integrate with status checks on pull requests. Below is an example of a passing accessibility verification step:"}),"\n",(0,t.jsx)(i,{src:"/img/accessibility/guides/status-check.png",width:"75%",alt:"An example list of GitHub Status Checks including a passing `verify-accessibility-results` check",noBorder:!0}),"\n",(0,t.jsx)(s.h2,{id:"Defining-policies-in-the-verification-step",children:"Defining policies in the verification step"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.a,{href:"/accessibility/results-api",children:"Results API Documentation"})," provides detailed guidance on the API's capabilities. Here's a simplified example demonstrating how to enforce a \"no new failing accessibility rules\" policy:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"const { getAccessibilityResults } = require('@cypress/extract-cloud-results')\n\n// List of known failing rules\nconst rulesWithExistingViolations = [\n  'button-name',\n  // Add more rules as needed\n]\n\n// Fetch accessibility results\ngetAccessibilityResults().then((results) => {\n  // Identify new rule violations\n  const newRuleViolations = results.rules.filter((rule) => {\n    return !rulesWithExistingViolations.includes(rule.name)\n  })\n\n  if (newRuleViolations.length > 0) {\n    // Trigger appropriate action if new violations are detected\n    throw new Error(\n      `${newRuleViolations.length} new rule violations detected. These must be resolved.`\n    )\n  }\n})\n"})}),"\n",(0,t.jsx)(s.p,{children:"By examining the results and customizing your response, you gain maximum control over how to handle accessibility violations. Leverage CI environment context, such as tags, to fine-tune responses to specific accessibility outcomes."})]})}function d(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}function p(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,s,i)=>{i.d(s,{Z:()=>o,a:()=>c});var t=i(7294);const n={},l=t.createContext(n);function c(e){const s=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),t.createElement(l.Provider,{value:s},e.children)}}}]);