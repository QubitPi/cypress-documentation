"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[3607],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,y=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={title:"TypeScript"},i=void 0,s={unversionedId:"guides/tooling/typescript-support",id:"guides/tooling/typescript-support",title:"TypeScript",description:"Cypress ships with",source:"@site/docs/guides/tooling/typescript-support.mdx",sourceDirName:"guides/tooling",slug:"/guides/tooling/typescript-support",permalink:"/cypress-documentation/guides/tooling/typescript-support",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/tooling/typescript-support.mdx",tags:[],version:"current",lastUpdatedAt:1702621628,formattedLastUpdatedAt:"Dec 15, 2023",frontMatter:{title:"TypeScript"},sidebar:"guides",previous:{title:"Reporters",permalink:"/cypress-documentation/guides/tooling/reporters"},next:{title:"Visual Testing",permalink:"/cypress-documentation/guides/tooling/visual-testing"}},p={},l=[{value:"Install TypeScript",id:"Install-TypeScript",level:3},{value:"Configure tsconfig.json",id:"Configure-tsconfigjson",level:3},{value:"Clashing Types with Jest",id:"Clashing-Types-with-Jest",level:3},{value:"Types for Custom Commands",id:"Types-for-Custom-Commands",level:3},{value:"Adding child or dual commands",id:"Adding-child-or-dual-commands",level:4},{value:"Overwriting child or dual commands",id:"Overwriting-child-or-dual-commands",level:4},{value:"Examples:",id:"Examples",level:4},{value:"Types for custom assertions",id:"Types-for-custom-assertions",level:3},{value:"Types for plugins",id:"Types-for-plugins",level:3},{value:"Using an External Typings File",id:"Using-an-External-Typings-File",level:3},{value:"Set up your dev environment",id:"Set-up-your-dev-environment",level:3},{value:"Clashing types with Jest",id:"Clashing-types-with-Jest",level:3},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},m=c("Tabs"),d=c("TabItem"),u=c("E2EOrCtTabs"),y=c("WarningPluginsFile"),g={toc:l};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Cypress ships with\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/tree/develop/cli/types"},"official type declarations"),"\nfor ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/"},"TypeScript"),". This allows you to write your\ntests in TypeScript."),(0,r.kt)("h3",{id:"Install-TypeScript"},"Install TypeScript"),(0,r.kt)("p",null,"To use TypeScript with Cypress, you will need TypeScript 3.4+. If you do not\nalready have TypeScript installed as a part of your framework, you will need to\ninstall it:"),(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(d,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install --save-dev typescript\n"))),(0,r.kt)(d,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add --dev typescript\n")))),(0,r.kt)("h3",{id:"Configure-tsconfigjson"},"Configure tsconfig.json"),(0,r.kt)("p",null,"We recommend creating a\n",(0,r.kt)("a",{parentName:"p",href:"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html"},(0,r.kt)("inlineCode",{parentName:"a"},"tsconfig.json")),"\ninside your\n",(0,r.kt)("a",{parentName:"p",href:"/guides/core-concepts/writing-and-organizing-tests#Folder-Structure"},(0,r.kt)("inlineCode",{parentName:"a"},"cypress")," folder"),"\nwith the following configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "target": "es5",\n    "lib": ["es5", "dom"],\n    "types": ["cypress", "node"]\n  },\n  "include": ["**/*.ts"]\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},'"types"')," will tell the TypeScript compiler to only include type definitions\nfrom Cypress. This will address instances where the project also uses\n",(0,r.kt)("inlineCode",{parentName:"p"},"@types/chai")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"@types/jquery"),". Since\n",(0,r.kt)("a",{parentName:"p",href:"/guides/references/bundled-libraries#Chai"},"Chai")," and\n",(0,r.kt)("a",{parentName:"p",href:"/guides/references/bundled-libraries#Other-Library-Utilities"},"jQuery")," are\nnamespaces (globals), incompatible versions will cause the package manager\n(",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"npm"),") to nest and include multiple definitions and cause conflicts."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You may have to restart your IDE's TypeScript server if the setup above does not\nappear to work. For example:"),(0,r.kt)("p",{parentName:"admonition"},"VS Code (within a .ts or .js file):"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Open the command palette (Mac: ",(0,r.kt)("inlineCode",{parentName:"li"},"cmd+shift+p"),", Windows: ",(0,r.kt)("inlineCode",{parentName:"li"},"ctrl+shift+p"),")"),(0,r.kt)("li",{parentName:"ul"},'Type "restart ts" and select the "TypeScript: Restart TS server." option')),(0,r.kt)("p",{parentName:"admonition"},"If that does not work, try restarting the IDE.")),(0,r.kt)("h3",{id:"Clashing-Types-with-Jest"},"Clashing Types with Jest"),(0,r.kt)("p",null,"You may want to consider configuring your app with separate ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," to solve\n",(0,r.kt)("a",{parentName:"p",href:"/guides/tooling/typescript-support#Clashing-types-with-Jest"},"clashing types with jest"),".\nYou will need to exclude ",(0,r.kt)("inlineCode",{parentName:"p"},"cypress.config.ts"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"cypress"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"node_modules")," in your\nroot ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "exclude": ["cypress.config.ts", "cypress", "node_modules"]\n}\n')),(0,r.kt)("h3",{id:"Types-for-Custom-Commands"},"Types for Custom Commands"),(0,r.kt)("p",null,"When adding ",(0,r.kt)("a",{parentName:"p",href:"/api/cypress-api/custom-commands"},"custom commands")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"cy"),"\nobject, you can manually add their types to avoid TypeScript errors."),(0,r.kt)("p",null,"For example if you add the command ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.dataCy")," into your\n",(0,r.kt)("a",{parentName:"p",href:"/guides/references/configuration#Folders-Files"},"supportFile")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// cypress/support/index.ts\nCypress.Commands.add('dataCy', (value) => {\n  return cy.get(`[data-cy=${value}]`)\n})\n")),(0,r.kt)("p",null,"Then you can add the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataCy")," command to the global Cypress Chainable interface\n(so called because commands are chained together)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// cypress/support/index.ts\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Custom command to select DOM element by data-cy attribute.\n       * @example cy.dataCy('greeting')\n       */\n      dataCy(value: string): Chainable<JQuery<HTMLElement>>\n    }\n  }\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"How to declare types for Cypress custom commands under typescript-eslint/no-namespace?")),(0,r.kt)("admonition",{title:"How to declare types for Cypress custom commands under typescript-eslint/no-namespace?",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Note that Typescript ESLint is unhappy about this due to\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-namespace.md"},'"ES2015 module syntax is preferred over custom TypeScript modules and namespaces @typescript-eslint/no-namespace"'),"."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://typescript-eslint.io/rules/no-namespace/"},(0,r.kt)("inlineCode",{parentName:"a"},"@typescript-eslint/no-namespace")," rule allows ",(0,r.kt)("inlineCode",{parentName:"a"},"declare")," with custom TypeScript namespaces inside definition files"),".\nSo we may create a ",(0,r.kt)("strong",{parentName:"p"},"cypress.d.ts")," definition file and cut the types for our custom commands/assertions from the\nsupport file into this file:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// ./cypress.d.ts\n\ndeclare namespace Cypress {\n  interface Chainable {\n    /**\n     * Custom command to select DOM element by data-cy attribute.\n     * @example cy.dataCy('greeting')\n     */\n    dataCy(value: string): Chainable<Element>\n  }\n}\n")),(0,r.kt)("p",{parentName:"admonition"},"We might need to include the ",(0,r.kt)("inlineCode",{parentName:"p"},"*.d.ts")," in the include options in any ",(0,r.kt)("em",{parentName:"p"},"tsconfig.json")," files in our project for TypeScript\nto pick up the new types:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// tsconfig.json\n\n"include": [\n  "src",\n  "./cypress.d.ts"\n]\n')),(0,r.kt)("p",{parentName:"admonition"},"check ",(0,r.kt)("a",{parentName:"p",href:"/guides/tooling/typescript-support#Using-an-External-Typings-File"},"TypeScript Configuration")," for more info.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Types of all the parameters taken by the implementation callback are inferred\nautomatically based on the declared interface. Thus, in the example above, the\n",(0,r.kt)("inlineCode",{parentName:"p"},"value")," will be of type ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," implicitly.")),(0,r.kt)("p",null,"In your specs, you can now use the custom command as expected"),(0,r.kt)("visit-mount-example",null,(0,r.kt)(u,{mdxType:"E2EOrCtTabs"},(0,r.kt)("pre",{parentName:"visit-mount-example"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('works', () => {\n  // from your cypress/e2e/spec.cy.ts\n  cy.visit('/')\n  // IntelliSense and TS compiler should\n  // not complain about unknown method\n  cy.dataCy('greeting')\n})\n")),(0,r.kt)("pre",{parentName:"visit-mount-example"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"it('works', () => {\n  // from your src/components/MyComponent.cy.ts\n  cy.mount(<MyComponent />)\n  // IntelliSense and TS compiler should\n  // not complain about unknown method\n  cy.dataCy('greeting')\n})\n")))),(0,r.kt)("h4",{id:"Adding-child-or-dual-commands"},"Adding child or dual commands"),(0,r.kt)("p",null,"When you add a custom command with ",(0,r.kt)("inlineCode",{parentName:"p"},"prevSubject"),", Cypress will infer the subject\ntype automatically based on the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"prevSubject"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// cypress/support/index.ts\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Custom command to type a few random words into input elements\n       * @param count=3\n       * @example cy.get('input').typeRandomWords()\n       */\n      typeRandomWords(\n        count?: number,\n        options?: Partial<TypeOptions>\n      ): Chainable<JQuery<HTMLElement>>\n    }\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// cypress/support/index.ts\nCypress.Commands.add(\n  'typeRandomWords',\n  { prevSubject: 'element' },\n  (subject /* :JQuery<HTMLElement> */, count = 3, options?) => {\n    return cy.wrap(subject).type(generateRandomWords(count), options)\n  }\n)\n")),(0,r.kt)("h4",{id:"Overwriting-child-or-dual-commands"},"Overwriting child or dual commands"),(0,r.kt)("p",null,"When overwriting either built-in or custom commands which make use of\n",(0,r.kt)("inlineCode",{parentName:"p"},"prevSubject"),", you must specify generic parameters to help the type-checker to\nunderstand the type of the ",(0,r.kt)("inlineCode",{parentName:"p"},"prevSubject"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface TypeOptions extends Cypress.TypeOptions {\n  sensitive: boolean\n}\n\nCypress.Commands.overwrite<'type', 'element'>(\n  'type',\n  (originalFn, element, text, options?: Partial<TypeOptions>) => {\n    if (options && options.sensitive) {\n      // turn off original log\n      options.log = false\n      // create our own log with masked message\n      Cypress.log({\n        $el: element,\n        name: 'type',\n        message: '*'.repeat(text.length),\n      })\n    }\n\n    return originalFn(element, text, options)\n  }\n)\n")),(0,r.kt)("p",null,"As you can see there are generic parameters ",(0,r.kt)("inlineCode",{parentName:"p"},"<'type', 'element'>")," are used:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The first parameter is the command name, equal to first parameter passed to\n",(0,r.kt)("inlineCode",{parentName:"li"},"Cypress.Commands.overwrite"),"."),(0,r.kt)("li",{parentName:"ol"},"The second parameter is the type of the ",(0,r.kt)("inlineCode",{parentName:"li"},"prevSubject")," that is used by the\noriginal command. Possible values:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"'element' infers it as ",(0,r.kt)("inlineCode",{parentName:"li"},"JQuery<HTMLElement>")),(0,r.kt)("li",{parentName:"ul"},"'window' infers it as ",(0,r.kt)("inlineCode",{parentName:"li"},"Window")),(0,r.kt)("li",{parentName:"ul"},"'document' infers it as ",(0,r.kt)("inlineCode",{parentName:"li"},"Document")),(0,r.kt)("li",{parentName:"ul"},"'optional' infers it as ",(0,r.kt)("inlineCode",{parentName:"li"},"unknown"))))),(0,r.kt)("h4",{id:"Examples"},"Examples:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"See\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress-example-recipes#fundamentals"},"Adding Custom Commands"),"\nexample recipe."),(0,r.kt)("li",{parentName:"ul"},"You can find an example with custom commands written in TypeScript in\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/omerose/cypress-support"},"omerose/cypress-support")," repo."),(0,r.kt)("li",{parentName:"ul"},"Example project\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress-example-todomvc#custom-commands"},"cypress-example-todomvc custom commands"),"\nuses custom commands to avoid boilerplate code.")),(0,r.kt)("h3",{id:"Types-for-custom-assertions"},"Types for custom assertions"),(0,r.kt)("p",null,"If you extend Cypress assertions, you can extend the assertion types to make the\nTypeScript compiler understand the new methods. See the\n",(0,r.kt)("a",{parentName:"p",href:"/examples/recipes#Fundamentals"},"Recipe: Adding Chai Assertions")," for\ninstructions."),(0,r.kt)("h3",{id:"Types-for-plugins"},"Types for plugins"),(0,r.kt)(y,{mdxType:"WarningPluginsFile"}),(0,r.kt)("p",null,"You can utilize Cypress's type declarations in your\n",(0,r.kt)("a",{parentName:"p",href:"/guides/tooling/plugins-guide"},"plugins file")," by annotating it like the\nfollowing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// cypress/plugins/index.ts\n\n/**\n * @type {Cypress.PluginConfig}\n */\nmodule.exports = (on, config) => {}\n")),(0,r.kt)("h3",{id:"Using-an-External-Typings-File"},"Using an External Typings File"),(0,r.kt)("p",null,"You might find it easier to organize your types by moving them from the support\nfile into an external\n",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html"},"declaration (","*",".d.ts) file"),".\nTo do so, create a new file, like ",(0,r.kt)("em",{parentName:"p"},"cypress.d.ts"),", and cut the types for your\ncustom commands/assertions from the ",(0,r.kt)("em",{parentName:"p"},"support")," file and into the new file. Below\nis an example of moving the custom ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.mount")," typings that come by default with\na component testing app into a root level ",(0,r.kt)("em",{parentName:"p"},"cypress.d.ts")," file."),(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(d,{value:"cypress.d.ts",active:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { mount } from 'cypress/react'\n\n// Augment the Cypress namespace to include type definitions for\n// your custom command.\n// Alternatively, can be defined in cypress/support/component.d.ts\n// with a <reference path=\"./component\" /> at the top of your spec.\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n")))),(0,r.kt)("p",null,"You might need to include the ",(0,r.kt)("em",{parentName:"p"},"*",".d.ts")," in the include options in any\n",(0,r.kt)("em",{parentName:"p"},"tsconfig.json")," files in your project for TypeScript to pick up the new types:"),(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(d,{value:"tsconfig.json",active:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"include": [\n  "src",\n  "./cypress.d.ts"\n]\n')))),(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(d,{value:"./cypress/tsconfig.json",active:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"include": [\n  "**/*.ts",\n  "../cypress.d.ts"\n]\n')))),(0,r.kt)("h3",{id:"Set-up-your-dev-environment"},"Set up your dev environment"),(0,r.kt)("p",null,"Please refer to your code editor in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support"},"TypeScript's Editor Support doc"),"\nand follow the instructions for your IDE to get TypeScript support and\n",(0,r.kt)("a",{parentName:"p",href:"/guides/tooling/IDE-integration#Intelligent-Code-Completion"},"intelligent code completion"),"\nconfigured in your developer environment before continuing. TypeScript support\nis built in for ",(0,r.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/"},"Visual Studio Code"),",\n",(0,r.kt)("a",{parentName:"p",href:"https://www.visualstudio.com/"},"Visual Studio"),", and\n",(0,r.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/webstorm/"},"WebStorm")," - all other editors require\nextra setup."),(0,r.kt)("h3",{id:"Clashing-types-with-Jest"},"Clashing types with Jest"),(0,r.kt)("p",null,"If you are using both Jest and Cypress in the same project, the TypeScript types\nregistered globally by the two test runners can clash. For example, both Jest\nand Cypress provide the clashing types for the ",(0,r.kt)("inlineCode",{parentName:"p"},"describe")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"it")," functions.\nBoth Jest and Expect (bundled inside Cypress) provide the clashing types for the\n",(0,r.kt)("inlineCode",{parentName:"p"},"expect")," assertion, etc. There are two solutions to disentangle the types:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Configure a separate ",(0,r.kt)("inlineCode",{parentName:"li"},"tsconfig.json")," for E2E tests. See our example\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress-and-jest-typescript-example"},"cypress-io/cypress-and-jest-typescript-example"),"\nrepo."),(0,r.kt)("li",{parentName:"ol"},"Remove Cypress global variables by using NPM package\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/bahmutov/local-cypress"},"local-cypress"),". Read the blog\npost\n",(0,r.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/local-cypress/"},"How to Avoid Using Global Cypress Variables"),"\nfor details.")),(0,r.kt)("h2",{id:"History"},"History"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/guides/references/changelog#10-0-0"},"10.0.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Update guide to cover TypeScript setup for component testing")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/guides/references/changelog#5-0-0"},"5.0.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Raised minimum required TypeScript version from 2.9+ to 3.4+")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/guides/references/changelog#4-4-0"},"4.4.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Added support for TypeScript without needing your own transpilation through preprocessors.")))),(0,r.kt)("h2",{id:"See-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/guides/tooling/IDE-integration"},"IDE Integration"))))}h.isMDXComponent=!0}}]);