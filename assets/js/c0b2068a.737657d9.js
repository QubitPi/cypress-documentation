"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[7254],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),d=s,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||r;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,o=new Array(r);o[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2777:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=t(7462),s=(t(7294),t(3905));const r={title:"task"},o=void 0,i={unversionedId:"api/commands/task",id:"api/commands/task",title:"task",description:"Execute code in Node via the task plugin event.",source:"@site/docs/api/commands/task.mdx",sourceDirName:"api/commands",slug:"/api/commands/task",permalink:"/api/commands/task",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/commands/task.mdx",tags:[],version:"current",lastUpdatedAt:1717543563,formattedLastUpdatedAt:"Jun 4, 2024",frontMatter:{title:"task"},sidebar:"api",previous:{title:"submit",permalink:"/api/commands/submit"},next:{title:"then",permalink:"/api/commands/then"}},l={},p=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Arguments",id:"Arguments",level:3},{value:'Yields <Icon name="question-circle"/>',id:"Yields",level:3},{value:"Examples",id:"Examples",level:2},{value:"Read a file that might not exist",id:"Read-a-file-that-might-not-exist",level:3},{value:"Return number of files in the folder",id:"Return-number-of-files-in-the-folder",level:3},{value:"Seed a database",id:"Seed-a-database",level:3},{value:"Return a Promise from an asynchronous task",id:"Return-a-Promise-from-an-asynchronous-task",level:3},{value:"Save a variable across non same-origin URL visits",id:"Save-a-variable-across-non-same-origin-URL-visits",level:3},{value:"Command options",id:"Command-options",level:3},{value:"Change the timeout",id:"Change-the-timeout",level:4},{value:"Notes",id:"Notes",level:2},{value:"Tasks must end",id:"Tasks-must-end",level:3},{value:"Tasks that do not end are not supported",id:"Tasks-that-do-not-end-are-not-supported",level:4},{value:"Tasks are merged automatically",id:"Tasks-are-merged-automatically",level:3},{value:"Reset timeout via <code>Cypress.config()</code>",id:"Reset-timeout-via-Cypressconfig",level:3},{value:"Set timeout in the test configuration",id:"Set-timeout-in-the-test-configuration",level:3},{value:"Allows a single argument only",id:"Allows-a-single-argument-only",level:3},{value:"Argument should be serializable",id:"Argument-should-be-serializable",level:3},{value:"Rules",id:"Rules",level:2},{value:'Requirements <Icon name="question-circle"/>',id:"Requirements",level:3},{value:'Assertions <Icon name="question-circle"/>',id:"Assertions",level:3},{value:'Timeouts <Icon name="question-circle"/>',id:"Timeouts",level:3},{value:"Command Log",id:"Command-Log",level:2},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",n)},u=c("Icon"),m=c("CypressConfigFileTabs"),d=c("DocsImage"),g={toc:p};function f(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Execute code in ",(0,s.kt)("a",{parentName:"p",href:"https://nodejs.org"},"Node")," via the ",(0,s.kt)("inlineCode",{parentName:"p"},"task")," plugin event."),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("strong",null,"Anti-Pattern"),(0,s.kt)("p",{parentName:"admonition"},"We do not recommend starting a web server using ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.task()"),". Read about\n",(0,s.kt)("a",{parentName:"p",href:"/guides/references/best-practices#Web-Servers"},"best practices")," here.")),(0,s.kt)("h2",{id:"Syntax"},"Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.task(event)\ncy.task(event, arg)\ncy.task(event, arg, options)\n")),(0,s.kt)("h3",{id:"Usage"},"Usage"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(u,{name:"check-circle",color:"green",mdxType:"Icon"})," Correct Usage")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// in test\ncy.task('log', 'This will be output to the terminal')\n")),(0,s.kt)("cypress-config-plugin-example",null,(0,s.kt)(m,{mdxType:"CypressConfigFileTabs"},(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        log(message) {\n          console.log(message)\n\n          return null\n        },\n      })\n    },\n  },\n})\n")),(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        log(message) {\n          console.log(message)\n\n          return null\n        },\n      })\n    },\n  },\n})\n")))),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"task")," plugin event handler can return a value or a promise. The command\nwill fail if ",(0,s.kt)("inlineCode",{parentName:"p"},"undefined")," is returned or if the promise is resolved with\n",(0,s.kt)("inlineCode",{parentName:"p"},"undefined"),". This helps catch typos or cases where the task event is not\nhandled."),(0,s.kt)("p",null,"If you do not need to return a value, explicitly return ",(0,s.kt)("inlineCode",{parentName:"p"},"null")," to signal that\nthe given event has been handled."),(0,s.kt)("h3",{id:"Arguments"},"Arguments"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(u,{name:"angle-right",mdxType:"Icon"})," event")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(String)"))),(0,s.kt)("p",null,"An event name to be handled via the ",(0,s.kt)("inlineCode",{parentName:"p"},"task")," event in the\n",(0,s.kt)("a",{parentName:"p",href:"/guides/tooling/plugins-guide#Using-a-plugin"},"setupNodeEvents")," function."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(u,{name:"angle-right",mdxType:"Icon"})," arg")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(Object)"))),(0,s.kt)("p",null,"An argument to send along with the event. This can be any value that can be\nserialized by\n",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"},"JSON.stringify()"),".\nUnserializable types such as functions, regular expressions, or symbols will be\nomitted to ",(0,s.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,s.kt)("p",null,"If you need to pass multiple arguments, use an object"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// in test\ncy.task('hello', { greeting: 'Hello', name: 'World' })\n")),(0,s.kt)("cypress-config-plugin-example",null,(0,s.kt)(m,{mdxType:"CypressConfigFileTabs"},(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        // deconstruct the individual properties\n        hello({ greeting, name }) {\n          console.log('%s, %s', greeting, name)\n\n          return null\n        },\n      })\n    },\n  },\n})\n")),(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        // deconstruct the individual properties\n        hello({ greeting, name }) {\n          console.log('%s, %s', greeting, name)\n\n          return null\n        },\n      })\n    },\n  },\n})\n")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)(u,{name:"angle-right",mdxType:"Icon"})," options")," ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"(Object)"))),(0,s.kt)("p",null,"Pass in an options object to change the default behavior of ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.task()"),"."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Option"),(0,s.kt)("th",{parentName:"tr",align:null},"Default"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"log")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"true")),(0,s.kt)("td",{parentName:"tr",align:null},"Displays the command in the ",(0,s.kt)("a",{parentName:"td",href:"/guides/core-concepts/cypress-app#Command-Log"},"Command log"))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"timeout")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/guides/references/configuration#Timeouts"},(0,s.kt)("inlineCode",{parentName:"a"},"taskTimeout"))),(0,s.kt)("td",{parentName:"tr",align:null},"Time to wait for ",(0,s.kt)("inlineCode",{parentName:"td"},"cy.task()")," to resolve before ",(0,s.kt)("a",{parentName:"td",href:"#Timeouts"},"timing out"))))),(0,s.kt)("h3",{id:"Yields"},"Yields ",(0,s.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Subject-Management"},(0,s.kt)(u,{name:"question-circle",mdxType:"Icon"}))),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"cy.task()")," yields the value returned or resolved by the ",(0,s.kt)("inlineCode",{parentName:"p"},"task")," event in\n",(0,s.kt)("a",{parentName:"p",href:"/guides/tooling/plugins-guide#Using-a-plugin"},"setupNodeEvents"),"."),(0,s.kt)("h2",{id:"Examples"},"Examples"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"cy.task()")," provides an escape hatch for running arbitrary Node code, so you can\ntake actions necessary for your tests outside of the scope of Cypress. This is\ngreat for:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Seeding your test database."),(0,s.kt)("li",{parentName:"ul"},"Storing state in Node that you want persisted between spec files."),(0,s.kt)("li",{parentName:"ul"},"Performing parallel tasks, like making multiple http requests outside of\nCypress."),(0,s.kt)("li",{parentName:"ul"},"Running an external process.")),(0,s.kt)("h3",{id:"Read-a-file-that-might-not-exist"},"Read a file that might not exist"),(0,s.kt)("p",null,"Command ",(0,s.kt)("a",{parentName:"p",href:"/api/commands/readfile"},"cy.readFile()")," assumes the file exists. If you\nneed to read a file that might not exist, use ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.task"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// in test\ncy.task('readFileMaybe', 'my-file.txt').then((textOrNull) => { ... })\n")),(0,s.kt)("cypress-config-plugin-example",null,(0,s.kt)(m,{mdxType:"CypressConfigFileTabs"},(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\nconst fs = require('fs')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        readFileMaybe(filename) {\n          if (fs.existsSync(filename)) {\n            return fs.readFileSync(filename, 'utf8')\n          }\n\n          return null\n        },\n      })\n    },\n  },\n})\n")),(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\nimport fs from 'fs'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        readFileMaybe(filename) {\n          if (fs.existsSync(filename)) {\n            return fs.readFileSync(filename, 'utf8')\n          }\n\n          return null\n        },\n      })\n    },\n  },\n})\n")))),(0,s.kt)("h3",{id:"Return-number-of-files-in-the-folder"},"Return number of files in the folder"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// in test\ncy.task('countFiles', 'cypress/downloads').then((count) => { ... })\n")),(0,s.kt)("cypress-config-plugin-example",null,(0,s.kt)(m,{mdxType:"CypressConfigFileTabs"},(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\nconst fs = require('fs')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        countFiles(folderName) {\n          return new Promise((resolve, reject) => {\n            fs.readdir(folderName, (err, files) => {\n              if (err) {\n                return reject(err)\n              }\n\n              resolve(files.length)\n            })\n          })\n        },\n      })\n    },\n  },\n})\n")),(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\nimport fs from 'fs'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        countFiles(folderName) {\n          return new Promise((resolve, reject) => {\n            fs.readdir(folderName, (err, files) => {\n              if (err) {\n                return reject(err)\n              }\n\n              resolve(files.length)\n            })\n          })\n        },\n      })\n    },\n  },\n})\n")))),(0,s.kt)("h3",{id:"Seed-a-database"},"Seed a database"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// in test\ndescribe('e2e', () => {\n  beforeEach(() => {\n    cy.task('defaults:db')\n    cy.visit('/')\n  })\n\n  it('displays article values', () => {\n    cy.get('.article-list').should('have.length', 10)\n  })\n})\n")),(0,s.kt)("cypress-config-plugin-example",null,(0,s.kt)(m,{mdxType:"CypressConfigFileTabs"},(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n// we require some code in our app that\n// is responsible for seeding our database\nconst db = require('../../server/src/db')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        'defaults:db': () => {\n          return db.seed('defaults')\n        },\n      })\n    },\n  },\n})\n")),(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n// we require some code in our app that\n// is responsible for seeding our database\nimport db from '../../server/src/db'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        'defaults:db': () => {\n          return db.seed('defaults')\n        },\n      })\n    },\n  },\n})\n")))),(0,s.kt)("h3",{id:"Return-a-Promise-from-an-asynchronous-task"},"Return a Promise from an asynchronous task"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// in test\ncy.task('pause', 1000)\n")),(0,s.kt)("cypress-config-plugin-example",null,(0,s.kt)(m,{mdxType:"CypressConfigFileTabs"},(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        pause(ms) {\n          return new Promise((resolve) => {\n            // tasks should not resolve with undefined\n            setTimeout(() => resolve(null), ms)\n          })\n        },\n      })\n    },\n  },\n})\n")),(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        pause(ms) {\n          return new Promise((resolve) => {\n            // tasks should not resolve with undefined\n            setTimeout(() => resolve(null), ms)\n          })\n        },\n      })\n    },\n  },\n})\n")))),(0,s.kt)("h3",{id:"Save-a-variable-across-non-same-origin-URL-visits"},"Save a variable across non same-origin URL visits"),(0,s.kt)("p",null,"When visiting non same-origin URL, Cypress will\n",(0,s.kt)("a",{parentName:"p",href:"/guides/guides/web-security"},"change the hosted URL to the new URL"),", wiping the\nstate of any local variables. We want to save a variable across visiting non\nsame-origin URLs."),(0,s.kt)("p",null,"We can save the variable and retrieve the saved variable outside of the test\nusing ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.task()")," as shown below."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// in test\ndescribe('Href visit', () => {\n  it('captures href', () => {\n    cy.visit('https://example.cypress.io')\n    cy.get('a')\n      .invoke('attr', 'href')\n      .then((href) => {\n        // href is not same-origin as current url\n        // like https://www.cypress-dx.com\n        cy.task('setHref', href)\n      })\n  })\n\n  it('visit href', () => {\n    cy.task('getHref').then((href) => {\n      // visit non same-origin url https://www.cypress-dx.com\n      cy.visit(href)\n    })\n  })\n})\n")),(0,s.kt)("cypress-config-plugin-example",null,(0,s.kt)(m,{mdxType:"CypressConfigFileTabs"},(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\nlet href\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        setHref: (val) => {\n          return (href = val)\n        },\n        getHref: () => {\n          return href\n        },\n      })\n    },\n  },\n})\n")),(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\nlet href: string\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        setHref: (val) => {\n          return (href = val)\n        },\n        getHref: () => {\n          return href\n        },\n      })\n    },\n  },\n})\n")))),(0,s.kt)("h3",{id:"Command-options"},"Command options"),(0,s.kt)("h4",{id:"Change-the-timeout"},"Change the timeout"),(0,s.kt)("p",null,"You can increase the time allowed to execute the task, although ",(0,s.kt)("em",{parentName:"p"},"we do not\nrecommend executing tasks that take a long time to exit"),"."),(0,s.kt)("p",null,"Cypress will ",(0,s.kt)("em",{parentName:"p"},"not")," continue running any other commands until ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.task()")," has\nfinished, so a long-running command will drastically slow down your test runs."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// will fail if seeding the database takes longer than 20 seconds to finish\ncy.task('seedDatabase', null, { timeout: 20000 })\n")),(0,s.kt)("h2",{id:"Notes"},"Notes"),(0,s.kt)("h3",{id:"Tasks-must-end"},"Tasks must end"),(0,s.kt)("h4",{id:"Tasks-that-do-not-end-are-not-supported"},"Tasks that do not end are not supported"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"cy.task()")," does not support tasks that do not end, such as:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Starting a server."),(0,s.kt)("li",{parentName:"ul"},"A task that watches for file changes."),(0,s.kt)("li",{parentName:"ul"},"Any process that needs to be manually interrupted to stop.")),(0,s.kt)("p",null,"A task must end within the ",(0,s.kt)("inlineCode",{parentName:"p"},"taskTimeout")," or Cypress will fail the current test."),(0,s.kt)("h3",{id:"Tasks-are-merged-automatically"},"Tasks are merged automatically"),(0,s.kt)("p",null,"Sometimes you might be using plugins that export their tasks for registration.\nCypress automatically merges ",(0,s.kt)("inlineCode",{parentName:"p"},"on('task')")," objects for you. For example if you\nare using\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/bahmutov/cypress-skip-and-only-ui"},"cypress-skip-and-only-ui"),"\nplugin and want to install your own task to read a file that might not exist:"),(0,s.kt)("cypress-config-plugin-example",null,(0,s.kt)(m,{mdxType:"CypressConfigFileTabs"},(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\nconst skipAndOnlyTask = require('cypress-skip-and-only-ui/task')\nconst fs = require('fs')\nconst myTask = {\n  readFileMaybe(filename) {\n    if (fs.existsSync(filename)) {\n      return fs.readFileSync(filename, 'utf8')\n    }\n\n    return null\n  },\n}\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      // register plugin's task\n      on('task', skipAndOnlyTask)\n      // and register my own task\n      on('task', myTask)\n    },\n  },\n})\n")),(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\nimport skipAndOnlyTask from 'cypress-skip-and-only-ui/task'\nimport fs from 'fs'\nconst myTask = {\n  readFileMaybe(filename) {\n    if (fs.existsSync(filename)) {\n      return fs.readFileSync(filename, 'utf8')\n    }\n\n    return null\n  },\n}\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      // register plugin's task\n      on('task', skipAndOnlyTask)\n      // and register my own task\n      on('task', myTask)\n    },\n  },\n})\n")))),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/issues/2284"},"#2284")," for\nimplementation."),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("strong",null,"Duplicate task keys"),(0,s.kt)("p",{parentName:"admonition"},"If multiple task objects use the same key, the later registration will overwrite\nthat particular key, similar to how merging multiple objects with duplicate keys\nwill overwrite the first one.")),(0,s.kt)("h3",{id:"Reset-timeout-via-Cypressconfig"},"Reset timeout via ",(0,s.kt)("inlineCode",{parentName:"h3"},"Cypress.config()")),(0,s.kt)("p",null,"You can change the timeout of ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.task()")," for the remainder of the tests by\nsetting the new values for ",(0,s.kt)("inlineCode",{parentName:"p"},"taskTimeout")," within\n",(0,s.kt)("a",{parentName:"p",href:"/api/cypress-api/config"},"Cypress.config()"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"Cypress.config('taskTimeout', 30000)\nCypress.config('taskTimeout') // => 30000\n")),(0,s.kt)("h3",{id:"Set-timeout-in-the-test-configuration"},"Set timeout in the test configuration"),(0,s.kt)("p",null,"You can configure the ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.task()")," timeout within a suite or test by passing the\nnew configuration value within the\n",(0,s.kt)("a",{parentName:"p",href:"/guides/references/configuration#Test-Configuration"},"test configuration"),"."),(0,s.kt)("p",null,"This will set the timeout throughout the duration of the tests, then return it\nto the default ",(0,s.kt)("inlineCode",{parentName:"p"},"taskTimeout")," when complete."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"describe('has data available from database', { taskTimeout: 90000 }, () => {\n  before(() => {\n    cy.task('seedDatabase')\n  })\n\n  // tests\n\n  after(() => {\n    cy.task('resetDatabase')\n  })\n})\n")),(0,s.kt)("h3",{id:"Allows-a-single-argument-only"},"Allows a single argument only"),(0,s.kt)("p",null,"The syntax ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.task(name, arg, options)")," only has place for a single argument to\nbe passed from the test code to the plugins code. In the situations where you\nwould like to pass multiple arguments, place them into an object to be\ndestructured inside the task code. For example, if you would like to execute a\ndatabase query and pass the database profile name you could do:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// in test\nconst dbName = 'stagingA'\nconst query = 'SELECT * FROM users'\n\ncy.task('queryDatabase', { dbName, query })\n")),(0,s.kt)("cypress-config-plugin-example",null,(0,s.kt)(m,{mdxType:"CypressConfigFileTabs"},(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\nconst mysql = require('mysql')\n// the connection strings for different databases could\n// come from the Cypress configuration or from environment variables\nconst connections = {\n  stagingA: {\n    host: 'staging.my.co',\n    user: 'test',\n    password: '***',\n    database: 'users',\n  },\n  stagingB: {\n    host: 'staging-b.my.co',\n    user: 'test',\n    password: '***',\n    database: 'users',\n  },\n}\n\n// querying the database from Node\nfunction queryDB(connectionInfo, query) {\n  const connection = mysql.createConnection(connectionInfo)\n\n  connection.connect()\n\n  return new Promise((resolve, reject) => {\n    connection.query(query, (error, results) => {\n      if (error) {\n        return reject(error)\n      }\n\n      connection.end()\n\n      return resolve(results)\n    })\n  })\n}\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        // destructure the argument into the individual fields\n        queryDatabase({ dbName, query }) {\n          const connectionInfo = connections[dbName]\n\n          if (!connectionInfo) {\n            throw new Error(`Do not have DB connection under name ${dbName}`)\n          }\n\n          return queryDB(connectionInfo, query)\n        },\n      })\n    },\n  },\n})\n")),(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\nimport mysql from 'mysql'\n// the connection strings for different databases could\n// come from the Cypress configuration or from environment variables\nconst connections = {\n  stagingA: {\n    host: 'staging.my.co',\n    user: 'test',\n    password: '***',\n    database: 'users',\n  },\n  stagingB: {\n    host: 'staging-b.my.co',\n    user: 'test',\n    password: '***',\n    database: 'users',\n  },\n}\n\n// querying the database from Node\nfunction queryDB(connectionInfo, query) {\n  const connection = mysql.createConnection(connectionInfo)\n\n  connection.connect()\n\n  return new Promise((resolve, reject) => {\n    connection.query(query, (error, results) => {\n      if (error) {\n        return reject(error)\n      }\n\n      connection.end()\n\n      return resolve(results)\n    })\n  })\n}\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        // destructure the argument into the individual fields\n        queryDatabase({ dbName, query }) {\n          const connectionInfo = connections[dbName]\n\n          if (!connectionInfo) {\n            throw new Error(`Do not have DB connection under name ${dbName}`)\n          }\n\n          return queryDB(connectionInfo, query)\n        },\n      })\n    },\n  },\n})\n")))),(0,s.kt)("h3",{id:"Argument-should-be-serializable"},"Argument should be serializable"),(0,s.kt)("p",null,"The argument ",(0,s.kt)("inlineCode",{parentName:"p"},"arg")," sent via ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.task(name, arg)")," should be serializable; it\ncannot have circular dependencies (issue\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/issues/5539"},"#5539"),"). If there are any\nspecial fields like ",(0,s.kt)("inlineCode",{parentName:"p"},"Date"),", you are responsible for their conversion (issue\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/issues/4980"},"#4980"),"):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// in test\ncy.task('date', new Date()).then((s) => {\n  // the yielded result is a string\n  // we need to convert it to Date object\n  const result = new Date(s)\n})\n")),(0,s.kt)("cypress-config-plugin-example",null,(0,s.kt)(m,{mdxType:"CypressConfigFileTabs"},(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        date(s) {\n          // s is a string, so convert it to Date\n          const d = new Date(s)\n\n          // do something with the date\n          // and return it back\n          return d\n        },\n      })\n    },\n  },\n})\n")),(0,s.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('task', {\n        date(s) {\n          // s is a string, so convert it to Date\n          const d = new Date(s)\n\n          // do something with the date\n          // and return it back\n          return d\n        },\n      })\n    },\n  },\n})\n")))),(0,s.kt)("h2",{id:"Rules"},"Rules"),(0,s.kt)("h3",{id:"Requirements"},"Requirements ",(0,s.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Chains-of-Commands"},(0,s.kt)(u,{name:"question-circle",mdxType:"Icon"}))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"cy.task()")," requires being chained off of ",(0,s.kt)("inlineCode",{parentName:"li"},"cy"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"cy.task()")," requires the task to eventually end.")),(0,s.kt)("h3",{id:"Assertions"},"Assertions ",(0,s.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Assertions"},(0,s.kt)(u,{name:"question-circle",mdxType:"Icon"}))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"cy.task()")," will only run assertions you have chained once, and will not\n",(0,s.kt)("a",{parentName:"li",href:"/guides/core-concepts/retry-ability"},"retry"),".")),(0,s.kt)("h3",{id:"Timeouts"},"Timeouts ",(0,s.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Timeouts"},(0,s.kt)(u,{name:"question-circle",mdxType:"Icon"}))),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"cy.task()")," can time out waiting for the task to end.")),(0,s.kt)("h2",{id:"Command-Log"},"Command Log"),(0,s.kt)("p",null,"This example uses the\n",(0,s.kt)("a",{parentName:"p",href:"#Return-number-of-files-in-the-folder"},"Return number of files in the folder"),"\ntask defined above."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.task('countFiles', 'cypress/e2e')\n")),(0,s.kt)("p",null,"The command above will display in the Command Log as:"),(0,s.kt)(d,{src:"/img/api/task/task-count-files.png",alt:"Command Log task",mdxType:"DocsImage"}),(0,s.kt)("p",null,"When clicking on the ",(0,s.kt)("inlineCode",{parentName:"p"},"task")," command within the command log, the console outputs\nthe following:"),(0,s.kt)(d,{src:"/img/api/task/console-shows-task-result.png",alt:"Console Log task",mdxType:"DocsImage"}),(0,s.kt)("h2",{id:"History"},"History"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Version"),(0,s.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("a",{parentName:"td",href:"/guides/references/changelog#3-0-0"},"3.0.0")),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("inlineCode",{parentName:"td"},"cy.task()")," command added")))),(0,s.kt)("h2",{id:"See-also"},"See also"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/commands/exec"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.exec()"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/commands/fixture"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.fixture()"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/commands/readfile"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.readFile()"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/commands/request"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.request()"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/api/commands/writefile"},(0,s.kt)("inlineCode",{parentName:"a"},"cy.writeFile()"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/powerful-cy-task/"},"Blog: Incredibly Powerful cy.task()")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/rolling-for-test/"},"Blog: Rolling for a Test")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/universal-code-test/"},"Universal Code Test with Cypress")),(0,s.kt)("li",{parentName:"ul"},"repository\n",(0,s.kt)("a",{parentName:"li",href:"https://github.com/bahmutov/cypress-db-example"},"cypress-db-example")," shows how\nto connect to a Sqlite3 database and use it during tests."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/testing-mongo-with-cypress/"},"Blog: Testing Mongo with Cypress"),"\nshows how to access the MongoDB during Cypress API tests locally and on\nCircleCI.")))}f.isMDXComponent=!0}}]);