"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[4176],{7212:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=t(5893),i=t(1151);const o={title:"Cypress Component Testing",sidebar_position:20,sidebar_label:"Getting Started"},c=void 0,r={id:"guides/component-testing/getting-started",title:"Cypress Component Testing",description:"Getting started with Component Testing is super simple. Follow the guide below for a step by step guide on how to configure your project and quickly begin writing your first tests in just a few seconds.",source:"@site/docs/guides/component-testing/getting-started.mdx",sourceDirName:"guides/component-testing",slug:"/guides/component-testing/getting-started",permalink:"/guides/component-testing/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/component-testing/getting-started.mdx",tags:[],version:"current",lastUpdatedAt:1728610821,formattedLastUpdatedAt:"Oct 11, 2024",sidebarPosition:20,frontMatter:{title:"Cypress Component Testing",sidebar_position:20,sidebar_label:"Getting Started"},sidebar:"guides",previous:{title:"Overview",permalink:"/guides/component-testing/overview"},next:{title:"Styling Components",permalink:"/guides/component-testing/styling-components"}},a={},l=[{value:"Getting Started",id:"Getting-Started",level:2},{value:"Install Cypress",id:"Install-Cypress",level:3},{value:"Open Cypress",id:"Open-Cypress",level:3},{value:"Configuring Component Testing",id:"Configuring-Component-Testing",level:2},{value:"Select Testing Type",id:"Select-Testing-Type",level:3},{value:"Project Setup",id:"Project-Setup",level:3},{value:"Installing Dependencies",id:"Installing-Dependencies",level:3},{value:"Config Files",id:"Config-Files",level:3},{value:"Choose A Browser",id:"Choose-A-Browser",level:3},{value:"Writing Your First Test",id:"Writing-Your-First-Test",level:2},{value:"Frameworks",id:"Frameworks",level:3},{value:"Your First Component Test",id:"Your-First-Component-Test",level:3},{value:"Test Explanation",id:"Test-Explanation",level:3},{value:"Running the Test",id:"Running-the-Test",level:2},{value:"Selectors &amp; Assertions",id:"Selectors--Assertions",level:3},{value:"Passing Props to Components",id:"Passing-Props-to-Components",level:3},{value:"Testing Interactions",id:"Testing-Interactions",level:3},{value:"Testing Components with Events",id:"Testing-Components-with-Events",level:2},{value:"Using Spies",id:"Using-Spies",level:3},{value:"What&#39;s Next?",id:"Whats-Next",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components},{DocsImage:t,DocsVideo:o,TabItem:c,Tabs:r}=n;return t||p("DocsImage",!0),o||p("DocsVideo",!0),c||p("TabItem",!0),r||p("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Getting started with Component Testing is super simple. Follow the guide below for a step by step guide on how to configure your project and quickly begin writing your first tests in just a few seconds."}),"\n",(0,s.jsx)(n.h2,{id:"Getting-Started",children:"Getting Started"}),"\n",(0,s.jsx)(o,{src:"/img/snippets/getting-started-with-ct.mp4",title:"Getting Started With Component Testing"}),"\n",(0,s.jsx)(n.h3,{id:"Install-Cypress",children:"Install Cypress"}),"\n",(0,s.jsx)(n.p,{children:"To begin we need to install Cypress in your project if you have not already done so."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install cypress --save-dev\n"})}),"\n",(0,s.jsx)(n.h3,{id:"Open-Cypress",children:"Open Cypress"}),"\n",(0,s.jsx)(n.p,{children:"Once Cypress has been installed you can launch Cypress using the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx cypress open\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You can also launch Cypress for a specific ",(0,s.jsx)(n.a,{href:"/guides/core-concepts/testing-types",children:"Testing Type"})," using either ",(0,s.jsx)(n.code,{children:"--e2e"})," or in this case the ",(0,s.jsx)(n.code,{children:"--component"})," ",(0,s.jsx)(n.a,{href:"/guides/guides/command-line#Options",children:"CLI Option"}),"."]})}),"\n",(0,s.jsx)(n.p,{children:"Next, the Cypress Launchpad will guide you through configuring your project."}),"\n",(0,s.jsx)(n.h2,{id:"Configuring-Component-Testing",children:"Configuring Component Testing"}),"\n",(0,s.jsx)(n.h3,{id:"Select-Testing-Type",children:"Select Testing Type"}),"\n",(0,s.jsx)(n.p,{children:'Whenever you run Cypress for the first time, the app will prompt you to set up\neither E2E Testing or Component Testing. Click on "Component Testing" to start\nthe configuration wizard.'}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["For more information on how to choose a testing type, we recommend this ",(0,s.jsx)(n.a,{href:"/guides/core-concepts/testing-types",children:"Testing Types Guide"})]})}),"\n",(0,s.jsx)(t,{src:"/img/guides/component-testing/select-test-type.jpg",caption:"Choose Component Testing"}),"\n",(0,s.jsx)(n.h3,{id:"Project-Setup",children:"Project Setup"}),"\n",(0,s.jsxs)(n.p,{children:["The Project Setup screen will automatically detect your framework and bundler. In this example we will use ",(0,s.jsx)(n.a,{href:"https://react.dev/",children:"React"})," and ",(0,s.jsx)(n.a,{href:"https://vitejs.dev/",children:"Vite"}),'.\nClick "Next Step" to continue.']}),"\n",(0,s.jsx)(t,{src:"/img/guides/component-testing/project-setup-react.jpg",caption:"React and Vite are automatically detected"}),"\n",(0,s.jsx)(n.h3,{id:"Installing-Dependencies",children:"Installing Dependencies"}),"\n",(0,s.jsx)(n.p,{children:'The next screen checks that all the required dependencies are installed. All the\nitems should have green checkboxes on them, indicating everything is good, so\nclick "Continue".'}),"\n",(0,s.jsx)(t,{src:"/img/guides/component-testing/dependency-detection-react.jpg",caption:"All necessary dependencies are installed"}),"\n",(0,s.jsx)(n.h3,{id:"Config-Files",children:"Config Files"}),"\n",(0,s.jsx)(n.p,{children:'Next, Cypress generates all the necessary configuration files and gives you a\nlist of all the changes it made to your project. Click "Continue".'}),"\n",(0,s.jsx)(t,{src:"/img/guides/component-testing/scaffolded-files.jpg",caption:"The Cypress launchpad will scaffold all of these files for you"}),"\n",(0,s.jsx)(n.h3,{id:"Choose-A-Browser",children:"Choose A Browser"}),"\n",(0,s.jsx)(n.p,{children:"After setting up component testing, you will be at the browser selection screen."}),"\n",(0,s.jsx)(n.p,{children:'Pick the browser of your choice and click the "Start Component Testing" button\nto open the Cypress App.'}),"\n",(0,s.jsx)(t,{src:"/img/guides/component-testing/select-browser.jpg",caption:"Choose your browser"}),"\n",(0,s.jsx)(n.h2,{id:"Writing-Your-First-Test",children:"Writing Your First Test"}),"\n",(0,s.jsx)(n.p,{children:"At this point, your project is configured to use Cypress Component Testing. However, when the test runner appears, it won't find any specs because we haven't created\nany yet. Now we need write our first Component Test."}),"\n",(0,s.jsx)(t,{src:"/img/guides/component-testing/create-your-first-spec-cfc.png"}),"\n",(0,s.jsx)(n.h3,{id:"Frameworks",children:"Frameworks"}),"\n",(0,s.jsxs)(n.p,{children:["Cypress currently has official mounting libraries for\n",(0,s.jsx)(n.a,{href:"/guides/component-testing/react/overview",children:"React"}),",\n",(0,s.jsx)(n.a,{href:"/guides/component-testing/angular/overview",children:"Angular"}),",\n",(0,s.jsx)(n.a,{href:"/guides/component-testing/vue/overview",children:"Vue"}),", and\n",(0,s.jsx)(n.a,{href:"/guides/component-testing/svelte/overview",children:"Svelte"}),".\nIn addition to our official framework support there are many community plugins such as\n",(0,s.jsx)(n.a,{href:"https://github.com/qwikifiers/cypress-qwik",children:"Qwik"})," and ",(0,s.jsx)(n.a,{href:"https://github.com/redfox-mx/cypress-lit",children:"Lit"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"Your-First-Component-Test",children:"Your First Component Test"}),"\n",(0,s.jsxs)(n.p,{children:["Though every framework is different and has its own unique nuances, in general, writing tests is very similar.\nLet's look at how a basic test is written for a ",(0,s.jsx)(n.code,{children:"StepperComponent"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Let's assume the Stepper Component consists of two ",(0,s.jsx)(n.code,{children:"buttons"}),", one used to ",(0,s.jsx)(n.strong,{children:"decrement"})," the counter and one\nto ",(0,s.jsx)(n.strong,{children:"increment"})," it as well as a ",(0,s.jsx)(n.code,{children:"span"})," tag that sits in the middle of the buttons to show the\ncurrent value of the counter."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["To see examples of the Stepper Component and its tests in each Framework, visit our ",(0,s.jsx)(n.a,{href:"https://github.com/cypress-io/component-testing-quickstart-apps",children:"Component Testing Quick Start Apps Repo"})]})}),"\n",(0,s.jsxs)(r,{groupId:"frameworks",children:[(0,s.jsx)(c,{value:"React",active:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import React from 'react'\nimport Stepper from './Stepper'\n\ndescribe('<Stepper />', () => {\n  it('mounts', () => {\n    // see: https://on.cypress.io/mounting-react\n    cy.mount(<Stepper />)\n  })\n})\n"})})}),(0,s.jsx)(c,{value:"Angular",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { StepperComponent } from './stepper.component'\n\ndescribe('StepperComponent', () => {\n  it('mounts', () => {\n    // see: https://on.cypress.io/mounting-angular\n    cy.mount(StepperComponent)\n  })\n})\n"})})}),(0,s.jsx)(c,{value:"Vue",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import Stepper from './Stepper.vue'\n\ndescribe('<Stepper />', () => {\n  it('mounts', () => {\n    // see: https://on.cypress.io/mounting-vue\n    cy.mount(Stepper)\n  })\n})\n"})})}),(0,s.jsx)(c,{value:"Svelte",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import Stepper from './Stepper.svelte'\n\ndescribe('Stepper', () => {\n  it('mounts', () => {\n    // see: https://on.cypress.io/mounting-svelte\n    cy.mount(Stepper)\n  })\n})\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"Test-Explanation",children:"Test Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["Let's break down the spec. First, we import the ",(0,s.jsx)(n.code,{children:"Stepper"})," component. Then, we\norganize our tests using the functions ",(0,s.jsx)(n.code,{children:"describe"})," and ",(0,s.jsx)(n.code,{children:"it"}),", which allows us to\ngroup tests into sections by using method blocks. These are global functions\nprovided by Cypress, which means you don't have to import them directly to use\nthem. The top-level ",(0,s.jsx)(n.code,{children:"describe"})," block will be the container for all our tests in\na file, and each ",(0,s.jsx)(n.code,{children:"it"})," represents an individual test. The ",(0,s.jsx)(n.code,{children:"describe"})," function\ntakes two parameters, the first of which is the name of the test suite, and the\nsecond is a function that will execute the tests."]}),"\n",(0,s.jsxs)(n.p,{children:["We defined a test using the ",(0,s.jsx)(n.code,{children:"it"})," function inside ",(0,s.jsx)(n.code,{children:"describe"}),". The first parameter\nto ",(0,s.jsx)(n.code,{children:"it"})," is a brief description of the spec, and the second parameter is a\nfunction that contains the test code. In our example above, we only have one\ntest, but soon we'll see how we can add multiple ",(0,s.jsx)(n.code,{children:"it"})," blocks inside of a\n",(0,s.jsx)(n.code,{children:"describe"})," for a series of tests."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"/api/commands/mount",children:"cy.mount()"})," method will mount our component into the test\napp so we can begin running tests against it."]})}),"\n",(0,s.jsx)(n.p,{children:"Now it's time to see the test in action."}),"\n",(0,s.jsx)(n.h2,{id:"Running-the-Test",children:"Running the Test"}),"\n",(0,s.jsxs)(n.p,{children:["Switch back to the browser you opened for testing, and you should now see the\n",(0,s.jsx)(n.code,{children:"Stepper"})," Component in the spec list. Click it to see the spec execute."]}),"\n",(0,s.jsx)(o,{src:"/img/snippets/specs-list.mp4",title:"Specs List"}),"\n",(0,s.jsx)(n.p,{children:"Our first test verifies the component can mount in its default state without\nany errors. If there is a runtime error during test execution, the test will\nfail, and you will see a stack trace pointing to the source of the problem."}),"\n",(0,s.jsx)(n.p,{children:"A basic test like the one above is an excellent way to start testing a\ncomponent. Cypress renders your component in a real browser, and you can use all\nthe techniques/tools you would normally during development, such as interacting\nwith the component in the test runner, and using the browser dev tools to\ninspect and debug both your tests and the component's code."}),"\n",(0,s.jsxs)(n.p,{children:["Feel free to play around with the ",(0,s.jsx)(n.code,{children:"Stepper"})," component by interacting with the\nincrement and decrement buttons."]}),"\n",(0,s.jsx)(n.p,{children:"Now that the component is mounted, our next step is to test that the behavior of\nthe component is correct."}),"\n",(0,s.jsx)(n.h3,{id:"Selectors--Assertions",children:"Selectors & Assertions"}),"\n",(0,s.jsx)(n.p,{children:"By default, the Stepper's counter is initialized to \"0\". We can override that\nvalue by specifying an initial count. Let's write a couple of tests that will\nverify both these states."}),"\n",(0,s.jsxs)(n.p,{children:["To do so, we will use a selector to access the ",(0,s.jsx)(n.code,{children:"span"})," element that contains the\ncounter, and then assert that the text value of the element is what we expect it\nto be."]}),"\n",(0,s.jsxs)(n.p,{children:["There are various ways to select items from the DOM using Cypress. We will use\n",(0,s.jsx)(n.a,{href:"/api/commands/get",children:"cy.get()"}),", which allows us to pass in a CSS-like selector."]}),"\n",(0,s.jsxs)(n.p,{children:['After we "get" the element, we use the ',(0,s.jsx)(n.a,{href:"/api/commands/should",children:"should"})," assertion\nmethod to verify it has the correct text value."]}),"\n",(0,s.jsxs)(n.p,{children:["Add the following test inside the ",(0,s.jsx)(n.code,{children:"describe"})," block, right below the first test:"]}),"\n",(0,s.jsxs)(r,{groupId:"frameworks",children:[(0,s.jsx)(c,{value:"React",active:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"it('stepper should default to 0', () => {\n  cy.mount(<Stepper />)\n  cy.get('span').should('have.text', '0')\n})\n"})})}),(0,s.jsx)(c,{value:"Angular",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"it('stepper should default to 0', () => {\n  cy.mount(StepperComponent)\n  cy.get('span').should('have.text', '0')\n})\n"})})}),(0,s.jsx)(c,{value:"Vue",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('stepper should default to 0', () => {\n  cy.mount(Stepper)\n  cy.get('span').should('have.text', '0')\n})\n"})})}),(0,s.jsx)(c,{value:"Svelte",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('stepper should default to 0', () => {\n  cy.mount(Stepper)\n  cy.get('span').should('have.text', '0')\n})\n"})})})]}),"\n",(0,s.jsx)(n.p,{children:"When you go back to the test runner, you should see the test pass."}),"\n",(0,s.jsxs)(n.p,{children:['In the above test, we select the element by passing in "span" to ',(0,s.jsx)(n.code,{children:"cy.get()"}),",\nwhich will select all ",(0,s.jsx)(n.code,{children:"span"})," tags in our component. We only have one ",(0,s.jsx)(n.code,{children:"span"}),"\ncurrently, so this works. However, if our component evolves and we add another\n",(0,s.jsx)(n.code,{children:"span"}),", then this test could start to fail. We should use a selector that will\nbe less brittle to future changes."]}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"Stepper"})," component, the ",(0,s.jsx)(n.code,{children:"span"})," tag has a ",(0,s.jsx)(n.code,{children:"data-cy"})," attribute on it:"]}),"\n",(0,s.jsxs)(r,{groupId:"frameworks",children:[(0,s.jsx)(c,{value:"React",active:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'<span data-cy="counter">{count}</span>\n'})})}),(0,s.jsx)(c,{value:"Angular",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<span data-cy="counter">{{ count }}</span>\n'})})}),(0,s.jsx)(c,{value:"Vue",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<span data-cy="counter">{{ count }}</span>\n'})})}),(0,s.jsx)(c,{value:"Svelte",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<span data-cy="counter">{count}</span>\n'})})})]}),"\n",(0,s.jsxs)(n.p,{children:["We assign a unique id to the ",(0,s.jsx)(n.code,{children:"data-cy"})," attribute that we can use for testing\npurposes. Update the test to use a CSS attribute selector to ",(0,s.jsx)(n.code,{children:"cy.get()"}),":"]}),"\n",(0,s.jsxs)(r,{groupId:"frameworks",children:[(0,s.jsx)(c,{value:"React",active:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"it('stepper should default to 0', () => {\n  cy.mount(<Stepper />)\n  cy.get('[data-cy=counter]').should('have.text', '0')\n})\n"})})}),(0,s.jsx)(c,{value:"Angular",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"it('stepper should default to 0', () => {\n  cy.mount(StepperComponent)\n  cy.get('[data-cy=counter]').should('have.text', '0')\n})\n"})})}),(0,s.jsx)(c,{value:"Vue",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('stepper should default to 0', () => {\n  cy.mount(Stepper)\n  cy.get('[data-cy=counter]').should('have.text', '0')\n})\n"})})}),(0,s.jsx)(c,{value:"Svelte",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('stepper should default to 0', () => {\n  cy.mount(Stepper)\n  cy.get('[data-cy=counter]').should('have.text', '0')\n})\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["The test will still pass as expected, and our selector is now future-proof. For\nmore info on writing good selectors, see our guide\n",(0,s.jsx)(n.a,{href:"/guides/references/best-practices#Selecting-Elements",children:"Selector Best Practices"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"Passing-Props-to-Components",children:"Passing Props to Components"}),"\n",(0,s.jsxs)(n.p,{children:["We should also have a test to ensure the ",(0,s.jsx)(n.code,{children:"count"}),' prop sets the count to\nsomething else besides its default value of "0". We can pass in props to the\n',(0,s.jsx)(n.code,{children:"Stepper"})," component like so:"]}),"\n",(0,s.jsxs)(r,{groupId:"frameworks",children:[(0,s.jsx)(c,{value:"React",active:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"it('supports a \"count\" prop to set the value', () => {\n  cy.mount(<Stepper count={100} />)\n  cy.get('[data-cy=counter]').should('have.text', '100')\n})\n"})})}),(0,s.jsx)(c,{value:"Angular",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"it('supports a \"count\" prop to set the value', () => {\n  cy.mount(StepperComponent, {\n    componentProperties: {\n      count: 100,\n    },\n  })\n  cy.get('[data-cy=counter]').should('have.text', '100')\n})\n"})})}),(0,s.jsx)(c,{value:"Vue",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('supports a \"count\" prop to set the value', () => {\n  cy.mount(Stepper, { props: { count: 100 } })\n  cy.get('[data-cy=counter]').should('have.text', '100')\n})\n"})})}),(0,s.jsx)(c,{value:"Svelte",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('supports a \"count\" prop to set the value', () => {\n  cy.mount(Stepper, { props: { count: 100 } })\n  cy.get('[data-cy=counter]').should('have.text', '100')\n})\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"Testing-Interactions",children:"Testing Interactions"}),"\n",(0,s.jsx)(n.p,{children:'We mounted and selected the element in the above tests but didn\'t interact with\nit. We should also test that the value of the counter changes when a user clicks\nthe "increment" and "decrement" buttons.'}),"\n",(0,s.jsxs)(n.p,{children:["To do so, we will interact with the component by using the\n",(0,s.jsx)(n.a,{href:"/api/commands/click",children:"click()"})," command, which clicks a DOM element just like a\nreal user would."]}),"\n",(0,s.jsx)(n.p,{children:"Add the following tests:"}),"\n",(0,s.jsxs)(r,{groupId:"frameworks",children:[(0,s.jsx)(c,{value:"React",active:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"it('when the increment button is pressed, the counter is incremented', () => {\n  cy.mount(<Stepper />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('[data-cy=counter]').should('have.text', '1')\n})\n\nit('when the decrement button is pressed, the counter is decremented', () => {\n  cy.mount(<Stepper />)\n  cy.get('[data-cy=decrement]').click()\n  cy.get('[data-cy=counter]').should('have.text', '-1')\n})\n"})})}),(0,s.jsx)(c,{value:"Angular",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"it('when the increment button is pressed, the counter is incremented', () => {\n  cy.mount(StepperComponent)\n  cy.get('[data-cy=increment]').click()\n  cy.get('[data-cy=counter]').should('have.text', '1')\n})\n\nit('when the decrement button is pressed, the counter is decremented', () => {\n  cy.mount(StepperComponent)\n  cy.get('[data-cy=decrement]').click()\n  cy.get('[data-cy=counter]').should('have.text', '-1')\n})\n"})})}),(0,s.jsx)(c,{value:"Vue",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('when the increment button is pressed, the counter is incremented', () => {\n  cy.mount(Stepper)\n  cy.get('[data-cy=increment]').click()\n  cy.get('[data-cy=counter]').should('have.text', '1')\n})\n\nit('when the decrement button is pressed, the counter is decremented', () => {\n  cy.mount(Stepper)\n  cy.get('[data-cy=decrement]').click()\n  cy.get('[data-cy=counter]').should('have.text', '-1')\n})\n"})})}),(0,s.jsx)(c,{value:"Svelte",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('when the increment button is pressed, the counter is incremented', () => {\n  cy.mount(Stepper)\n  cy.get('[data-cy=increment]').click()\n  cy.get('[data-cy=counter]').should('have.text', '1')\n})\n\nit('when the decrement button is pressed, the counter is decremented', () => {\n  cy.mount(Stepper)\n  cy.get('[data-cy=decrement]').click()\n  cy.get('[data-cy=counter]').should('have.text', '-1')\n})\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:['When you view the results of each of the tests, you will see that the counter is\nnow "1" in the ',(0,s.jsx)(n.strong,{children:"increment"}),' test, and "-1" in the ',(0,s.jsx)(n.strong,{children:"decrement"})," test. Not only did our\ntests pass, but we can visually see the results in a browser!"]}),"\n",(0,s.jsx)(n.h2,{id:"Testing-Components-with-Events",children:"Testing Components with Events"}),"\n",(0,s.jsxs)(n.p,{children:["All the state of the ",(0,s.jsx)(n.code,{children:"Stepper"})," Component (ie: the count) is handled internally in the\ncomponent and then consumers are then alerted to changes to the state."]}),"\n",(0,s.jsxs)(n.p,{children:["As the developer of the ",(0,s.jsx)(n.code,{children:"Stepper"})," Component, you want to make sure when the\nend-user clicks the ",(0,s.jsx)(n.strong,{children:"increment"})," and ",(0,s.jsx)(n.strong,{children:"decrement"})," buttons, that the appropriate event is\ntriggered with the proper values in the consuming component."]}),"\n",(0,s.jsx)(n.h3,{id:"Using-Spies",children:"Using Spies"}),"\n",(0,s.jsxs)(n.p,{children:["We can use ",(0,s.jsx)(n.a,{href:"/guides/guides/stubs-spies-and-clocks#Spies",children:"Cypress Spies"})," to\nvalidate these events are being called correctly. A spy is a special function that\nkeeps track of how many times it was called and any parameters that it was\ncalled with. We can then assign a spy to our event, interact with the\ncomponent, and then query the spy to validate it was called with the parameters\nwe expect."]}),"\n",(0,s.jsx)(n.p,{children:"Let's set up the spies and bind them to the component:"}),"\n",(0,s.jsxs)(r,{groupId:"frameworks",children:[(0,s.jsx)(c,{value:"React",active:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"it('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(<Stepper onChange={onChangeSpy} />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n"})})}),(0,s.jsx)(c,{value:"Angular",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"it('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(StepperComponent, {\n    componentProperties: {\n      change: {\n        emit: onChangeSpy,\n      } as any,\n    },\n  })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@changeSpy').should('have.been.calledWith', 1)\n})\n"})})}),(0,s.jsx)(c,{value:"Vue",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(Stepper, { props: { onChange: onChangeSpy } })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n"})})}),(0,s.jsx)(c,{value:"Svelte",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"it('clicking + fires a change event with the incremented value', () => {\n  const changeSpy = cy.spy().as('changeSpy')\n  cy.mount(Stepper).then(({ component }) => {\n    component.$on('change', changeSpy)\n  })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@changeSpy').should('have.been.calledWithMatch', {\n    detail: { count: 1 },\n  })\n})\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["First, we create a new spy by calling the ",(0,s.jsx)(n.code,{children:"cy.spy()"})," method. We pass in a string\nthat gives the spy an ",(0,s.jsx)(n.a,{href:"/guides/core-concepts/variables-and-aliases",children:"alias"}),",\nwhich assigns the spy a name by which we can reference it later. In\n",(0,s.jsx)(n.code,{children:"cy.mount()"}),", we initialize the component and pass the spy into it. After that,\nwe click the increment button."]}),"\n",(0,s.jsxs)(n.p,{children:["The next line is a bit different. We've seen how we can use the ",(0,s.jsx)(n.code,{children:"cy.get()"}),"\nmethod to select elements, but we can also use it to grab any aliases we've set\nup previously. We use ",(0,s.jsx)(n.code,{children:"cy.get()"}),' to grab the alias to the spy (by prepending an\n"@" to the alias name). We assert that the method was called with the expected\nvalue.']}),"\n",(0,s.jsxs)(n.p,{children:["With that, the ",(0,s.jsx)(n.code,{children:"Stepper"})," component is well tested. Nice job!"]}),"\n",(0,s.jsx)(n.h2,{id:"Whats-Next",children:"What's Next?"}),"\n",(0,s.jsx)(n.p,{children:"Congratulations, you covered the basics for Component Testing\nwith Cypress!"}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about testing with Cypress, check out the\n",(0,s.jsx)(n.a,{href:"/guides/core-concepts/introduction-to-cypress",children:"Introduction to Cypress"})," guide."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>c});var s=t(7294);const i={},o=s.createContext(i);function c(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);