"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[5287],{2125:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var s=t(5893),o=t(1151);const i={title:"Component Testing FAQ",sidebar_position:40,sidebar_label:"FAQ"},r=void 0,c={id:"guides/component-testing/faq",title:"Component Testing FAQ",description:"General Questions",source:"@site/docs/guides/component-testing/faq.mdx",sourceDirName:"guides/component-testing",slug:"/guides/component-testing/faq",permalink:"/guides/component-testing/faq",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/component-testing/faq.mdx",tags:[],version:"current",lastUpdatedAt:1728611023,formattedLastUpdatedAt:"Oct 11, 2024",sidebarPosition:40,frontMatter:{title:"Component Testing FAQ",sidebar_position:40,sidebar_label:"FAQ"},sidebar:"guides",previous:{title:"Configuration",permalink:"/guides/component-testing/component-framework-configuration"},next:{title:"React Overview",permalink:"/guides/component-testing/react/overview"}},a={},p=[{value:"General Questions",id:"General-Questions",level:2},{value:"What is component testing?",id:"What-is-component-testing",level:3},{value:"What frameworks does component testing support?",id:"What-frameworks-does-component-testing-support",level:3},{value:"How does Cypress do component testing?",id:"How-does-Cypress-do-component-testing",level:3},{value:"When should I use component testing vs end-to-end testing?",id:"When-should-I-use-component-testing-vs-end-to-end-testing",level:3},{value:"How does Cypress component testing compare to other options?",id:"How-does-Cypress-component-testing-compare-to-other-options",level:3},{value:"Technical Questions",id:"Technical-Questions",level:2},{value:"What is the Mount Function?",id:"What-is-the-Mount-Function",level:3},{value:"Why isn&#39;t my component rendering as it should?",id:"Why-isnt-my-component-rendering-as-it-should",level:3},{value:"Why doesn&#39;t my spec show in the Specs page?",id:"Why-doesnt-my-spec-show-in-the-Specs-page",level:3},{value:"How do I fix ESLint errors for things like using the global Cypress objects?",id:"How-do-I-fix-ESLint-errors-for-things-like-using-the-global-Cypress-objects",level:3},{value:"Why isn&#39;t TypeScript recognizing the global Cypress objects or custom cypress commands (eg: <code>cy.mount</code>)?",id:"Why-isnt-TypeScript-recognizing-the-global-Cypress-objects-or-custom-cypress-commands-eg-cymount",level:3},{value:"How do I get TypeScript to recognize Cypress types and not Jest types?",id:"How-do-I-get-TypeScript-to-recognize-Cypress-types-and-not-Jest-types",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"General-Questions",children:"General Questions"}),"\n",(0,s.jsx)(n.h3,{id:"What-is-component-testing",children:"What is component testing?"}),"\n",(0,s.jsx)(n.p,{children:"Many modern front-end UI libraries encourage writing applications using small,\nreusable building blocks known as components. Components start small (think\nbuttons, images, inputs, etc.) and can be composed into larger components (order\nforms, date pickers, menus, etc.) and even entire pages."}),"\n",(0,s.jsx)(n.p,{children:"Component testing is about testing an individual component in isolation from the\nrest of the app. This allows only having to worry about the component's\nfunctionality and not how it fits into an entire page."}),"\n",(0,s.jsx)(n.h3,{id:"What-frameworks-does-component-testing-support",children:"What frameworks does component testing support?"}),"\n",(0,s.jsxs)(n.p,{children:["We support ",(0,s.jsx)(n.a,{href:"/guides/component-testing/angular/overview",children:"Angular"}),",\n",(0,s.jsx)(n.a,{href:"/guides/component-testing/react/overview",children:"React"}),",\n",(0,s.jsx)(n.a,{href:"/guides/component-testing/svelte/overview",children:"Svelte"}),", and\n",(0,s.jsx)(n.a,{href:"/guides/component-testing/vue/overview",children:"Vue"})," currently for component testing."]}),"\n",(0,s.jsx)(n.p,{children:"We also support several meta-frameworks like Next.js, Create React App, and\nNuxt, as well as Webpack and Vite for bundling. Check each framework's overview\nguide for more info."}),"\n",(0,s.jsx)(n.h3,{id:"How-does-Cypress-do-component-testing",children:"How does Cypress do component testing?"}),"\n",(0,s.jsx)(n.p,{children:"Cypress will take a component and mount it into a blank canvas. When doing so,\nyou have direct access to the component's API, making it easier to pass in props\nor data and put a component in a certain state. From there, you can use the same\nCypress commands, selectors, and assertions to write your tests."}),"\n",(0,s.jsx)(n.p,{children:"Cypress supports multiple frameworks and development servers for component\ntesting."}),"\n",(0,s.jsx)(n.h3,{id:"When-should-I-use-component-testing-vs-end-to-end-testing",children:"When should I use component testing vs end-to-end testing?"}),"\n",(0,s.jsx)(n.p,{children:'The biggest difference between end-to-end testing and component testing is that\nan end-to-end test "visits" an entire page, and a component test "mounts"\nindividual components. You set up a component test by passing any\ndata/props/events to the component directly versus trying to manipulate a page\nUI. Because of this, component tests are typically easier to write, have less\nsetup, and execute faster.'}),"\n",(0,s.jsx)(n.p,{children:"Use component testing during development to help build out a component's\nfunctionality in a test-driven manner. Feel free to write many tests and cover\nall the edge cases."}),"\n",(0,s.jsx)(n.p,{children:"Use end-to-end testing to validate user journey's through your application as a\nwhole. Don't repeat the same tests in the component tests; instead, focus on how\nan actual user will use the application."}),"\n",(0,s.jsx)(n.h3,{id:"How-does-Cypress-component-testing-compare-to-other-options",children:"How does Cypress component testing compare to other options?"}),"\n",(0,s.jsx)(n.p,{children:"When Cypress mounts a component, it does so in an actual browser and not a\nsimulated environment like jsdom. This allows you to visually see and interact\nwith the component as you work on it. You can use the same browser-based\ndeveloper tools that you are used to when building web applications, such as\nelement inspectors, modifying CSS, and source debugging."}),"\n",(0,s.jsxs)(n.p,{children:["Cypress Component Testing is built around the same tools and APIs that\nend-to-end testing uses. Anyone familiar with Cypress can immediately hop in and\nfeel productive writing component tests without a large learning curve.\nComponent tests can also use the vast Cypress ecosystem, plugins, and services\n(like ",(0,s.jsx)(n.a,{href:"https://www.cypress.io/cloud",children:"Cypress Cloud"})," already available to\ncomplement your component tests."]}),"\n",(0,s.jsx)(n.h2,{id:"Technical-Questions",children:"Technical Questions"}),"\n",(0,s.jsx)(n.h3,{id:"What-is-the-Mount-Function",children:"What is the Mount Function?"}),"\n",(0,s.jsxs)(n.p,{children:["We ship a ",(0,s.jsx)(n.code,{children:"mount"})," function for each UI library that is imported from the\n",(0,s.jsx)(n.code,{children:"cypress"})," package. It is responsible for rendering components within Cypress's\nsandboxed iframe and handling any framework-specific cleanup."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// example showing importing mount command in react\nimport { mount } from 'cypress/react'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["While you can use the ",(0,s.jsx)(n.code,{children:"mount"})," function in your tests, we recommend using\n",(0,s.jsx)(n.a,{href:"/api/commands/mount",children:(0,s.jsx)(n.code,{children:"cy.mount()"})}),", which is added as a\n",(0,s.jsx)(n.a,{href:"/api/cypress-api/custom-commands",children:"custom command"})," in the\n",(0,s.jsx)(n.strong,{children:"cypress/support/component.js"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:"title=cypress/support/component.js",children:"import { mount } from 'cypress/react'\n\nCypress.Commands.add('mount', mount)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This allows you to use ",(0,s.jsx)(n.code,{children:"cy.mount()"})," in any component test without having to\nimport the framework-specific mount command, as well as customizing it to fit\nyour needs. See the examples guide for each framework for info on creating a\ncustom ",(0,s.jsx)(n.code,{children:"cy.mount()"})," command."]}),"\n",(0,s.jsx)(n.h3,{id:"Why-isnt-my-component-rendering-as-it-should",children:"Why isn't my component rendering as it should?"}),"\n",(0,s.jsxs)(n.p,{children:["Any global styles and fonts must be imported and made available to your\ncomponent, just like in the application. See our guide on\n",(0,s.jsx)(n.a,{href:"/guides/component-testing/styling-components",children:"Styling Components"})," for more\ninformation on doing so."]}),"\n",(0,s.jsx)(n.h3,{id:"Why-doesnt-my-spec-show-in-the-Specs-page",children:"Why doesn't my spec show in the Specs page?"}),"\n",(0,s.jsxs)(n.p,{children:["If something appears missing from the spec list, make sure the files have the\n",(0,s.jsxs)(n.a,{href:"/guides/component-testing/component-framework-configuration#Spec-Pattern-for-Component-Tests",children:["proper extension and the ",(0,s.jsx)(n.code,{children:"specPattern"})," is correctly defined"]}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"How-do-I-fix-ESLint-errors-for-things-like-using-the-global-Cypress-objects",children:"How do I fix ESLint errors for things like using the global Cypress objects?"}),"\n",(0,s.jsxs)(n.p,{children:["If you experience ESLint errors in your code editor around Cypress globals,\ninstall the\n",(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/eslint-plugin-cypress",children:(0,s.jsx)(n.code,{children:"eslint-plugin-cypress"})}),"\nESLint plugin."]}),"\n",(0,s.jsxs)(n.h3,{id:"Why-isnt-TypeScript-recognizing-the-global-Cypress-objects-or-custom-cypress-commands-eg-cymount",children:["Why isn't TypeScript recognizing the global Cypress objects or custom cypress commands (eg: ",(0,s.jsx)(n.code,{children:"cy.mount"}),")?"]}),"\n",(0,s.jsxs)(n.p,{children:["In some instances, TypeScript might not recognize the custom ",(0,s.jsx)(n.code,{children:"cy.mount()"}),"\ncommand in Cypress spec files not located in the ",(0,s.jsx)(n.strong,{children:"cypress"})," directory. You will\nget a compiler error specifying that the type is not found in this case."]}),"\n",(0,s.jsxs)(n.p,{children:["A quick way to fix this is to include the ",(0,s.jsx)(n.strong,{children:"cypress"})," directory in your\n",(0,s.jsx)(n.strong,{children:"tsconfig.json"})," options like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"include": [\n  "src",\n  "cypress"\n]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["TypeScript will monitor all files in the ",(0,s.jsx)(n.strong,{children:"cypress"})," folder and pick up the\ntypings defined in the ",(0,s.jsx)(n.strong,{children:"cypress/support/component.ts"})," file."]}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, you can move your typings to an external file and include that\nfile in your ",(0,s.jsx)(n.strong,{children:"tsconfig.json"})," file. See our\n",(0,s.jsx)(n.a,{href:"/guides/tooling/typescript-support#Using-an-External-Typings-File",children:"TypeScript Configuration"}),"\nguide for more info on doing this."]}),"\n",(0,s.jsx)(n.h3,{id:"How-do-I-get-TypeScript-to-recognize-Cypress-types-and-not-Jest-types",children:"How do I get TypeScript to recognize Cypress types and not Jest types?"}),"\n",(0,s.jsxs)(n.p,{children:["For frameworks that include Jest out of the box (like Create React App), you\nmight run into issues where the Cypress global types for TypeScript conflict\nwith Jest global types (",(0,s.jsx)(n.code,{children:"describe"}),", ",(0,s.jsx)(n.code,{children:"test"}),", ",(0,s.jsx)(n.code,{children:"it"}),", etc..). In this case, other\nCypress globals like ",(0,s.jsx)(n.code,{children:"Cypress"})," and ",(0,s.jsx)(n.code,{children:"cy"})," might not be working properly either."]}),"\n",(0,s.jsxs)(n.p,{children:["We are currently investigating better ways to handle this, but for the time\nbeing, we recommend using a\n",(0,s.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-types-",children:"triple slash references directive"}),"\nto instruct the TypeScript compiler to look at the Cypress global types in each\nof your affected spec files:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'/// <reference types="cypress" />\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Alternatively, Relocate Component Specs"})}),"\n",(0,s.jsx)(n.p,{children:"You can also group your Cypress and Jest tests inside separate folders (not\nco-located with components)."}),"\n",(0,s.jsxs)(n.p,{children:["You will need to add a ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," to the folder and specify the types the\nfiles inside that folder should use."]}),"\n",(0,s.jsxs)(n.p,{children:["Don't forget to update your\n",(0,s.jsx)(n.a,{href:"https://docs.cypress.io/guides/references/configuration#component",children:(0,s.jsx)(n.code,{children:"specPattern"})}),"\nto include the new file location."]})]})}function l(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>r});var s=t(7294);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);