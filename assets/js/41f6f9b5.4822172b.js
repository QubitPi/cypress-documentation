"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[9897],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return n?o.createElement(g,s(s({ref:t},p),{},{components:n})):o.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1843:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>v,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const r={title:"Code Coverage"},s=void 0,i={unversionedId:"guides/tooling/code-coverage",id:"guides/tooling/code-coverage",title:"Code Coverage",description:"What you'll learn",source:"@site/docs/guides/tooling/code-coverage.mdx",sourceDirName:"guides/tooling",slug:"/guides/tooling/code-coverage",permalink:"/cypress-documentation/guides/tooling/code-coverage",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/tooling/code-coverage.mdx",tags:[],version:"current",lastUpdatedAt:1696480060,formattedLastUpdatedAt:"Oct 5, 2023",frontMatter:{title:"Code Coverage"},sidebar:"guides",previous:{title:"IDE Integration",permalink:"/cypress-documentation/guides/tooling/IDE-integration"},next:{title:"Plugins",permalink:"/cypress-documentation/guides/tooling/plugins-guide"}},c={},l=[{value:"Introduction",id:"Introduction",level:2},{value:"Instrumenting code",id:"Instrumenting-code",level:2},{value:"Using NYC",id:"Using-NYC",level:3},{value:"Using code transpilation pipeline",id:"Using-code-transpilation-pipeline",level:3},{value:"E2E code coverage",id:"E2E-code-coverage",level:2},{value:"Install the plugin",id:"Install-the-plugin",level:3},{value:"See code coverage summary",id:"See-code-coverage-summary",level:3},{value:"Code coverage as a guide",id:"Code-coverage-as-a-guide",level:2},{value:"Combining code coverage from parallel tests",id:"Combining-code-coverage-from-parallel-tests",level:2},{value:"E2E and unit code coverage",id:"E2E-and-unit-code-coverage",level:2},{value:"Full stack code coverage",id:"Full-stack-code-coverage",level:2},{value:"Future work",id:"Future-work",level:2},{value:"Videos",id:"Videos",level:2},{value:"How to instrument react-scripts web application for code coverage",id:"How-to-instrument-react-scripts-web-application-for-code-coverage",level:4},{value:"Get code coverage reports from Cypress tests",id:"Get-code-coverage-reports-from-Cypress-tests",level:4},{value:"Excluding code from code coverage reports",id:"Excluding-code-from-code-coverage-reports",level:4},{value:"Check code coverage robustly using 3rd party tool",id:"Check-code-coverage-robustly-using-3rd-party-tool",level:4},{value:"Adding code coverage badge to your project",id:"Adding-code-coverage-badge-to-your-project",level:4},{value:"Show code coverage in commit status check",id:"Show-code-coverage-in-commit-status-check",level:4},{value:"Checking code coverage on pull request",id:"Checking-code-coverage-on-pull-request",level:4},{value:"Examples",id:"Examples",level:2},{value:"See also",id:"See-also",level:2}],p=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},d=p("Icon"),u=p("DocsVideo"),m=p("DocsImage"),g=p("CypressConfigFileTabs"),h=p("E2EOrCtTabs"),f={toc:l};function v(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("h2",{parentName:"admonition",id:"What-youll-learn"},(0,a.kt)(d,{name:"graduation-cap",mdxType:"Icon"})," What you'll learn"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"How to instrument your application code"),(0,a.kt)("li",{parentName:"ul"},"How to save the coverage information collected during end-to-end and unit\ntests"),(0,a.kt)("li",{parentName:"ul"},"How to use the code coverage reports to guide writing tests"))),(0,a.kt)(u,{src:"https://youtube.com/embed/C8g5X4vCZJA",mdxType:"DocsVideo"}),(0,a.kt)("h2",{id:"Introduction"},"Introduction"),(0,a.kt)("p",null,"As you write more and more end-to-end tests, you will find yourself wondering -\ndo I need to write more tests? Are there parts of the application still\nuntested? Are there parts of the application that perhaps are tested too much?\nOne answer to those questions is to find out which lines of the application's\nsource code were executed during end-to-end tests. If there are important\nsections of the application's logic that ",(0,a.kt)("strong",{parentName:"p"},"were not")," executed from the tests,\nthen a new test should be added to ensure that part of our application logic is\ntested."),(0,a.kt)("p",null,"Computing the source code lines that were executed during the test is done\nthrough ",(0,a.kt)("strong",{parentName:"p"},"code coverage"),". Code coverage requires inserting additional counters\ninto your source code before running it. This step is called\n",(0,a.kt)("strong",{parentName:"p"},"instrumentation"),". Instrumentation takes code that looks like this..."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// add.js\nfunction add(a, b) {\n  return a + b\n}\nmodule.exports = { add }\n")),(0,a.kt)("p",null,"...and parses it to find all functions, statements, and branches and then\ninserts ",(0,a.kt)("strong",{parentName:"p"},"counters")," into the code. For the above code it might look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// this object counts the number of times each\n// function and each statement is executed\nconst c = (window.__coverage__ = {\n  // "f" counts the number of times each function is called\n  // we only have a single function in the source code\n  // thus it starts with [0]\n  f: [0],\n  // "s" counts the number of times each statement is called\n  // we have 3 statements and they all start with 0\n  s: [0, 0, 0],\n})\n\n// the original code + increment statements\n// uses "c" alias to "window.__coverage__" object\n// the first statement defines the function,\n// let\'s increment it\nc.s[0]++\nfunction add(a, b) {\n  // function is called and then the 2nd statement\n  c.f[0]++\n  c.s[1]++\n\n  return a + b\n}\n// 3rd statement is about to be called\nc.s[2]++\nmodule.exports = { add }\n')),(0,a.kt)("p",null,"Imagine we load the above instrumented source file from our test spec file.\nImmediately some counters will be incremented!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// add.cy.js\nconst { add } = require(\'./add\')\n// JavaScript engine has parsed and evaluated "add.js" source code\n// which ran some of the increment statements\n// __coverage__ has now\n// f: [0] - function "add" was NOT executed\n// s: [1, 0, 1] - first and third counters were incremented\n// but the statement inside function "add" was NOT executed\n')),(0,a.kt)("p",null,"We want to make sure every statement and function in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"add.js")," has been\nexecuted by our tests at least once. Thus we write a test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// add.cy.js\nconst { add } = require('./add')\n\nit('adds numbers', () => {\n  expect(add(2, 3)).to.equal(5)\n})\n")),(0,a.kt)("p",null,"When the test calls ",(0,a.kt)("inlineCode",{parentName:"p"},"add(2, 3)"),', the counter increments inside the "add"\nfunction are executed, and the coverage object becomes:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  // "f" keeps count of times each function was called\n  // we only have a single function in the source code\n  // thus it starts with [0]\n  f: [1],\n  // "s" keeps count of times each statement was called\n  // we have 3 statements, and they all start with 0\n  s: [1, 1, 1]\n}\n')),(0,a.kt)("p",null,"This single test has achieved 100% code coverage - every function and every\nstatement has been executed at least once. But, in real world applications,\nachieving 100% code coverage requires multiple tests."),(0,a.kt)("p",null,"Once the tests finish, the coverage object can be serialized and saved to disk\nso that a human-friendly report can be generated. The collected coverage\ninformation can also be sent to external services and help during pull request\nreviews."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},'If you are unfamiliar with code coverage or want to learn more, take a look at\nthe "Understanding JavaScript Code Coverage" blog post\n',(0,a.kt)("a",{parentName:"p",href:"https://medium.com/engineering-semantics3/understanding-code-coverage-1074e8fccce0/"},"Part 1"),"\nand\n",(0,a.kt)("a",{parentName:"p",href:"https://medium.com/engineering-semantics3/understanding-javascript-code-coverage-part-2-9aedaa5119e5/"},"Part 2"),".")),(0,a.kt)("p",null,"This guide explains how to instrument the application source code using common\ntools. Then we show how to save the coverage information and generate reports\nusing the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/code-coverage"},(0,a.kt)("inlineCode",{parentName:"a"},"@cypress/code-coverage"))," Cypress\nplugin. After reading this guide you should be able to better target your tests\nusing the code coverage information."),(0,a.kt)("p",null,"This guide explains how to find what parts of your application code are covered\nby Cypress tests so you can have 100% confidence that your tests aren't missing\ncrucial parts of your application. The collected information can be sent to\nexternal services, automatically run during pull request reviews, and integrated\ninto CI."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The full source code for this guide can be found in the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-example-todomvc-redux"},"cypress-io/cypress-example-todomvc-redux"),"\nrepository.")),(0,a.kt)("h2",{id:"Instrumenting-code"},"Instrumenting code"),(0,a.kt)("p",null,"Cypress does not instrument your code - you need to do it yourself. The golden\nstandard for JavaScript code instrumentation is the battle-hardened\n",(0,a.kt)("a",{parentName:"p",href:"https://istanbul.js.org"},"Istanbul")," and, luckily, it plays very nicely with the\nCypress. You can instrument the code as a build step through one of two ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Using the ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/istanbuljs/nyc"},"nyc")," module - a command-line\ninterface for the ",(0,a.kt)("a",{parentName:"li",href:"https://istanbul.js.org"},"Istanbul")," library"),(0,a.kt)("li",{parentName:"ul"},"As part of your code transpilation pipeline using the\n",(0,a.kt)("a",{parentName:"li",href:"https://github.com/istanbuljs/babel-plugin-istanbul"},(0,a.kt)("inlineCode",{parentName:"a"},"babel-plugin-istanbul")),"\ntool.")),(0,a.kt)("h3",{id:"Using-NYC"},"Using NYC"),(0,a.kt)("p",null,"To instrument the application code located in your ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," folder and save it in\nan ",(0,a.kt)("inlineCode",{parentName:"p"},"instrumented")," folder use the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npx nyc instrument --compact=false src instrumented\n")),(0,a.kt)("p",null,"We are passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"--compact=false")," flag to generate human-friendly output."),(0,a.kt)("p",null,"The instrumentation takes your original code like this fragment..."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const store = createStore(reducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n")),(0,a.kt)("p",null,"...and wraps each statement with additional counters that keep track of how many\ntimes each source line has been executed by the JavaScript runtime."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const store = (cov_18hmhptych.s[0]++, createStore(reducer))\ncov_18hmhptych.s[1]++\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n")),(0,a.kt)("p",null,"Notice the calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"cov_18hmhptych.s[0]++")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"cov_18hmhptych.s[1]++")," that\nincrement the statement counters. All counters and additional book-keeping\ninformation is stored in a single object attached to the browser's ",(0,a.kt)("inlineCode",{parentName:"p"},"window"),"\nobject. We can see the counters if we serve the ",(0,a.kt)("inlineCode",{parentName:"p"},"instrumented")," folder instead of\n",(0,a.kt)("inlineCode",{parentName:"p"},"src")," and open the application."),(0,a.kt)(m,{src:"/img/guides/code-coverage/coverage-object.png",alt:"Code coverage object",mdxType:"DocsImage"}),(0,a.kt)("p",null,"If we drill into the coverage object we can see the statements executed in each\nfile. For example the file ",(0,a.kt)("inlineCode",{parentName:"p"},"src/index.js")," has the following information:"),(0,a.kt)(m,{src:"/img/guides/code-coverage/coverage-statements.png",alt:"Covered statements counters in a from the index file",mdxType:"DocsImage"}),(0,a.kt)("p",null,"In green, we highlighted the 4 statements present in that file. The first three\nstatements were each executed once and the last statement was never executed (it\nprobably was inside an ",(0,a.kt)("inlineCode",{parentName:"p"},"if")," statement). By using the application, we can both\nincrement the counters and flip some of the zero counters into positive numbers."),(0,a.kt)("h3",{id:"Using-code-transpilation-pipeline"},"Using code transpilation pipeline"),(0,a.kt)("p",null,"Instead of using the ",(0,a.kt)("inlineCode",{parentName:"p"},"npx instrument")," command, we can use\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/istanbuljs/babel-plugin-istanbul"},(0,a.kt)("inlineCode",{parentName:"a"},"babel-plugin-istanbul")),"\nto instrument the code as part of its transpilation. Add this plugin to the\n",(0,a.kt)("inlineCode",{parentName:"p"},".babelrc")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "presets": ["@babel/preset-react"],\n  "plugins": ["transform-class-properties", "istanbul"]\n}\n')),(0,a.kt)("p",null,"We can now serve the application and get instrumented code without an\nintermediate folder, but the result is the same instrumented code loaded by the\nbrowser, with the same ",(0,a.kt)("inlineCode",{parentName:"p"},"window.__coverage__")," object keeping track of the\noriginal statements."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Check out\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/code-coverage#examples"},(0,a.kt)("inlineCode",{parentName:"a"},"@cypress/code-coverage#examples")),"\nfor full example projects showing different code coverage setups.")),(0,a.kt)(m,{src:"/img/guides/code-coverage/source-map.png",alt:"Bundled code and source mapped originals",mdxType:"DocsImage"}),(0,a.kt)("p",null,"A really nice feature of both ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/istanbuljs/nyc"},"nyc")," and\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/istanbuljs/babel-plugin-istanbul"},(0,a.kt)("inlineCode",{parentName:"a"},"babel-plugin-istanbul")),"\nis that the source maps are generated automatically, allowing us to collect code\ncoverage information, but also interact with the original, non-instrumented code\nin the Developer Tools. In the screenshot above the bundle (green arrow) has\ncoverage counters, but the source mapped files in the green rectangle show the\noriginal code."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"nyc")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"babel-plugin-istanbul")," only instrument the application code and\nnot 3rd party dependencies from ",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules"),".")),(0,a.kt)("h2",{id:"E2E-code-coverage"},"E2E code coverage"),(0,a.kt)("p",null,"To handle code coverage collected during each test, we created a\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/code-coverage"},(0,a.kt)("inlineCode",{parentName:"a"},"@cypress/code-coverage"))," Cypress\nplugin. It merges coverage from each test and saves the combined result. It also\ncalls ",(0,a.kt)("inlineCode",{parentName:"p"},"nyc")," (its peer dependency) to generate static HTML reports for human\nconsumption."),(0,a.kt)("h3",{id:"Install-the-plugin"},"Install the plugin"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Please consult the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/code-coverage"},(0,a.kt)("inlineCode",{parentName:"a"},"@cypress/code-coverage")),"\ndocumentation for up-to-date installation instructions.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npm install -D @cypress/code-coverage\n")),(0,a.kt)("p",null,"Then add the code below to the\n",(0,a.kt)("a",{parentName:"p",href:"/guides/references/configuration#Folders-Files"},"supportFile")," and\n",(0,a.kt)("a",{parentName:"p",href:"/guides/tooling/plugins-guide#Using-a-plugin"},"setupNodeEvents")," function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// cypress/support/e2e.js\nimport '@cypress/code-coverage/support'\n")),(0,a.kt)("cypress-config-plugin-example",null,(0,a.kt)(g,{mdxType:"CypressConfigFileTabs"},(0,a.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      require('@cypress/code-coverage/task')(on, config)\n      // include any other plugin code...\n\n      // It's IMPORTANT to return the config object\n      // with any changed environment variables\n      return config\n    },\n  },\n})\n")),(0,a.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      require('@cypress/code-coverage/task')(on, config)\n      // include any other plugin code...\n\n      // It's IMPORTANT to return the config object\n      // with any changed environment variables\n      return config\n    },\n  },\n})\n")))),(0,a.kt)("p",null,"When you run the Cypress tests now, you should see a few commands after the\ntests finish. We have highlighted these commands using a green rectangle below."),(0,a.kt)(m,{src:"/img/guides/code-coverage/coverage-plugin-commands.png",alt:"coverage plugin commands",mdxType:"DocsImage"}),(0,a.kt)("p",null,"After the tests complete, the final code coverage is saved to a ",(0,a.kt)("inlineCode",{parentName:"p"},".nyc_output"),"\nfolder. It is a JSON file from which we can generate a report in a variety of\nformats. The\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/code-coverage"},(0,a.kt)("inlineCode",{parentName:"a"},"@cypress/code-coverage"))," plugin\ngenerates the HTML report automatically - you can open the ",(0,a.kt)("inlineCode",{parentName:"p"},"coverage/index.html"),"\npage locally after the tests finish. You can also call ",(0,a.kt)("inlineCode",{parentName:"p"},"nyc report")," to generate\nother reports, for example, sending the coverage information to 3rd party\nservices."),(0,a.kt)("h3",{id:"See-code-coverage-summary"},"See code coverage summary"),(0,a.kt)("p",null,"To see the summary of the code coverage after tests run, run the command below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npx nyc report --reporter=text-summary\n\n========= Coverage summary =======\nStatements   : 76.3% ( 103/135 )\nBranches     : 65.31% ( 32/49 )\nFunctions    : 64% ( 32/50 )\nLines        : 81.42% ( 92/113 )\n==================================\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},"Tip:")," store the ",(0,a.kt)("inlineCode",{parentName:"p"},"coverage")," folder as a build artifact on your continuous\nintegration server. Because the report is a static HTML page, some CIs can show\nit right from their web applications. The screenshot below shows the coverage\nreport stored on CircleCI. Clicking on ",(0,a.kt)("inlineCode",{parentName:"p"},"index.html")," shows the report right in\nthe browser.")),(0,a.kt)(m,{src:"/img/guides/code-coverage/circleci-coverage-report.png",alt:"coverage HTML report on CircleCI",mdxType:"DocsImage"}),(0,a.kt)("h2",{id:"Code-coverage-as-a-guide"},"Code coverage as a guide"),(0,a.kt)("p",null,"Even a single test can cover a lot of the application code. For example, let's\nrun the following test that adds a few items, then marks one of them as\ncompleted."),(0,a.kt)("visit-mount-example",null,(0,a.kt)(h,{mdxType:"E2EOrCtTabs"},(0,a.kt)("pre",{parentName:"visit-mount-example"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"it('adds and completes todos', () => {\n  cy.visit('/')\n  cy.get('.new-todo')\n    .type('write code{enter}')\n    .type('write tests{enter}')\n    .type('deploy{enter}')\n\n  cy.get('.todo').should('have.length', 3)\n\n  cy.get('.todo').first().find('.toggle').check()\n\n  cy.get('.todo').first().should('have.class', 'completed')\n})\n")),(0,a.kt)("pre",{parentName:"visit-mount-example"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"it('adds and completes todos', () => {\n  cy.mount(<AddTodo />)\n  cy.get('.new-todo')\n    .type('write code{enter}')\n    .type('write tests{enter}')\n    .type('deploy{enter}')\n\n  cy.get('.todo').should('have.length', 3)\n\n  cy.get('.todo').first().find('.toggle').check()\n\n  cy.get('.todo').first().should('have.class', 'completed')\n})\n")))),(0,a.kt)("p",null,"After running the test and opening the HTML report, we see 76% code coverage in\nour application."),(0,a.kt)(m,{src:"/img/guides/code-coverage/single-test.png",alt:"Coverage report after a single test",mdxType:"DocsImage"}),(0,a.kt)("p",null,"Even better, we can drill down into the individual source files to see what code\nwe missed. In our example application, the main state logic is in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"src/reducers/todos.js")," file. Let's see the code coverage in this file:"),(0,a.kt)(m,{src:"/img/guides/code-coverage/todos-coverage.png",alt:"Main application logic coverage",mdxType:"DocsImage"}),(0,a.kt)("p",null,"Notice how the ",(0,a.kt)("strong",{parentName:"p"},"ADD_TODO")," action was executed 3 times - because our test has\nadded 3 todo items, and the ",(0,a.kt)("strong",{parentName:"p"},"COMPLETE_TODO")," action was executed just once -\nbecause our test has marked 1 todo item as completed."),(0,a.kt)("p",null,"The source lines not covered marked in yellow (the switch cases the test missed)\nand red (regular statements) are a great guide for writing more end-to-end\ntests. We need tests that delete todo items, edit them, mark all of them as\ncompleted at once and clear completed items. When we cover every switch\nstatement in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/reducers/todos.js")," we probably will achieve close to 100% code\ncoverage. Even more importantly, we will cover the main features of the\napplication the user is expected to use."),(0,a.kt)("p",null,"We can write more E2E tests."),(0,a.kt)(m,{src:"/img/guides/code-coverage/more-tests.png",alt:"Cypress passed more tests",mdxType:"DocsImage"}),(0,a.kt)("p",null,"The produced HTML report shows 99% code coverage"),(0,a.kt)(m,{src:"/img/guides/code-coverage/almost-100.png",alt:"99 percent code coverage",mdxType:"DocsImage"}),(0,a.kt)("p",null,"Every source file but 1 is covered at 100%. We can have great confidence in our\napplication, and safely refactor the code knowing that we have a robust set of\nend-to-end tests."),(0,a.kt)("p",null,"If possible, we advise implementing\n",(0,a.kt)("a",{parentName:"p",href:"/guides/tooling/visual-testing"},"visual testing")," in addition to Cypress\nfunctional tests to avoid CSS and visual regressions."),(0,a.kt)("h2",{id:"Combining-code-coverage-from-parallel-tests"},"Combining code coverage from parallel tests"),(0,a.kt)("p",null,"If you execute Cypress tests in\n",(0,a.kt)("a",{parentName:"p",href:"/guides/cloud/smart-orchestration/parallelization"},"parallel"),", each machine ends\nup with a code coverage report that only shows a portion of the code exercised.\nTypically an external code coverage service would merge such partial reports for\nyou. If you do want to merge the reports yourself:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"on every machine running Cypress tests, copy the produced code coverage report\ninto a common folder under a unique name to avoid overwriting it"),(0,a.kt)("li",{parentName:"ul"},"after all E2E tests finish, combine the reports yourself using ",(0,a.kt)("inlineCode",{parentName:"li"},"nyc merge"),"\ncommand")),(0,a.kt)("p",null,"You can find an example of merging partial reports in our\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-example-conduit-app"},"cypress-io/cypress-example-conduit-app")),(0,a.kt)("h2",{id:"E2E-and-unit-code-coverage"},"E2E and unit code coverage"),(0,a.kt)("p",null,'Let\'s look at the one file that has a "missed" line. It is the\n',(0,a.kt)("inlineCode",{parentName:"p"},"src/selectors/index.js")," file shown below."),(0,a.kt)(m,{src:"/img/guides/code-coverage/selectors.png",alt:"Selectors file with a line not covered by end-to-end tests",mdxType:"DocsImage"}),(0,a.kt)("p",null,"The source line not covered by the end-to-end tests shows an edge case NOT\nreachable from the UI. Yet this switch case is definitely worth testing - at\nleast to avoid accidentally changing its behavior during future refactoring."),(0,a.kt)("p",null,"We can directly test this piece of code by importing the ",(0,a.kt)("inlineCode",{parentName:"p"},"getVisibleTodos"),"\nfunction from the Cypress spec file. In essence we are using Cypress as a unit\ntesting tool (find more unit testing recipes\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-example-recipes#unit-testing"},"here"),")."),(0,a.kt)("p",null,"Here is our test to confirm that the error is thrown."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// cypress/e2e/selectors.cy.js\nimport { getVisibleTodos } from '../../src/selectors'\n\ndescribe('getVisibleTodos', () => {\n  it('throws an error for unknown visibility filter', () => {\n    expect(() => {\n      getVisibleTodos({\n        todos: [],\n        visibilityFilter: 'unknown-filter',\n      })\n    }).to.throw()\n  })\n})\n")),(0,a.kt)("p",null,"The test passes, even if there is no web application visited."),(0,a.kt)(m,{src:"/img/guides/code-coverage/unit-test.png",alt:"Unit test for selector",mdxType:"DocsImage"}),(0,a.kt)("p",null,"Previously we instrumented the application code (either using a build step or\ninserting a plugin into the Babel pipeline). In the example above, we are NOT\nloading an application, instead we are only running the test files by\nthemselves."),(0,a.kt)("p",null,"If we want to collect the code coverage from the unit tests, we need to\ninstrument the source code of ",(0,a.kt)("em",{parentName:"p"},"our spec files"),". The simplest way to do this is\nto use the same ",(0,a.kt)("inlineCode",{parentName:"p"},".babelrc")," with\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/istanbuljs/babel-plugin-istanbul"},(0,a.kt)("inlineCode",{parentName:"a"},"babel-plugin-istanbul")),"\nand tell the Cypress built-in bundler to use ",(0,a.kt)("inlineCode",{parentName:"p"},".babelrc")," when bundling specs. One\ncan use the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/code-coverage"},(0,a.kt)("inlineCode",{parentName:"a"},"@cypress/code-coverage"))," plugin\nagain to do this by adding the code below to the\n",(0,a.kt)("a",{parentName:"p",href:"/guides/tooling/plugins-guide#Using-a-plugin"},"setupNodeEvents")," function."),(0,a.kt)("cypress-config-plugin-example",null,(0,a.kt)(g,{mdxType:"CypressConfigFileTabs"},(0,a.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      require('@cypress/code-coverage/task')(on, config)\n      // tell Cypress to use .babelrc file\n      // and instrument the specs files\n      // only the extra application files will be instrumented\n      // not the spec files themselves\n      on('file:preprocessor', require('@cypress/code-coverage/use-babelrc'))\n\n      return config\n    },\n  },\n})\n")),(0,a.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      require('@cypress/code-coverage/task')(on, config)\n      // tell Cypress to use .babelrc file\n      // and instrument the specs files\n      // only the extra application files will be instrumented\n      // not the spec files themselves\n      on('file:preprocessor', require('@cypress/code-coverage/use-babelrc'))\n\n      return config\n    },\n  },\n})\n")))),(0,a.kt)("p",null,"For reference, the ",(0,a.kt)("inlineCode",{parentName:"p"},".babelrc")," file is shared between the example application and\nthe spec files, thus Cypress tests are transpiled the same way the application\ncode is transpiled."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "presets": ["@babel/preset-react"],\n  "plugins": ["transform-class-properties", "istanbul"]\n}\n')),(0,a.kt)("p",null,"When we run Cypress with\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/istanbuljs/babel-plugin-istanbul"},(0,a.kt)("inlineCode",{parentName:"a"},"babel-plugin-istanbul")),"\nincluded and inspect the ",(0,a.kt)("inlineCode",{parentName:"p"},"window.__coverage__")," object in the ",(0,a.kt)("strong",{parentName:"p"},"spec iframe"),", we\nshould see the coverage information for the application source files."),(0,a.kt)(m,{src:"/img/guides/code-coverage/code-coverage-in-unit-test.png",alt:"Code coverage in the unit test",mdxType:"DocsImage"}),(0,a.kt)("p",null,"The code coverage information in unit tests and end-to-end tests has the same\nformat; the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/code-coverage"},(0,a.kt)("inlineCode",{parentName:"a"},"@cypress/code-coverage"))," plugin\nautomatically grabs both and saves the combined report. Thus we can see the code\ncoverage from the ",(0,a.kt)("inlineCode",{parentName:"p"},"cypress/e2e/selectors.cy.js")," file after running the test."),(0,a.kt)(m,{src:"/img/guides/code-coverage/unit-test-coverage.png",alt:"Selectors code coverage",mdxType:"DocsImage"}),(0,a.kt)("p",null,"Our unit test is hitting the line we could not reach from the end-to-end tests,\nand if we execute all spec files - we will get 100% code coverage."),(0,a.kt)(m,{src:"/img/guides/code-coverage/100percent.png",alt:"Full code coverage",mdxType:"DocsImage"}),(0,a.kt)("h2",{id:"Full-stack-code-coverage"},"Full stack code coverage"),(0,a.kt)("p",null,"A complex application might have a Node back end with its own complex logic.\nFrom the front end web application, the calls to the API go through layers of\ncode. It would be nice to track what back end code has been exercised during\nCypress end-to-end tests."),(0,a.kt)("p",null,"Are our end-to-end tests that are so effective at covering the web application\ncode also covering the back end server code?"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Long story short: yes.")," You can collect the code coverage from the back end,\nand let the ",(0,a.kt)("inlineCode",{parentName:"p"},"@cypress/code-coverage")," plugin merge it with the front end\ncoverage, creating a single full stack report."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The full source code for this section can be found in the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-example-conduit-app"},"cypress-io/cypress-example-conduit-app"),"\nrepository.")),(0,a.kt)("p",null,'You can run your Node server and instrument it using nyc on the fly. Instead of\nthe "normal" server start command, you can run the command\n',(0,a.kt)("inlineCode",{parentName:"p"},"npm run start:coverage")," defined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "start": "node server",\n    "start:coverage": "nyc --silent node server"\n  }\n}\n')),(0,a.kt)("p",null,"In your server, insert another middleware from ",(0,a.kt)("inlineCode",{parentName:"p"},"@cypress/code-coverage"),". If you\nuse an Express server, include ",(0,a.kt)("inlineCode",{parentName:"p"},"middleware/express"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const express = require('express')\nconst app = express()\n\nrequire('@cypress/code-coverage/middleware/express')(app)\n")),(0,a.kt)("p",null,"If your server uses hapi, include ",(0,a.kt)("inlineCode",{parentName:"p"},"middleware/hapi")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"if (global.__coverage__) {\n  require('@cypress/code-coverage/middleware/hapi')(server)\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tip:")," you can conditionally register the endpoint only if there is a global\ncode coverage object, and you can\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md"},"exclude the middleware code from the coverage numbers"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/* istanbul ignore next */\nif (global.__coverage__) {\n  require('@cypress/code-coverage/middleware/hapi')(server)\n}\n")),(0,a.kt)("p",null,"For any other server type, define a ",(0,a.kt)("inlineCode",{parentName:"p"},"GET /__coverage__")," endpoint and return the\n",(0,a.kt)("inlineCode",{parentName:"p"},"global.__coverage__")," object."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'if (global.__coverage__) {\n  // handle "GET __coverage__" requests\n  onRequest = (response) => {\n    response.sendJSON({ coverage: global.__coverage__ })\n  }\n}\n')),(0,a.kt)("p",null,"In order for the ",(0,a.kt)("inlineCode",{parentName:"p"},"@cypress/code-coverage")," plugin to know that it should request\nthe back end coverage, add the new endpoint to the Cypress configuration\nenvironment settings under ",(0,a.kt)("inlineCode",{parentName:"p"},"env.codeCoverage.url"),' key. For example, if the\napplication back end is running at port 3000 and we are using the default "GET\n/',(0,a.kt)("strong",{parentName:"p"},"coverage"),'" endpoint, set the following:'),(0,a.kt)("cypress-config-example",null,(0,a.kt)(g,{mdxType:"CypressConfigFileTabs"},(0,a.kt)("pre",{parentName:"cypress-config-example"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  env: {\n    codeCoverage: {\n      url: 'http://localhost:3000/__coverage__',\n    },\n  },\n})\n")),(0,a.kt)("pre",{parentName:"cypress-config-example"},(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  env: {\n    codeCoverage: {\n      url: 'http://localhost:3000/__coverage__',\n    },\n  },\n})\n")))),(0,a.kt)("p",null,"From now on, the front end code coverage collected during end-to-end tests will\nbe merged with the code coverage from the instrumented back end code and saved\nin a single report. Here is an example report from the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-example-conduit-app"},"cypress-io/cypress-example-conduit-app"),"\nexample:"),(0,a.kt)(m,{src:"/img/guides/code-coverage/full-coverage.png",alt:"Combined code coverage report from front and back end code",mdxType:"DocsImage"}),(0,a.kt)("p",null,"You can explore the above combined full stack coverage report at the\n",(0,a.kt)("a",{parentName:"p",href:"https://coveralls.io/github/cypress-io/cypress-example-conduit-app"},"coveralls.io/github/cypress-io/cypress-example-conduit-app"),"\ndashboard. You can also find full stack code coverage in our\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress-realworld-app"},"RealWorld App"),"."),(0,a.kt)("p",null,"Even if you only want to measure the back end code coverage Cypress can help.\nRead the blog post\n",(0,a.kt)("a",{parentName:"p",href:"https://glebbahmutov.com/blog/backend-coverage/"},"Back end Code Coverage from Cypress API tests"),"\nfor the full tutorial."),(0,a.kt)("h2",{id:"Future-work"},"Future work"),(0,a.kt)("p",null,'We are currently exploring two additional features for code coverage during\nend-to-end tests. First, we would like to avoid the "manual" instrumentation\nstep using the Istanbul.js library and instead capture the native code coverage\nthat can be collected by the Chrome browser\'s V8 engine. You can find a\nproof-of-concept example in\n',(0,a.kt)("a",{parentName:"p",href:"https://github.com/bahmutov/cypress-native-chrome-code-coverage-example"},"bahmutov/cypress-native-chrome-code-coverage-example"),"\nrepository."),(0,a.kt)("p",null,"Second, we would like to capture the code coverage from ",(0,a.kt)("em",{parentName:"p"},"the locally running\nback end server")," that is serving the front end web application and handles the\nAPI requests from the web application under test. We believe that E2E tests with\nadditional\n",(0,a.kt)("a",{parentName:"p",href:"https://www.cypress.io/blog/2017/11/07/add-gui-to-your-e2e-api-tests/"},"API tests"),"\nthat Cypress can perform can effectively cover a lot of back end code."),(0,a.kt)("h2",{id:"Videos"},"Videos"),(0,a.kt)("p",null,"There is a series of videos we have recorded showing code coverage in Cypress"),(0,a.kt)("h4",{id:"How-to-instrument-react-scripts-web-application-for-code-coverage"},"How to instrument react-scripts web application for code coverage"),(0,a.kt)(u,{src:"https://youtube.com/embed/edgeQZ8UpD0",mdxType:"DocsVideo"}),(0,a.kt)("h4",{id:"Get-code-coverage-reports-from-Cypress-tests"},"Get code coverage reports from Cypress tests"),(0,a.kt)(u,{src:"https://youtube.com/embed/y8StkffYra0",mdxType:"DocsVideo"}),(0,a.kt)("h4",{id:"Excluding-code-from-code-coverage-reports"},"Excluding code from code coverage reports"),(0,a.kt)(u,{src:"https://youtube.com/embed/DlceMpRpbAw",mdxType:"DocsVideo"}),(0,a.kt)("h4",{id:"Check-code-coverage-robustly-using-3rd-party-tool"},"Check code coverage robustly using 3rd party tool"),(0,a.kt)(u,{src:"https://youtube.com/embed/dwU5gUG2",mdxType:"DocsVideo"}),(0,a.kt)("h4",{id:"Adding-code-coverage-badge-to-your-project"},"Adding code coverage badge to your project"),(0,a.kt)(u,{src:"https://youtube.com/embed/bNVRxb-MKGo",mdxType:"DocsVideo"}),(0,a.kt)("h4",{id:"Show-code-coverage-in-commit-status-check"},"Show code coverage in commit status check"),(0,a.kt)(u,{src:"https://youtube.com/embed/AAl4HmJ3YuM",mdxType:"DocsVideo"}),(0,a.kt)("h4",{id:"Checking-code-coverage-on-pull-request"},"Checking code coverage on pull request"),(0,a.kt)(u,{src:"https://youtube.com/embed/9Eq_gIshK0o",mdxType:"DocsVideo"}),(0,a.kt)("h2",{id:"Examples"},"Examples"),(0,a.kt)("p",null,"You can find full examples showing different code coverage setups in the\nfollowing repositories:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress-realworld-app"},"cypress-io/cypress-realworld-app"),"\nor RWA is a full stack example application that demonstrates ",(0,a.kt)("strong",{parentName:"li"},"best practices\nand scalable strategies with Cypress in practical and realistic scenarios"),".\nThe RWA achieves full code coverage with end-to-end tests\n",(0,a.kt)("a",{parentName:"li",href:"/guides/guides/cross-browser-testing"},"across multiple browsers")," and\n",(0,a.kt)("a",{parentName:"li",href:"/api/commands/viewport"},"device sizes"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress-example-todomvc-redux"},"cypress-io/cypress-example-todomvc-redux"),"\nis the example code used in this guide."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress-example-conduit-app"},"cypress-io/cypress-example-conduit-app"),"\nshows how to collect the coverage information from both back and front end\ncode and merge it into a single report."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/bahmutov/code-coverage-webpack-dev-server"},"bahmutov/code-coverage-webpack-dev-server"),"\nshows how to collect code coverage from an application that uses\nwebpack-dev-server."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/bahmutov/code-coverage-vue-example"},"bahmutov/code-coverage-vue-example"),"\ncollects code coverage for Vue.js single file components."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/lluia/cypress-typescript-coverage-example"},"lluia/cypress-typescript-coverage-example"),"\nshows coverage for a React App that uses TypeScript."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/bahmutov/cypress-and-jest"},"bahmutov/cypress-and-jest"),"\nshows how to run Jest unit tests and Cypress unit tests, collecting code\ncoverage from both test runners, and then produce a merged report."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/rootstrap/react-redux-base"},"rootstrap/react-redux-base"),"\nshows an example with a realistic webpack config. Instruments the source code\nusing ",(0,a.kt)("inlineCode",{parentName:"li"},"babel-plugin-istanbul")," during tests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/skylock/cypress-angular-coverage-example"},"skylock/cypress-angular-coverage-example"),"\nshows an Angular 8 + TypeScript application with instrumentation done using\n",(0,a.kt)("inlineCode",{parentName:"li"},"ngx-build-plus"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/bahmutov/testing-react"},"bahmutov/testing-react")," shows how\nto get code coverage for a React application created using ",(0,a.kt)("inlineCode",{parentName:"li"},"CRA v3")," without\nejecting ",(0,a.kt)("inlineCode",{parentName:"li"},"react-scripts"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/bahmutov/next-and-cypress-example"},"bahmutov/next-and-cypress-example"),"\nshows how to get back end and front end coverage for a Next.js project.\n",(0,a.kt)("inlineCode",{parentName:"li"},"middleware/nextjs.js"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/ericorruption/cypress-code-coverage-typescript-webpack-ts-loader"},"ericorruption/cypress-code-coverage-typescript-webpack-ts-loader"),"\nshows how to collect coverage for a TypeScript + webpack project using\n",(0,a.kt)("inlineCode",{parentName:"li"},"ts-loader")," instead of ",(0,a.kt)("inlineCode",{parentName:"li"},"babel-loader"),".")),(0,a.kt)("p",null,"Find the full list of examples linked in\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/code-coverage#external-examples"},"cypress-io/code-coverage#external-examples"),"."),(0,a.kt)("h2",{id:"See-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The official\n",(0,a.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/code-coverage"},"@cypress/code-coverage")," plugin"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/combined-end-to-end-and-unit-test-coverage/"},"Combined End-to-end and Unit Test Coverage")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/code-coverage-by-parcel/"},"Code Coverage by Parcel Bundler")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/code-coverage-for-e2e-tests/"},"Code Coverage for End-to-end Tests"))))}v.isMDXComponent=!0}}]);