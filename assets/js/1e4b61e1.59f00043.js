"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[444],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),u=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},l=function(e){var n=u(e.components);return o.createElement(p.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=u(t),d=a,g=m["".concat(p,".").concat(d)]||m[d]||c[d]||s;return t?o.createElement(g,r(r({ref:n},l),{},{components:t})):o.createElement(g,r({ref:n},l))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,r=new Array(s);r[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[m]="string"==typeof e?e:a,r[1]=i;for(var u=2;u<s;u++)r[u]=t[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7243:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>g,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var o=t(7462),a=(t(7294),t(3905));const s={title:"Vue Examples",sidebar_position:30},r=void 0,i={unversionedId:"guides/component-testing/vue/examples",id:"guides/component-testing/vue/examples",title:"Vue Examples",description:"Mounting Components",source:"@site/docs/guides/component-testing/vue/examples.mdx",sourceDirName:"guides/component-testing/vue",slug:"/guides/component-testing/vue/examples",permalink:"/cypress-documentation/guides/component-testing/vue/examples",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/component-testing/vue/examples.mdx",tags:[],version:"current",lastUpdatedAt:1702621628,formattedLastUpdatedAt:"Dec 15, 2023",sidebarPosition:30,frontMatter:{title:"Vue Examples",sidebar_position:30},sidebar:"guides",previous:{title:"Vue Overview",permalink:"/cypress-documentation/guides/component-testing/vue/overview"},next:{title:"Vue API",permalink:"/cypress-documentation/guides/component-testing/vue/api"}},p={},u=[{value:"Mounting Components",id:"Mounting-Components",level:2},{value:"Using <code>cy.mount()</code>",id:"Using-cymount",level:3},{value:"Passing Data to a Component",id:"Passing-Data-to-a-Component",level:3},{value:"Testing Event Handlers",id:"Testing-Event-Handlers",level:3},{value:"Using JSX",id:"Using-JSX",level:3},{value:"Using Slots",id:"Using-Slots",level:2},{value:"Default Slot",id:"Default-Slot",level:3},{value:"Named Slot",id:"Named-Slot",level:3},{value:"Using Vue Test Utils",id:"Using-Vue-Test-Utils",level:2},{value:"Custom Mount Commands",id:"Custom-Mount-Commands",level:2},{value:"Customizing <code>cy.mount()</code>",id:"Customizing-cymount",level:3},{value:"Replicating Plugins",id:"Replicating-Plugins",level:3},{value:"Replicating the expected Component Hierarchy",id:"Replicating-the-expected-Component-Hierarchy",level:3},{value:"Vue Router",id:"Vue-Router",level:3},{value:"Vue 3",id:"Vue-3",level:4},{value:"Vue 2",id:"Vue-2",level:4},{value:"Vuex",id:"Vuex",level:3},{value:"Vue 3",id:"Vue-3-1",level:4},{value:"Vue 2",id:"Vue-2-1",level:4},{value:"Global Components",id:"Global-Components",level:3}],l=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},m=l("Tabs"),c=l("TabItem"),d={toc:u};function g(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"Mounting-Components"},"Mounting Components"),(0,a.kt)("h3",{id:"Using-cymount"},"Using ",(0,a.kt)("inlineCode",{parentName:"h3"},"cy.mount()")),(0,a.kt)("p",null,"To mount a component with ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()"),", import the component and pass it to the\nmethod:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Stepper } from './Stepper.vue'\n\nit('mounts', () => {\n  cy.mount(Stepper)\n})\n")),(0,a.kt)("h3",{id:"Passing-Data-to-a-Component"},"Passing Data to a Component"),(0,a.kt)("p",null,"You can pass props and events to a component by setting ",(0,a.kt)("inlineCode",{parentName:"p"},"props")," in the options:"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"Vue 3",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"cy.mount(Stepper, {\n  props: {\n    initial: 100,\n  },\n})\n"))),(0,a.kt)(c,{value:"Vue 2",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"cy.mount(Stepper, {\n  propsData: {\n    initial: 100,\n  },\n})\n")))),(0,a.kt)("h3",{id:"Testing-Event-Handlers"},"Testing Event Handlers"),(0,a.kt)("p",null,"Pass a Cypress ",(0,a.kt)("a",{parentName:"p",href:"/guides/guides/stubs-spies-and-clocks#Spies"},"spy")," to an event\nprop and validate it was called:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"it('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(Stepper, { props: { onChange: onChangeSpy } })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n")),(0,a.kt)("h3",{id:"Using-JSX"},"Using JSX"),(0,a.kt)("p",null,"The mount command also supports JSX syntax (provided that you've configured your\nbundler to support transpiling JSX or TSX files). Some might find using JSX\nsyntax beneficial when writing tests."),(0,a.kt)("p",null,"Sample with JSX:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"it('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(<Stepper initial={100} onChange={onChangeSpy} />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 101)\n})\n")),(0,a.kt)("h2",{id:"Using-Slots"},"Using Slots"),(0,a.kt)("h3",{id:"Default-Slot"},"Default Slot"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"DefaultSlot.cy.js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import DefaultSlot from './DefaultSlot.vue'\n\ndescribe('<DefaultSlot />', () => {\n  it('renders', () => {\n    cy.mount(DefaultSlot, {\n      slots: {\n        default: 'Hello there!',\n      },\n    })\n    cy.get('div.content').should('have.text', 'Hello there!')\n  })\n})\n"))),(0,a.kt)(c,{value:"DefaultSlot.cy.jsx (JSX)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import DefaultSlot from './DefaultSlot.vue'\n\ndescribe('<DefaultSlot />', () => {\n  it('renders', () => {\n    cy.mount(<DefaultSlot>Hello there!</DefaultSlot>)\n    cy.get('div.content').should('have.text', 'Hello there!')\n  })\n})\n"))),(0,a.kt)(c,{value:"DefaultSlot.vue",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <div>\n    <div class="content">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script setup><\/script>\n')))),(0,a.kt)("h3",{id:"Named-Slot"},"Named Slot"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"NamedSlot.cy.js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import NamedSlot from './NamedSlot.vue'\n\ndescribe('<NamedSlot />', () => {\n  it('renders', () => {\n    const slots = {\n      header: 'my header',\n      footer: 'my footer',\n    }\n    cy.mount(NamedSlot, {\n      slots,\n    })\n    cy.get('header').should('have.text', 'my header')\n    cy.get('footer').should('have.text', 'my footer')\n  })\n})\n"))),(0,a.kt)(c,{value:"NamedSlot.cy.jsx (JSX)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import NamedSlot from './NamedSlot.vue'\n\ndescribe('<NamedSlot />', () => {\n  it('renders', () => {\n    const slots = {\n      header: 'my header',\n      footer: 'my footer',\n    }\n    cy.mount(<NamedSlot>{{ ...slots }}</NamedSlot>)\n    cy.get('header').should('have.text', 'my header')\n    cy.get('footer').should('have.text', 'my footer')\n  })\n})\n"))),(0,a.kt)(c,{value:"NamedSlot.vue",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <div>\n    <header>\n      <slot name="header" />\n    </header>\n    <footer>\n      <slot name="footer" />\n    </footer>\n  </div>\n</template>\n\n<script setup><\/script>\n')))),(0,a.kt)("p",null,"For more info on testing Vue components with slots, refer to the\n",(0,a.kt)("a",{parentName:"p",href:"https://test-utils.vuejs.org/guide/advanced/slots.html"},"Vue Test Utils Slots guide"),"."),(0,a.kt)("h2",{id:"Using-Vue-Test-Utils"},"Using Vue Test Utils"),(0,a.kt)("p",null,"In order to encourage interoperability between your existing component tests and\nCypress, we support using Vue Test Utils' API."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"cy.mount(Stepper).then({ wrapper, component }) => {\n  // `wrapper` is the Vue Test Utils wrapper\n  // `component` is the component instance itself\n})\n")),(0,a.kt)("p",null,"If you intend to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"wrapper")," frequently and use Vue Test Util's API, we\nrecommend you write a ",(0,a.kt)("a",{parentName:"p",href:"/api/commands/mount"},"custom mount command")," and create a\nCypress alias to get back at the ",(0,a.kt)("inlineCode",{parentName:"p"},"wrapper"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { mount } from 'cypress/vue'\n\nCypress.Commands.add('mount', (...args) => {\n  return mount(...args).then(({ wrapper }) => {\n    return cy.wrap(wrapper).as('vue')\n  })\n})\n\n// the \"@vue\" alias will now work anywhere\n// after you've mounted your component\ncy.mount(Stepper).doStuff().get('@vue') // The subject is now the Vue Wrapper\n")),(0,a.kt)("p",null,"This means that you are able to get to the resulting ",(0,a.kt)("inlineCode",{parentName:"p"},"wrapper")," returned from the\n",(0,a.kt)("inlineCode",{parentName:"p"},"mount")," command and use ",(0,a.kt)("inlineCode",{parentName:"p"},"wrapper.emitted()")," in order to gain access to Native\nDOM events that were fired, as well as custom events that were emitted by your\ncomponent under test."),(0,a.kt)("p",null,"Because ",(0,a.kt)("inlineCode",{parentName:"p"},"wrapper.emitted()")," is only data, and NOT spy-based you will have to\nunpack its results to write assertions."),(0,a.kt)("p",null,"Your test failure messages will not be as helpful because you're not able to use\nthe Sinon-Chai library that Cypress ships, which comes with methods such as\n",(0,a.kt)("inlineCode",{parentName:"p"},"to.have.been.called")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"to.have.been.calledWith"),"."),(0,a.kt)("p",null,"Usage of the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.get('@vue')")," alias may look something like the below code\nsnippet."),(0,a.kt)("p",null,"Notice that we're using the ",(0,a.kt)("inlineCode",{parentName:"p"},"'should'")," function signature in order to take\nadvantage of Cypress's ",(0,a.kt)("a",{parentName:"p",href:"/guides/guides/test-retries"},"retryability"),". If we\nchained using ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.then")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.should"),", we may run into the kinds of\nissues you have in Vue Test Utils tests where you have to use ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," frequently\nin order to make sure the DOM has updated or any reactive events have fired."),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"With emitted",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"cy.mount(Stepper, { props: { initial: 100 } })\ncy.get(incrementSelector).click()\ncy.get('@vue').should(({ wrapper }) => {\n  expect(wrapper.emitted('change')).to.have.length\n  expect(wrapper.emitted('change')[0][0]).to.equal('101')\n})\n"))),(0,a.kt)(c,{value:"With spies",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const onChangeSpy = cy.spy().as('onChangeSpy')\n\ncy.mount(Stepper, { props: { initial: 100, onChange: onChangeSpy } })\n\ncy.get(incrementSelector).click()\ncy.get('@onChangeSpy').should('have.been.calledWith', '101')\n")))),(0,a.kt)("p",null,"Regardless of our recommendation to use spies instead of the internal Vue Test\nUtils API, you may decide to continue using ",(0,a.kt)("inlineCode",{parentName:"p"},"emitted")," as it ",(0,a.kt)("em",{parentName:"p"},"automatically"),"\nrecords every single event emitted from the component, and so you won't have to\ncreate a spy for every event emitted."),(0,a.kt)("p",null,"This auto-spying behavior could be useful for components that emit ",(0,a.kt)("em",{parentName:"p"},"many")," custom\nevents."),(0,a.kt)("h2",{id:"Custom-Mount-Commands"},"Custom Mount Commands"),(0,a.kt)("h3",{id:"Customizing-cymount"},"Customizing ",(0,a.kt)("inlineCode",{parentName:"h3"},"cy.mount()")),(0,a.kt)("p",null,"While you can use the ",(0,a.kt)("a",{parentName:"p",href:"/guides/component-testing/vue/api#mount"},"mount()"),"\nfunction in your tests, we recommend using ",(0,a.kt)("a",{parentName:"p",href:"/api/commands/mount"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.mount()")),",\nwhich is a ",(0,a.kt)("a",{parentName:"p",href:"/api/cypress-api/custom-commands"},"custom command")," that is defined in\nthe ",(0,a.kt)("strong",{parentName:"p"},"cypress/support/component.js")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=cypress/support/component.js",title:"cypress/support/component.js"},"import { mount } from 'cypress/vue'\n\nCypress.Commands.add('mount', mount)\n")),(0,a.kt)("p",null,"This allows you to use ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()")," in any test without having to import the\n",(0,a.kt)("inlineCode",{parentName:"p"},"mount()")," function in each and every spec file."),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()")," is a simple passthrough to ",(0,a.kt)("inlineCode",{parentName:"p"},"mount()"),", however, you can\ncustomize ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()")," to fit your needs. For instance, if you are using plugins\nor other global app-level setups in your Vue app, you can configure them here."),(0,a.kt)("p",null,"Below are a few examples that demonstrate using a custom mount command. These\nexamples can be adjusted for most other providers that you will need to support."),(0,a.kt)("h3",{id:"Replicating-Plugins"},"Replicating Plugins"),(0,a.kt)("p",null,"Most applications will have state management or routing. Both of these are Vue\nplugins."),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cypress/support/component.js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { createPinia } from 'pinia' // or Vuex\nimport { createI18n } from 'vue-i18n'\nimport { mount } from 'cypress/vue'\nimport { h } from 'vue'\n\n// We recommend that you pull this out\n// into a constants file that you share with\n// your main.js file.\nconst i18nOptions = {\n  locale: 'en',\n  messages: {\n    en: {\n      hello: 'hello!',\n    },\n    ja: {\n      hello: '\u3053\u3093\u306b\u3061\u306f\uff01',\n    },\n  },\n}\n\nCypress.Commands.add('mount', (component, ...args) => {\n  args.global = args.global || {}\n  args.global.plugins = args.global.plugins || []\n  args.global.plugins.push(createPinia())\n  args.global.plugins.push(createI18n())\n\n  return mount(() => {\n    return h(VApp, {}, component)\n  }, ...args)\n})\n"))),(0,a.kt)(c,{value:"With JSX",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createPinia } from 'pinia' // or Vuex\nimport { createI18n } from 'vue-i18n'\nimport { mount } from 'cypress/vue'\n\n// We recommend that you pull this out\n// into a constants file that you share with\n// your main.js file.\nconst i18nOptions = {\n  locale: 'en',\n  messages: {\n    en: {\n      hello: 'hello!',\n    },\n    ja: {\n      hello: '\u3053\u3093\u306b\u3061\u306f\uff01',\n    },\n  },\n}\n\nCypress.Commands.add('mount', (component, ...args) => {\n  args.global = args.global || {}\n  args.global.plugins = args.global.plugins || []\n  args.global.plugins.push(createPinia())\n  args.global.plugins.push(createI18n())\n\n  // <component> is a built-in component that comes with Vue\n  return mount(\n    () => (\n      <VApp>\n        <component is={component} />\n      </VApp>\n    ),\n    ...args\n  )\n})\n")))),(0,a.kt)("h3",{id:"Replicating-the-expected-Component-Hierarchy"},"Replicating the expected Component Hierarchy"),(0,a.kt)("p",null,"Some Vue applications, most famously Vue apps built on top of Vuetify, require\ncertain components to be structured in a specific hierarchy."),(0,a.kt)("p",null,"All Vuetify applications require that you wrap your app in a ",(0,a.kt)("inlineCode",{parentName:"p"},"VApp")," component\nwhen you build it. This is an implementation detail of Vuetify, but once users\ntry to test components that depend on Vuetify, they get Vuetify-specific\ncompilation errors and quickly find out that ",(0,a.kt)("strong",{parentName:"p"},"they need to replicate that\ncomponent hierarchy any time they need to mount a component that uses a Vuetify\ncomponent"),"!"),(0,a.kt)("p",null,"Custom ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount")," commands to the rescue! You may find the JSX syntax to be more\nstraightforward."),(0,a.kt)("p",null,"You'll also need to replicate the plugin setup steps from the Vuetify docs for\neverything to compile."),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cypress/support/component.js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import Vuetify from 'vuetify/lib'\nimport { VApp } from 'vuetify'\nimport { mount } from 'cypress/vue'\nimport { h } from 'vue'\n\n// We recommend that you pull this out\n// into a constants file that you share with\n// your main.js file.\nconst vuetifyOptions = {}\n\nCypress.Commands.add('mount', (component, ...args) => {\n  args.global = args.global || {}\n  args.global.plugins = args.global.plugins || []\n  args.global.plugins.push(new Vuetify(vuetifyOptions))\n\n  return mount(() => {\n    return h(VApp, {}, component)\n  }, ...args)\n})\n"))),(0,a.kt)(c,{value:"With JSX",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import Vuetify from 'vuetify/lib'\nimport { VApp } from 'vuetify'\nimport { mount } from 'cypress/vue'\n\n// We recommend that you pull this out\n// into a constants file that you share with\n// your main.js file.\nconst vuetifyOptions = {}\n\nCypress.Commands.add('mount', (component, ...args) => {\n  args.global = args.global || {}\n  args.global.plugins = args.global.plugins || []\n  args.global.plugins.push(new Vuetify(vuetifyOptions))\n\n  // <component> is a built-in component that comes with Vue\n  return mount(\n    () => (\n      <VApp>\n        <component is={component} />\n      </VApp>\n    ),\n    ...args\n  )\n})\n")))),(0,a.kt)("h3",{id:"Vue-Router"},"Vue Router"),(0,a.kt)("p",null,"To use Vue Router, create a command to register the plugin and pass in a custom\nimplementation of the router via the options param."),(0,a.kt)("h4",{id:"Vue-3"},"Vue 3"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cypress/support/component.js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { mount } from 'cypress/vue'\nimport { createMemoryHistory, createRouter } from 'vue-router'\nimport { routes } from '../../src/router'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.global = options.global || {}\n  options.global.plugins = options.global.plugins || []\n\n  // create router if one is not provided\n  if (!options.router) {\n    options.router = createRouter({\n      routes: routes,\n      history: createMemoryHistory(),\n    })\n  }\n\n  // Add router plugin\n  options.global.plugins.push({\n    install(app) {\n      app.use(options.router)\n    },\n  })\n\n  return mount(component, options)\n})\n"))),(0,a.kt)(c,{value:"Typings",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { mount } from 'cypress/vue'\nimport { Router } from 'vue-router'\n\ntype MountParams = Parameters<typeof mount>\ntype OptionsParam = MountParams[1] & { router?: Router }\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Helper mount function for Vue Components\n       * @param component Vue Component or JSX Element to mount\n       * @param options Options passed to Vue Test Utils\n       */\n      mount(component: any, options?: OptionsParam): Chainable<any>\n    }\n  }\n}\n"))),(0,a.kt)(c,{value:"Spec Usage",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import Navigation from './Navigation.vue'\nimport { routes } from '../router'\nimport { createMemoryHistory, createRouter } from 'vue-router'\n\nit('home link should be active when url is \"/\"', () => {\n  // No need to pass in custom router as default url is '/'\n  cy.mount(<Navigation />)\n\n  cy.get('a').contains('Home').should('have.class', 'router-link-active')\n})\n\nit('login link should be active when url is \"/login\"', () => {\n  // Create a new router instance for each test\n  const router = createRouter({\n    routes: routes,\n    history: createMemoryHistory(),\n  })\n\n  // Change location to `/login`,\n  // and await on the promise with cy.wrap\n  cy.wrap(router.push('/login'))\n\n  // Pass the already initialized router for use\n  cy.mount(<Navigation />, { router })\n\n  cy.get('a').contains('Login').should('have.class', 'router-link-active')\n})\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Calling ",(0,a.kt)("inlineCode",{parentName:"p"},"router.push()")," in the router for Vue 3 is an asynchronous operation.\nUse the ",(0,a.kt)("a",{parentName:"p",href:"/api/commands/wrap"},"cy.wrap")," command to have Cypress await the\npromise's resolve before it continues with other commands:")))),(0,a.kt)("h4",{id:"Vue-2"},"Vue 2"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cypress/support/component.js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { mount } from 'cypress/vue'\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport { router } from '../../src/router'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Add the VueRouter plugin\n  Vue.use(VueRouter)\n\n  // Use the router passed in via options,\n  // or the default one if not provided\n  options.router = options.router || router\n\n  return mount(component, options)\n})\n"))),(0,a.kt)(c,{value:"Typings",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { mount } from 'cypress/vue'\nimport VueRouter from 'vue-router'\n\ntype MountParams = Parameters<typeof mount>\ntype OptionsParam = MountParams[1] & { router?: VueRouter }\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Helper mount function for Vue Components\n       * @param component Vue Component or JSX Element to mount\n       * @param options Options passed to Vue Test Utils\n       */\n      mount(component: any, options?: OptionsParam): Chainable<any>\n    }\n  }\n}\n"))),(0,a.kt)(c,{value:"Spec Usage",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import VueRouter from 'vue-router'\nimport Navigation from './Navigation.vue'\nimport { routes } from '../router'\n\nit('home link should be active when url is \"/\"', () => {\n  // No need to pass in custom router as default url is '/'\n  cy.mount(Navigation)\n\n  cy.get('a').contains('Home').should('have.class', 'router-link-active')\n})\n\nit('login link should be active when url is \"/login\"', () => {\n  // Create a new router instance for each test\n  const router = new VueRouter({\n    mode: 'history',\n    routes,\n  })\n\n  // Change location to `/login`\n  router.push('/login')\n\n  // Pass the already initialized router for use\n  cy.mount(Navigation, { router })\n\n  cy.get('a').contains('Login').should('have.class', 'router-link-active')\n})\n")))),(0,a.kt)("h3",{id:"Vuex"},"Vuex"),(0,a.kt)("p",null,"To use a component that uses ",(0,a.kt)("a",{parentName:"p",href:"https://vuex.vuejs.org/"},"Vuex"),", create a ",(0,a.kt)("inlineCode",{parentName:"p"},"mount"),"\ncommand that configures a Vuex store for your component."),(0,a.kt)("h4",{id:"Vue-3-1"},"Vue 3"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cypress/support/component.js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { mount } from 'cypress/vue'\nimport { getStore } from '../../src/plugins/store'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.global = options.global || {}\n  options.global.stubs = options.global.stubs || {}\n  options.global.stubs['transition'] = false\n  options.global.components = options.global.components || {}\n  options.global.plugins = options.global.plugins || []\n\n  // Use store passed in from options, or initialize a new one\n  const { store = getStore(), ...mountOptions } = options\n\n  // Add Vuex plugin\n  options.global.plugins.push({\n    install(app) {\n      app.use(store)\n    },\n  })\n\n  return mount(component, mountOptions)\n})\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"getStore")," method is a factory method that initializes Vuex and creates a\nnew store. It is important that the store be initialized with each new test to\nensure changes to the store don't affect other tests."))),(0,a.kt)(c,{value:"Typings",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { mount } from 'cypress/vue'\nimport { Store } from 'vuex'\n\ntype MountParams = Parameters<typeof mount>\ntype OptionsParam = MountParams[1]\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Helper mount function for Vue Components\n       * @param component Vue Component or JSX Element to mount\n       * @param options Options passed to Vue Test Utils\n       */\n      mount(\n        component: any,\n        options?: OptionsParam & { store?: Store }\n      ): Chainable<any>\n    }\n  }\n}\n"))),(0,a.kt)(c,{value:"Spec Usage",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { getStore } from '@/plugins/store'\nimport UserProfile from './UserProfile.vue'\n\nit.only('User profile should display user name', () => {\n  const user = { name: 'test person' }\n\n  // getStore is a factory method that creates a new store\n  const store = getStore()\n\n  // mutate the store with user\n  store.commit('setUser', user)\n\n  cy.mount(UserProfile, {\n    store,\n  })\n\n  cy.get('div.name').should('have.text', user.name)\n})\n")))),(0,a.kt)("h4",{id:"Vue-2-1"},"Vue 2"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"cypress/support/component.js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { mount } from 'cypress/vue'\nimport Vuex from 'vuex'\nimport { getStore } from '../../src/plugins/store'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.extensions = options.extensions || {}\n  options.extensions.plugins = options.extensions.plugins || []\n\n  // Use store passed in from options, or initialize a new one\n  options.store = options.store || getStore()\n\n  // Add Vuex plugin\n  options.extensions.plugins.push(Vuex)\n\n  return mount(component, options)\n})\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"getStore")," method is a factory method that initializes Vuex and creates a\nnew store. It is important that the store be initialized with each new test to\nensure changes to the store don't affect other tests."))),(0,a.kt)(c,{value:"Typings",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { mount } from 'cypress/vue'\nimport { Store } from 'vuex'\n\ntype MountParams = Parameters<typeof mount>\ntype OptionsParam = MountParams[1]\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Helper mount function for Vue Components\n       * @param component Vue Component or JSX Element to mount\n       * @param options Options passed to Vue Test Utils\n       */\n      mount(\n        component: any,\n        options?: OptionsParam & { store?: Store }\n      ): Chainable<any>\n    }\n  }\n}\n"))),(0,a.kt)(c,{value:"Spec Usage",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { getStore } from '@/plugins/store'\nimport UserProfile from './UserProfile.vue'\n\nit.only('User profile should display user name', () => {\n  const user = { name: 'test person' }\n\n  // getStore is a factory method that creates a new store\n  const store = getStore()\n\n  // mutate the store with user\n  store.commit('setUser', user)\n\n  cy.mount(UserProfile, {\n    store,\n  })\n\n  cy.get('div.name').should('have.text', user.name)\n})\n")))),(0,a.kt)("h3",{id:"Global-Components"},"Global Components"),(0,a.kt)("p",null,"If you have components that are registered globally in the main application\nfile, set them up in your mount command so your component will render them\nproperly:"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(c,{value:"Vue 3",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { mount } from 'cypress/vue'\nimport Button from '../../src/components/Button.vue'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.global = options.global || {}\n  options.global.components = options.global.components || {}\n\n  // Register global components\n  options.global.components['Button'] = Button\n\n  return mount(component, options)\n})\n"))),(0,a.kt)(c,{value:"Vue 2",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { mount } from 'cypress/vue2'\nimport Button from '../../src/components/Button.vue'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Setup options object\n  options.extensions = options.extensions || {}\n  options.extensions.components = options.extensions.components || {}\n\n  // Register global components\n  options.extensions.components['Button'] = Button\n\n  return mount(component, options)\n})\n")))))}g.isMDXComponent=!0}}]);