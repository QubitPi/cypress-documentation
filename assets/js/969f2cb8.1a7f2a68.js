"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[7302],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},v=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(t),v=i,c=m["".concat(l,".").concat(v)]||m[v]||d[v]||r;return t?a.createElement(c,o(o({ref:n},u),{},{components:t})):a.createElement(c,o({ref:n},u))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=v;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}v.displayName="MDXCreateElement"},1744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const r={title:"Environment Variables"},o=void 0,s={unversionedId:"guides/guides/environment-variables",id:"guides/guides/environment-variables",title:"Environment Variables",description:"Difference between OS-level and Cypress environment variables",source:"@site/docs/guides/guides/environment-variables.mdx",sourceDirName:"guides/guides",slug:"/guides/guides/environment-variables",permalink:"/cypress-documentation/guides/guides/environment-variables",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/guides/environment-variables.mdx",tags:[],version:"current",lastUpdatedAt:1698909506,formattedLastUpdatedAt:"Nov 2, 2023",frontMatter:{title:"Environment Variables"},sidebar:"guides",previous:{title:"Debugging",permalink:"/cypress-documentation/guides/guides/debugging"},next:{title:"Launching Browsers",permalink:"/cypress-documentation/guides/guides/launching-browsers"}},l={},p=[{value:"Instead of hard coding this in your tests:",id:"Instead-of-hard-coding-this-in-your-tests",level:4},{value:"We can move this into a Cypress environment variable:",id:"We-can-move-this-into-a-Cypress-environment-variable",level:4},{value:"Setting",id:"Setting",level:2},{value:"Option #1: configuration file",id:"Option-1-configuration-file",level:3},{value:"Test file",id:"Test-file",level:4},{value:"Overview",id:"Overview",level:4},{value:"Option #2: <code>cypress.env.json</code>",id:"Option-2-cypressenvjson",level:3},{value:"From test file",id:"From-test-file",level:4},{value:"An Overview",id:"An-Overview",level:4},{value:"Option #3: <code>CYPRESS_*</code>",id:"Option-3-CYPRESS_",level:3},{value:"Overriding configuration options",id:"Overriding-configuration-options",level:4},{value:"Overriding environment variables",id:"Overriding-environment-variables",level:4},{value:"Overview:",id:"Overview-1",level:4},{value:"Option #4: <code>--env</code>",id:"Option-4---env",level:3},{value:"From the command line or CI",id:"From-the-command-line-or-CI",level:4},{value:"Test file:",id:"Test-file-1",level:4},{value:"Overview -",id:"Overview--",level:4},{value:"Option #5: Test Configuration",id:"Option-5-Test-Configuration",level:3},{value:"Suite of test configuration",id:"Suite-of-test-configuration",level:4},{value:"Single test configuration",id:"Single-test-configuration",level:4},{value:"Overview",id:"Overview-2",level:4},{value:"Overriding Configuration",id:"Overriding-Configuration",level:2},{value:"See also",id:"See-also",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},m=u("CypressConfigFileTabs"),d=u("E2EOrCtTabs"),v={toc:p};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("strong",null,"Difference between OS-level and Cypress environment variables"),(0,i.kt)("p",{parentName:"admonition"},'In Cypress, "environment variables" are variables that are accessible via\n',(0,i.kt)("inlineCode",{parentName:"p"},"Cypress.env"),". These are not the same as OS-level environment variables.\nHowever,\n",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/environment-variables#Option-3-CYPRESS_"},"it is possible to set Cypress environment variables from OS-level environment variables"),".")),(0,i.kt)("p",null,"Environment variables are useful when:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Values are different across developer machines."),(0,i.kt)("li",{parentName:"ul"},"Values are different across multiple environments: ",(0,i.kt)("em",{parentName:"li"},"(dev, staging, qa, prod)")),(0,i.kt)("li",{parentName:"ul"},"Values change frequently and are highly dynamic.")),(0,i.kt)("p",null,"Environment variables can be changed easily - especially when running in CI."),(0,i.kt)("h4",{id:"Instead-of-hard-coding-this-in-your-tests"},"Instead of hard coding this in your tests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.request('https://api.acme.corp') // this will break on other environments\n")),(0,i.kt)("h4",{id:"We-can-move-this-into-a-Cypress-environment-variable"},"We can move this into a Cypress environment variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.request(Cypress.env('EXTERNAL_API')) // points to a dynamic env var\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("strong",null,"Using 'baseUrl'"),(0,i.kt)("p",{parentName:"admonition"},"Environment variables are great at pointing to external services and servers, or\nstoring password or other credentials."),(0,i.kt)("p",{parentName:"admonition"},"However, you ",(0,i.kt)("strong",{parentName:"p"},"do not")," need to use environment variables to point to the origin\nand domain under test. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl")," instead of environment variables."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"/api/commands/visit"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.visit()"))," and ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/request"},(0,i.kt)("inlineCode",{parentName:"a"},"cy.request()")),"\nare automatically prefixed with this value - avoiding the need to specify them."),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl")," can be set in the Cypress configuration file - and then you can set an\nenvironment variable in your OS to override it like shown below."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"CYPRESS_BASE_URL=https://staging.app.com cypress run\n"))),(0,i.kt)("h2",{id:"Setting"},"Setting"),(0,i.kt)("p",null,"There are different ways to set environment variables. Each has a slightly\ndifferent use case."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"To summarize you can:"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#Option-1-configuration-file"},"Set in your configuration file")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#Option-2-cypressenvjson"},"Create a ",(0,i.kt)("inlineCode",{parentName:"a"},"cypress.env.json"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#Option-3-CYPRESS_"},"Export as ",(0,i.kt)("inlineCode",{parentName:"a"},"CYPRESS_*"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#Option-4---env"},"Pass in the CLI as ",(0,i.kt)("inlineCode",{parentName:"a"},"--env"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#Option-5-Test-Configuration"},"Set an environment variable within test configuration."))),(0,i.kt)("p",null,"Don't feel obligated to pick just one method. It is common to use one strategy\nfor local development but another when running in\n",(0,i.kt)("a",{parentName:"p",href:"/guides/continuous-integration/introduction"},"CI"),"."),(0,i.kt)("p",null,"When your tests are running, you can use the\n",(0,i.kt)("a",{parentName:"p",href:"/api/cypress-api/env"},(0,i.kt)("inlineCode",{parentName:"a"},"Cypress.env"))," function to access the values of your\nenvironment variables."),(0,i.kt)("h3",{id:"Option-1-configuration-file"},"Option #1: configuration file"),(0,i.kt)("p",null,"Any key/value you set in your\n",(0,i.kt)("a",{parentName:"p",href:"/guides/references/configuration"},"Cypress configuration")," under the ",(0,i.kt)("inlineCode",{parentName:"p"},"env")," key\nwill become an environment variable."),(0,i.kt)("cypress-config-example",null,(0,i.kt)(m,{mdxType:"CypressConfigFileTabs"},(0,i.kt)("pre",{parentName:"cypress-config-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  projectId: '128076ed-9868-4e98-9cef-98dd8b705d75',\n  env: {\n    login_url: '/login',\n    products_url: '/products',\n  },\n})\n")),(0,i.kt)("pre",{parentName:"cypress-config-example"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  projectId: '128076ed-9868-4e98-9cef-98dd8b705d75',\n  env: {\n    login_url: '/login',\n    products_url: '/products',\n  },\n})\n")))),(0,i.kt)("h4",{id:"Test-file"},"Test file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.env() // {login_url: '/login', products_url: '/products'}\nCypress.env('login_url') // '/login'\nCypress.env('products_url') // '/products'\n")),(0,i.kt)("h4",{id:"Overview"},"Overview"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("strong",null,"Benefits"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Great for values that need to be checked into source control and remain the\nsame on all machines."))),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("strong",null,"Downsides"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Only works for values that should be the same on across all machines."))),(0,i.kt)("h3",{id:"Option-2-cypressenvjson"},"Option #2: ",(0,i.kt)("inlineCode",{parentName:"h3"},"cypress.env.json")),(0,i.kt)("p",null,"You can create your own ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress.env.json")," file that Cypress will automatically\ncheck. Values in here will overwrite conflicting environment variables in your\n",(0,i.kt)("a",{parentName:"p",href:"/guides/references/configuration"},"Cypress configuration"),"."),(0,i.kt)("p",null,"This strategy is useful because if you add ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress.env.json")," to your\n",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," file, the values in here can be different for each developer\nmachine."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "host": "veronica.dev.local",\n  "api_server": "http://localhost:8888/api/v1/"\n}\n')),(0,i.kt)("h4",{id:"From-test-file"},"From test file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.env() // {host: 'veronica.dev.local', api_server: 'http://localhost:8888/api/v1'}\nCypress.env('host') // 'veronica.dev.local'\nCypress.env('api_server') // 'http://localhost:8888/api/v1/'\n")),(0,i.kt)("h4",{id:"An-Overview"},"An Overview"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("strong",null,"Benefits"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Dedicated file just for environment variables."),(0,i.kt)("li",{parentName:"ul"},"Enables you to generate this file from other build processes."),(0,i.kt)("li",{parentName:"ul"},"Values can be different on each machine (if not checked into source control)."),(0,i.kt)("li",{parentName:"ul"},"Supports nested fields (objects), e.g.\n",(0,i.kt)("inlineCode",{parentName:"li"},"{ testUser: { name: '...', email: '...' } }"),"."))),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("strong",null,"Downsides"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Another file you have to deal with."),(0,i.kt)("li",{parentName:"ul"},"Overkill for 1 or 2 environment variables."))),(0,i.kt)("h3",{id:"Option-3-CYPRESS_"},"Option #3: ",(0,i.kt)("inlineCode",{parentName:"h3"},"CYPRESS_*")),(0,i.kt)("p",null,"Any exported environment variables set on the command line or in your CI\nprovider that start with either ",(0,i.kt)("inlineCode",{parentName:"p"},"CYPRESS_")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress_")," will automatically be\nparsed by Cypress."),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"The environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"CYPRESS_INTERNAL_ENV")," is reserved and should not be\nset.")),(0,i.kt)("h4",{id:"Overriding-configuration-options"},"Overriding configuration options"),(0,i.kt)("p",null,"Environment variables that match a corresponding configuration option will\noverride any value set in the\n",(0,i.kt)("a",{parentName:"p",href:"/guides/references/configuration"},"Cypress configuration"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Cypress automatically normalizes both the key and the value. The leading\n",(0,i.kt)("inlineCode",{parentName:"p"},"CYPRESS_")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress_")," is removed and the remaining name is camelCased, while\nvalues are converted to ",(0,i.kt)("inlineCode",{parentName:"p"},"Number")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Boolean")," wherever possible.")),(0,i.kt)("p",null,"For example, these enviroment variables in the command line will override any\n",(0,i.kt)("inlineCode",{parentName:"p"},"viewportWidth")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"viewportHeight")," options set in the Cypress configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"export CYPRESS_VIEWPORT_WIDTH=800\nexport CYPRESS_VIEWPORT_HEIGHT=600\n")),(0,i.kt)("h4",{id:"Overriding-environment-variables"},"Overriding environment variables"),(0,i.kt)("p",null,"Environment variables that do not match configuration options will be set as\nenvironment variables for use in tests with\n",(0,i.kt)("a",{parentName:"p",href:"/api/cypress-api/env"},(0,i.kt)("inlineCode",{parentName:"a"},"Cypress.env()")),", and will override any existing values\nin the Cypress configuration ",(0,i.kt)("inlineCode",{parentName:"p"},"env")," object and ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress.env.json")," files."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Cypress automatically removes the leading ",(0,i.kt)("inlineCode",{parentName:"p"},"CYPRESS_")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"cypress_")," from any\nenvironment variable name specified in this way.")),(0,i.kt)("p",null,"For example, these environment variables in the command line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"export CYPRESS_HOST=laura.dev.local\nexport cypress_api_server=http://localhost:8888/api/v1/\n")),(0,i.kt)("p",null,"Will yield these results inside a test file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.env() // {HOST: 'laura.dev.local', api_server: 'http://localhost:8888/api/v1'}\nCypress.env('HOST') // 'laura.dev.local'\nCypress.env('api_server') // 'http://localhost:8888/api/v1/'\n")),(0,i.kt)("h4",{id:"Overview-1"},"Overview:"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("strong",null,"Benefits"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Quickly export some values."),(0,i.kt)("li",{parentName:"ul"},"Can be stored in your ",(0,i.kt)("inlineCode",{parentName:"li"},"bash_profile"),"."),(0,i.kt)("li",{parentName:"ul"},"Allows for dynamic values between different machines."),(0,i.kt)("li",{parentName:"ul"},"Especially useful for CI environments."))),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("strong",null,"Downsides"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Not as obvious where values come from versus the other options."),(0,i.kt)("li",{parentName:"ul"},"No support for nested fields."))),(0,i.kt)("h3",{id:"Option-4---env"},"Option #4: ",(0,i.kt)("inlineCode",{parentName:"h3"},"--env")),(0,i.kt)("p",null,"You can pass in environment variables as options when\n",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/command-line#cypress-run"},"using the CLI tool"),"."),(0,i.kt)("p",null,"Values here will overwrite all other conflicting environment variables."),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"--env")," argument for\n",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/command-line#cypress-run"},"cypress run"),"."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Multiple values must be separated by a comma, not a space. In some shells, like Windows PowerShell, you may need to surround the key/value pair with quotes: ",(0,i.kt)("inlineCode",{parentName:"p"},'--env "cyuser=dummyUser,cypassword=dummyPassword"'),".")),(0,i.kt)("h4",{id:"From-the-command-line-or-CI"},"From the command line or CI"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --env host=kevin.dev.local,api_server=http://localhost:8888/api/v1\n")),(0,i.kt)("h4",{id:"Test-file-1"},"Test file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.env() // {host: 'kevin.dev.local', api_server: 'http://localhost:8888/api/v1'}\nCypress.env('host') // 'kevin.dev.local'\nCypress.env('api_server') // 'http://localhost:8888/api/v1/'\n")),(0,i.kt)("h4",{id:"Overview--"},"Overview -"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("strong",null,"Benefits"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Does not require any changes to files or configuration."),(0,i.kt)("li",{parentName:"ul"},"More clear where environment variables come from."),(0,i.kt)("li",{parentName:"ul"},"Allows for dynamic values between different machines."),(0,i.kt)("li",{parentName:"ul"},"Overwrites all other forms of setting env variables."))),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("strong",null,"Downsides"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Pain to write the ",(0,i.kt)("inlineCode",{parentName:"li"},"--env")," options everywhere you use Cypress."),(0,i.kt)("li",{parentName:"ul"},"No support for nested fields."))),(0,i.kt)("h3",{id:"Option-5-Test-Configuration"},"Option #5: Test Configuration"),(0,i.kt)("p",null,"You can set environment variables for specific suites or tests by passing the\n",(0,i.kt)("inlineCode",{parentName:"p"},"env")," values to the\n",(0,i.kt)("a",{parentName:"p",href:"/guides/references/configuration#Test-Configuration"},"test configuration"),"."),(0,i.kt)("h4",{id:"Suite-of-test-configuration"},"Suite of test configuration"),(0,i.kt)("visit-mount-example",null,(0,i.kt)(d,{mdxType:"E2EOrCtTabs"},(0,i.kt)("pre",{parentName:"visit-mount-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// change environment variable for single suite of tests\ndescribe(\n  'test against Spanish content',\n  {\n    env: {\n      language: 'es',\n    },\n  },\n  () => {\n    it('displays Spanish', () => {\n      cy.visit(`https://docs.cypress.io/${Cypress.env('language')}/`)\n      cy.contains('\xbfPor qu\xe9 Cypress?')\n    })\n  }\n)\n")),(0,i.kt)("pre",{parentName:"visit-mount-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// change environment variable for single suite of tests\ndescribe(\n  'test against Spanish content',\n  {\n    env: {\n      language: 'es',\n    },\n  },\n  () => {\n    it('displays Spanish', () => {\n      cy.mount(<International lang={Cypress.env('language')} />)\n      cy.contains('\xbfPor qu\xe9 Cypress?')\n    })\n  }\n)\n")))),(0,i.kt)("h4",{id:"Single-test-configuration"},"Single test configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// change environment variable for single test\nit(\n  'smoke test develop api',\n  {\n    env: {\n      api: 'https://dev.myapi.com',\n    },\n  },\n  () => {\n    cy.request(Cypress.env('api')).its('status').should('eq', 200)\n  }\n)\n\n// change environment variable for single test\nit(\n  'smoke test staging api',\n  {\n    env: {\n      api: 'https://staging.myapi.com',\n    },\n  },\n  () => {\n    cy.request(Cypress.env('api')).its('status').should('eq', 200)\n  }\n)\n")),(0,i.kt)("h4",{id:"Overview-2"},"Overview"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("strong",null,"Benefits"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Only takes effect for duration of suite or test."),(0,i.kt)("li",{parentName:"ul"},"More clear where environment variables come from."),(0,i.kt)("li",{parentName:"ul"},"Allows for dynamic values between tests"))),(0,i.kt)("h2",{id:"Overriding-Configuration"},"Overriding Configuration"),(0,i.kt)("p",null,"If your environment variables match a standard configuration key, then instead\nof setting an ",(0,i.kt)("inlineCode",{parentName:"p"},"environment variable")," they will instead override the\nconfiguration value."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Change the ",(0,i.kt)("inlineCode",{parentName:"strong"},"baseUrl")," configuration value / not set env var in\n",(0,i.kt)("inlineCode",{parentName:"strong"},"Cypress.env()"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"export CYPRESS_BASE_URL=http://localhost:8080\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"'foo' does not match config / sets env var in ",(0,i.kt)("inlineCode",{parentName:"strong"},"Cypress.env()"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"export CYPRESS_FOO=bar\n")),(0,i.kt)("p",null,"You can\n",(0,i.kt)("a",{parentName:"p",href:"/guides/references/configuration"},"read more about how environment variables can change configuration here"),"."),(0,i.kt)("h2",{id:"See-also"},"See also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/cypress-api/env"},"Cypress.env()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/plugins/configuration-api"},"Configuration API")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/examples/recipes#Fundamentals"},"Environment Variables recipe")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/guides/references/configuration#Test-Configuration"},"Test Configuration")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/cypress-tips-and-tricks/#pass-the-environment-variables-correctly"},"Pass environment variables: tips and tricks")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/keep-passwords-secret-in-e2e-tests/"},"Keep passwords secret in E2E tests"))))}c.isMDXComponent=!0}}]);