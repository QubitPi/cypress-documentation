"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[2436],{809:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>l,contentTitle:()=>n,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var t=s(5893),o=s(1151);const a={sidebar_label:"Accessibility automation principles",title:"Accessibility automation principles | Cypress Accessibility Documentation",description:" Apply these core principles to maximize the impact of Cypress Accessibility's automation: complement automation with human judgment for deeper insights, manage false positives effectively, and ensure robust assistive technology support.",sidebar_position:80},n="Accessibility automation principles",r={id:"accessibility/guides/accessibility-automation",title:"Accessibility automation principles | Cypress Accessibility Documentation",description:" Apply these core principles to maximize the impact of Cypress Accessibility's automation: complement automation with human judgment for deeper insights, manage false positives effectively, and ensure robust assistive technology support.",source:"@site/docs/accessibility/guides/accessibility-automation.mdx",sourceDirName:"accessibility/guides",slug:"/accessibility/guides/accessibility-automation",permalink:"/accessibility/guides/accessibility-automation",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/accessibility/guides/accessibility-automation.mdx",tags:[],version:"current",lastUpdatedAt:1749265031,formattedLastUpdatedAt:"Jun 7, 2025",sidebarPosition:80,frontMatter:{sidebar_label:"Accessibility automation principles",title:"Accessibility automation principles | Cypress Accessibility Documentation",description:" Apply these core principles to maximize the impact of Cypress Accessibility's automation: complement automation with human judgment for deeper insights, manage false positives effectively, and ensure robust assistive technology support.",sidebar_position:80},sidebar:"accessibility",previous:{title:"Maximize coverage",permalink:"/accessibility/guides/maximize-coverage"},next:{title:"Overview",permalink:"/accessibility/configuration/overview"}},l={},c=[{value:"Levels of Accessibility",id:"Levels-of-Accessibility",level:2},{value:"False positives",id:"False-positives",level:2},{value:"Commonly mistaken as false positives",id:"Commonly-mistaken-as-false-positives",level:2},{value:"Summary",id:"Summary",level:2}];function u(e){const i={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.a)(),...e.components},{ProductHeading:s}=i;return s||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ProductHeading",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s,{product:"accessibility"}),"\n",(0,t.jsx)(i.h1,{id:"Accessibility-automation-principles",children:"Accessibility automation principles"}),"\n",(0,t.jsx)(i.p,{children:"This guide outlines foundational concepts for using Cypress Accessibility, which also apply to accessibility automation tools in general."}),"\n",(0,t.jsx)(i.h2,{id:"Levels-of-Accessibility",children:"Levels of Accessibility"}),"\n",(0,t.jsxs)(i.p,{children:["Cypress Accessibility runs Axe Core\xae checks on every significant state and variation of the applications you test with Cypress. This kind of automation can catch up to ",(0,t.jsx)(i.a,{href:"https://www.deque.com/blog/automated-testing-study-identifies-57-percent-of-digital-accessibility-issues/",children:"57% of issues that would appear in a manual audit"}),", but it does not replace the human judgment that is applied during an audit. Auditors test a wide variety of scenarios and technologies in a way that would be impossible to fully automate."]}),"\n",(0,t.jsx)(i.p,{children:"Accessibility can be thought of as three progressive levels:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Basic Usability"}),": This is the threshold at which a disabled user is likely to be able to make substantial progress through the application, but may still hit major barriers or usability issues. If your contact forms and issue reporting systems are accessible, you will be able to learn about these problems from actual users. Paying attention to issues reported by Cypress and Axe Core\xae should help you to this point."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"WCAG Conformance"}),': Automated tools like Axe Core\xae detect many significant accessibility barriers, but human assessment is essential for validating conformance with the Web Content Accessibility Guidelines (WCAG). This is often the standard set by legislation and regulation related to web accessibility. If your goal is regulatory compliance, this is the bar. No generic automation tool can "prove" compliance with this standard, it ',(0,t.jsx)(i.strong,{children:"requires"})," human assessment."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Good User Experience"}),": This needs to be validated by actual disabled users who are daily users of assistive technology. It's entirely possible to have a website that passes the first two levels, and still offers a poor user experience."]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["Accessibility is about communicating the nature and structure of the application, and the available actions and information, in a way that allows disabled users to independently understand the interface and complete all tasks. The ",(0,t.jsx)(i.a,{href:"https://www.24a11y.com/2019/pour-the-foundation-first/",children:"POUR principles"})," (Perceivable, Operable, Understandable, Robust) form the foundation for effective accessibility beyond specific tests or checks. While Axe Core\xae tells us about many genuine accessibility barriers, it's important to leverage that information into making good decisions about accessibility and providing a truly equal experience."]}),"\n",(0,t.jsx)(i.h2,{id:"False-positives",children:"False positives"}),"\n",(0,t.jsx)(i.p,{children:"Cypress Accessibility and Axe Core\xae attempt to minimize false positives, but they can still occur. Some example of false positives include:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Invalid States"}),": False positives may arise from testing a partially hydrated DOM or other states users would never encounter. You can report invalid states by using the 'Provide Feedback' button in the Cypress UI and we'll continuously improve the product to account for these scenarios."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Incorrect Violations"}),": Axe Core\xae may report violations due to bugs or limitations in its rules. Since Axe Core\xae is an open-source product, if and when we encounter bugs, we can open issues in the project and even make pull requests if needed."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"Commonly-mistaken-as-false-positives",children:"Commonly mistaken as false positives"}),"\n",(0,t.jsx)(i.p,{children:"Some issues that are not false positives, but may seem like them, include:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Loading States"}),': Legitimate user-facing loading states can present as potential false positives. They inform users about pending data and provide fallback functionality if data is slow to load. It\'s a good idea in front-end development to "make impossible states impossible", and in doing so you can follow the accessibility principle of Robustness.']}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"Assistive Technology Support"}),": Certain accessibility techniques are not fully supported by all assistive technologies like screen readers or voice control software. Axe Core\xae accounts for this. The software and operating systems tested against are listed in their ",(0,t.jsx)(i.a,{href:"https://github.com/dequelabs/axe-core/blob/develop/doc/accessibility-supported.md",children:"Accessibility Supported document"}),". For example: it can seem like a false positive from Axe Core\xae if a failing technique used in your code appears to work correctly in a certain screen reader, browser and operating system combination that you test with. But if it does not have sufficient accessibility support in commonly used technology configurations, Axe Core\xae will intentionally fail that technique, allowing you to switch to something with better support."]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"Summary",children:"Summary"}),"\n",(0,t.jsx)(i.p,{children:'Accessibility automation is a crucial part of an accessibility strategy in any fast-moving, modern codebase. When multiple code changes are merged on a daily or weekly basis, there is no possibility to run manual checks on every state and variation of the application prior to merge. Understanding some of the details of an "always on" set of accessibility checks in your test pipeline, where a lot of states are automatically detected, will help you develop a feel for how Cypress Accessibility behaves and what kinds of things it is best at finding, as well as what might be left over for other forms of testing.'})]})}function d(e={}){const{wrapper:i}={...(0,o.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},1151:(e,i,s)=>{s.d(i,{Z:()=>r,a:()=>n});var t=s(7294);const o={},a=t.createContext(o);function n(e){const i=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),t.createElement(a.Provider,{value:i},e.children)}}}]);