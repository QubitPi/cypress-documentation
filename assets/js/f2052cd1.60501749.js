"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[4337],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),d=i,m=c["".concat(l,".").concat(d)]||c[d]||g[d]||a;return t?o.createElement(m,r(r({ref:n},u),{},{components:t})):o.createElement(m,r({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<a;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1690:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=t(7462),i=(t(7294),t(3905));const a={title:"Configuration API"},r=void 0,s={unversionedId:"api/plugins/configuration-api",id:"api/plugins/configuration-api",title:"Configuration API",description:"Cypress enables you to dynamically modify configuration values and environment",source:"@site/docs/api/plugins/configuration-api.mdx",sourceDirName:"api/plugins",slug:"/api/plugins/configuration-api",permalink:"/cypress-documentation/api/plugins/configuration-api",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/plugins/configuration-api.mdx",tags:[],version:"current",lastUpdatedAt:1698215491,formattedLastUpdatedAt:"Oct 25, 2023",frontMatter:{title:"Configuration API"},sidebar:"api",previous:{title:"Browser Launch API",permalink:"/cypress-documentation/api/plugins/browser-launch-api"},next:{title:"Preprocessors API",permalink:"/cypress-documentation/api/plugins/preprocessors-api"}},l={},p=[{value:"Usage",id:"Usage",level:2},{value:"Promises",id:"Promises",level:3},{value:"Examples",id:"Examples",level:2},{value:"Customize available browsers",id:"Customize-available-browsers",level:3},{value:"Switch between multiple configuration files",id:"Switch-between-multiple-configuration-files",level:3},{value:"Test Type-Specific Plugins",id:"Test-Type-Specific-Plugins",level:3},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}],u=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)},c=u("WarningSetupNodeEvents"),g=u("CypressConfigFileTabs"),d=u("DocsImage"),m=u("WarningPluginsFile"),f={toc:p};function h(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Cypress enables you to dynamically modify configuration values and environment\nvariables from your Cypress configuration."),(0,i.kt)("h2",{id:"Usage"},"Usage"),(0,i.kt)(c,{mdxType:"WarningSetupNodeEvents"}),(0,i.kt)("p",null,"To modify configuration, you return a config object from ",(0,i.kt)("inlineCode",{parentName:"p"},"setupNodeEvents"),"\nwithin this exported function."),(0,i.kt)("cypress-config-plugin-example",null,(0,i.kt)(g,{mdxType:"CypressConfigFileTabs"},(0,i.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      console.log(config) // see everything in here!\n\n      // modify config values\n      config.defaultCommandTimeout = 10000\n      config.baseUrl = 'https://staging.acme.com'\n\n      // modify env var value\n      config.env.ENVIRONMENT = 'staging'\n\n      // IMPORTANT return the updated config object\n      return config\n    },\n  },\n})\n")),(0,i.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      console.log(config) // see everything in here!\n\n      // modify config values\n      config.defaultCommandTimeout = 10000\n      config.baseUrl = 'https://staging.acme.com'\n\n      // modify env var value\n      config.env.ENVIRONMENT = 'staging'\n\n      // IMPORTANT return the updated config object\n      return config\n    },\n  },\n})\n")))),(0,i.kt)("p",null,"Whenever you return an object from your ",(0,i.kt)("inlineCode",{parentName:"p"},"setupNodeEvents"),' function, Cypress will\ntake this and "diff" it against the original configuration and automatically set\nthe resolved values to point to what you returned.'),(0,i.kt)("p",null,"If you don't return an object, then configuration will not be modified."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," object also includes the following extra values that are not part\nof the standard configuration. ",(0,i.kt)("strong",{parentName:"p"},"These values are read only and cannot be\nmodified from the ",(0,i.kt)("inlineCode",{parentName:"strong"},"setupNodeEvents")," function in the Cypress configuration.")),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"configFile"),": The absolute path to the Cypress configuration file. See the\n",(0,i.kt)("a",{parentName:"li",href:"/guides/guides/command-line#cypress-open"},"--config-file")," and\n",(0,i.kt)("a",{parentName:"li",href:"/guides/guides/module-api"},"configFile")," docs for more information on this\nvalue."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"projectRoot"),": The absolute path to the root of the project (e.g.\n",(0,i.kt)("inlineCode",{parentName:"li"},"/Users/me/dev/my-project"),")"))),(0,i.kt)("p",null,'Resolved values will show up in the "Settings" tab.'),(0,i.kt)(d,{src:"/img/guides/configuration/plugin-configuration.png",alt:"Resolved configuration in the Desktop app",mdxType:"DocsImage"}),(0,i.kt)("h3",{id:"Promises"},"Promises"),(0,i.kt)("p",null,"Additionally, Cypress will respect and await promises you return. This enables\nyou to perform asynchronous tasks and eventually resolve with the modified\nconfiguration object. See the\n",(0,i.kt)("a",{parentName:"p",href:"#Switch-between-multiple-configuration-files"},"example on switching between multiple configuration files"),"\nfor a full example."),(0,i.kt)("h2",{id:"Examples"},"Examples"),(0,i.kt)("h3",{id:"Customize-available-browsers"},"Customize available browsers"),(0,i.kt)("p",null,"The configuration includes the list of browsers found on your system that are\navailable to Cypress. You can, for example, change or augment that list for\ndifferent testing purposes."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Read our full guide on ",(0,i.kt)("a",{parentName:"p",href:"/guides/guides/launching-browsers"},"Launching Browsers"),"\nfor more information on how this works.")),(0,i.kt)("h3",{id:"Switch-between-multiple-configuration-files"},"Switch between multiple configuration files"),(0,i.kt)(m,{mdxType:"WarningPluginsFile"}),(0,i.kt)("p",null,"This means you can do things like store multiple configuration files and switch\nbetween them like:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cypress.qa.json")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cypress.dev.json")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cypress.prod.json"))),(0,i.kt)("p",null,"How you choose to organize your configuration and environment variables is up to\nyou."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// promisified fs module\nconst fs = require('fs-extra')\nconst path = require('path')\n\nfunction getConfigurationByFile(file) {\n  const pathToConfigFile = path.resolve('..', 'config', `${file}.json`)\n\n  return fs.readJson(pathToConfigFile)\n}\n\n// plugins file\nmodule.exports = (on, config) => {\n  // accept a configFile value or use development by default\n  const file = config.env.configFile || 'development'\n\n  return getConfigurationByFile(file)\n}\n")),(0,i.kt)("p",null,"You could now swap out configuration + environment variables like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --env configFile=qa\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --env configFile=staging\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cypress run --env configFile=production\n")),(0,i.kt)("p",null,"Each of these environments would read in the configuration at these files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"cypress/config/development.json\ncypress/config/qa.json\ncypress/config/staging.json\ncypress/config/production.json\n")),(0,i.kt)("p",null,"This would enable you to do things like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// cypress/config/development.json\n\n{\n  "baseUrl": "http://localhost:1234",\n  "env": {\n    "something": "development"\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// cypress/config/qa.json\n\n{\n  "baseUrl": "https://qa.acme.com",\n  "env": {\n    "something": "qa"\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// cypress/config/staging.json\n\n{\n  "baseUrl": "https://staging.acme.com",\n  "env": {\n    "something": "staging"\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// cypress/config/production.json\n\n{\n  "baseUrl": "https://production.acme.com",\n  "env": {\n    "something": "production"\n  }\n}\n')),(0,i.kt)("p",null,"This is a less complicated example. Remember - you have the full power of Node\nat your disposal."),(0,i.kt)("p",null,"How you choose to edit the configuration is up to you. You don't have to read\noff of the file system - you could store them all in memory inside of\n",(0,i.kt)("a",{parentName:"p",href:"/guides/tooling/plugins-guide#Using-a-plugin"},"setupNodeEvents")," if you wanted."),(0,i.kt)("h3",{id:"Test-Type-Specific-Plugins"},"Test Type-Specific Plugins"),(0,i.kt)("p",null,"You can access the type of tests running via the ",(0,i.kt)("inlineCode",{parentName:"p"},"config.testingType")," property.\nThe testing type is either ",(0,i.kt)("inlineCode",{parentName:"p"},"e2e")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"component")," depending on if the\n",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/testing-types#What-is-E2E-Testing"},"E2E Testing")," or\n",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/testing-types#What-is-Component-Testing"},"Component Testing"),"\ntype was selected in the Cypress Launchpad. This allows you to configure test\ntype-specific plugins."),(0,i.kt)("h2",{id:"History"},"History"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Version"),(0,i.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog"},"7.0.0")),(0,i.kt)("td",{parentName:"tr",align:null},"Added ",(0,i.kt)("inlineCode",{parentName:"td"},"testingType")," property to ",(0,i.kt)("inlineCode",{parentName:"td"},"config"),".")))),(0,i.kt)("h2",{id:"See-also"},"See also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/testing-workshop-cypress#intermediate"},"Configuration"),"\nsection of the Cypress Testing Workshop"),(0,i.kt)("li",{parentName:"ul"},"blog post\n",(0,i.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/keep-passwords-secret-in-e2e-tests/"},"Keep passwords secret in E2E tests"))))}h.isMDXComponent=!0}}]);