"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[2323],{5322:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=s(5893),n=s(1151);const r={sidebar_label:"Identify coverage gaps",title:"Identify coverage gaps | Cypress UI Coverage Documentation",description:"Learn how to identify coverage gaps with Cypress UI Coverage to ensure quality of your application.",sidebar_position:10},o="Identify coverage gaps",a={id:"ui-coverage/guides/identify-coverage-gaps",title:"Identify coverage gaps | Cypress UI Coverage Documentation",description:"Learn how to identify coverage gaps with Cypress UI Coverage to ensure quality of your application.",source:"@site/docs/ui-coverage/guides/identify-coverage-gaps.mdx",sourceDirName:"ui-coverage/guides",slug:"/ui-coverage/guides/identify-coverage-gaps",permalink:"/ui-coverage/guides/identify-coverage-gaps",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/ui-coverage/guides/identify-coverage-gaps.mdx",tags:[],version:"current",lastUpdatedAt:1754586914,formattedLastUpdatedAt:"Aug 7, 2025",sidebarPosition:10,frontMatter:{sidebar_label:"Identify coverage gaps",title:"Identify coverage gaps | Cypress UI Coverage Documentation",description:"Learn how to identify coverage gaps with Cypress UI Coverage to ensure quality of your application.",sidebar_position:10},sidebar:"ui-coverage",previous:{title:"Views",permalink:"/ui-coverage/core-concepts/views"},next:{title:"Address coverage gaps",permalink:"/ui-coverage/guides/address-coverage-gaps"}},l={},d=[{value:"Run Tests",id:"Run-Tests",level:2},{value:"Example: Automated Sitemap-Based Testing",id:"Example-Automated-Sitemap-Based-Testing",level:3},{value:"Review Coverage Reports",id:"Review-Coverage-Reports",level:2},{value:"Overall Score",id:"Overall-Score",level:3},{value:"Views",id:"Views",level:3},{value:"View Drilldown",id:"View-Drilldown",level:4},{value:"Untested links",id:"Untested-links",level:3},{value:"Referrer Drilldown",id:"Referrer-Drilldown",level:4},{value:"Untested elements",id:"Untested-elements",level:3},{value:"View Drilldown",id:"View-Drilldown-1",level:4},{value:"Configure UI Coverage",id:"Configure-UI-Coverage",level:2},{value:"Next Steps",id:"Next-Steps",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.a)(),...e.components},{DocsImage:s,ProductHeading:r}=t;return s||g("DocsImage",!0),r||g("ProductHeading",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r,{product:"ui-coverage"}),"\n",(0,i.jsx)(t.h1,{id:"Identify-coverage-gaps",children:"Identify coverage gaps"}),"\n",(0,i.jsx)(t.p,{children:"Understanding your application's test coverage is crucial for ensuring quality and reliability. Cypress's UI Coverage tool provides insights into which parts of your application are tested and highlights untested areas. This guide will help you get started with UI Coverage to identify and address coverage gaps effectively."}),"\n",(0,i.jsx)(t.h2,{id:"Run-Tests",children:"Run Tests"}),"\n",(0,i.jsxs)(t.p,{children:["To identify coverage gaps, you need to first run and record Cypress tests to the Cloud. If you're new to Cypress, refer to the ",(0,i.jsx)(t.a,{href:"/app/end-to-end-testing/writing-your-first-end-to-end-test",children:"Cypress documentation"})," to get started with writing tests."]}),"\n",(0,i.jsx)(t.h3,{id:"Example-Automated-Sitemap-Based-Testing",children:"Example: Automated Sitemap-Based Testing"}),"\n",(0,i.jsx)(t.p,{children:"If your project lacks existing Cypress tests, a common approach is to understand test coverage from a sitemap or an array of target URLs. These URLs can be used to perform light interactions and capture the initial gaps in testing. Below is an example of how to automate this process by using a sitemap:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"describe('UI Coverage Scan', () => {\n  it('Checks ui coverage with the sitemap.xml', () => {\n    cy.request('https://<YOUR_WEBSITE>/sitemap.xml').then((response) => {\n      const xmlString = response.body\n      const parser = new DOMParser()\n        (loc) => loc.textContent\n    })\n    Cypress._.each(URLs, (URL) => {\n      cy.visit(URL)\n    })\n  })\n})\n"})}),"\n",(0,i.jsx)(t.h2,{id:"Review-Coverage-Reports",children:"Review Coverage Reports"}),"\n",(0,i.jsxs)(t.p,{children:["Once your tests have recorded to Cypress Cloud, you can analyze the coverage reports to identify gaps. Click on the runs in your project in ",(0,i.jsx)(t.a,{href:"https://on.cypress.io/cloud",children:"Cypress Cloud"})," to access the UI Coverage reports. This report provides a visual representation of your application's test coverage, highlighting tested and untested elements."]}),"\n",(0,i.jsx)(t.h3,{id:"Overall-Score",children:"Overall Score"}),"\n",(0,i.jsxs)(t.p,{children:["The first metric to review is the ",(0,i.jsx)(t.strong,{children:"overall coverage score"}),". This score is calculated by comparing the number of tested elements to the total number of ",(0,i.jsx)(t.a,{href:"/ui-coverage/core-concepts/interactivity",children:"interactive elements"})," in your application. A higher score indicates better coverage, while a lower score indicates areas that need additional testing. The score will display on the runs page and within individual runs."]}),"\n",(0,i.jsx)(s,{src:"/img/ui-coverage/guides/cypress-ui-coverage-runs-list-with-uicov-score.png",alt:"Cypress Cloud screenshot cropping to show a list of 4 runs with the details of the run like git commit, committer, branch, and the UI Coverage score of 11%"}),"\n",(0,i.jsx)(t.h3,{id:"Views",children:"Views"}),"\n",(0,i.jsxs)(t.p,{children:["Within a run's ",(0,i.jsx)(t.strong,{children:"UI Coverage"})," tab, you'll find a ",(0,i.jsx)(t.strong,{children:"Views"})," section. Views represent different pages or components of your application. Each view in the list displays the URL or component path, the number of snapshots, the number of untested and tested elements in that view, and the coverage score."]}),"\n",(0,i.jsx)(s,{src:"/img/ui-coverage/guides/cypress-ui-coverage-list-of-views.png",alt:"Cypress Cloud screenshot cropping to show a list of views within the UI Coverage tab including a lefthand navigation, a list of views and a filter"}),"\n",(0,i.jsx)(t.h4,{id:"View-Drilldown",children:"View Drilldown"}),"\n",(0,i.jsx)(t.p,{children:"Clicking into a view shows a detailed breakdown of the tested and untested elements within that view. You can use this information to inspect the DOM snapshot of the element using your browser's developer tools and understand the context of any coverage gaps. The view includes:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Untested Elements"}),": A list of interactive elements that were not interacted with during the test run."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Tested Elements"}),": A list of interactive elements that were interacted with during the test run."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"DOM Snapshot"}),": A full-page, inspectable DOM snapshot of the view as it appeared during the test run. Tested elements highlight as green, while untested elements highlight as red."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Snapshot Navigation"}),": Navigate between snapshots to see the state of the view at different points during the test run."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Snapshot Coverage Score"}),": The coverage score for the specific snapshot based on the number of tested elements."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Test Replay"}),": A link to the Test Replay for the specific snapshot."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"URL"})," and ",(0,i.jsx)(t.strong,{children:"Viewport size"}),": Metadata for the view."]}),"\n"]}),"\n",(0,i.jsx)(s,{src:"/img/ui-coverage/guides/cypress-ui-coverage-view-drilldown.png",alt:"Cypress Cloud screenshot cropping a single view within the cypress-documentation project showing the view's URL, the list of tested and untested elements and a DOM snapshot of the view"}),"\n",(0,i.jsx)(t.h3,{id:"Untested-links",children:"Untested links"}),"\n",(0,i.jsxs)(t.p,{children:["In the ",(0,i.jsx)(t.strong,{children:"UI Coverage"})," tab, the ",(0,i.jsx)(t.strong,{children:"Untested links"})," section lists all the links not interacted with during the test run. This can help you identify pages of your application that are not being visited and tested. Use this to identify unvisited pages and prioritize testing."]}),"\n",(0,i.jsx)(s,{src:"/img/ui-coverage/guides/cypress-ui-coverage-untested-links.png",alt:"Cypress Cloud screenshot cropping the untested links section with a list of links that were not interacted with during the test run"}),"\n",(0,i.jsx)(t.h4,{id:"Referrer-Drilldown",children:"Referrer Drilldown"}),"\n",(0,i.jsx)(t.p,{children:"Clicking a referrer link redirects you to the referrer's view, where the untested link is highlighted in red."}),"\n",(0,i.jsx)(s,{src:"/img/ui-coverage/guides/cypress-ui-coverage-untested-link-view.png",alt:"Cypress Cloud screenshot showing a view with the untested link highlighted in red"}),"\n",(0,i.jsx)(t.h3,{id:"Untested-elements",children:"Untested elements"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.strong,{children:"Untested Elements"})," section in the ",(0,i.jsx)(t.strong,{children:"UI Coverage"})," tab lists all interactive elements not interacted with during the test run. This can help you identify specific elements that are not being tested across views. Use this information to prioritize testing for these elements."]}),"\n",(0,i.jsx)(s,{src:"/img/ui-coverage/guides/cypress-ui-coverage-untested-elements-expanded.png",alt:"Cypress Cloud screenshot cropping the untested elements section with a list of elements that were not interacted with during the test run"}),"\n",(0,i.jsx)(t.h4,{id:"View-Drilldown-1",children:"View Drilldown"}),"\n",(0,i.jsx)(t.p,{children:"Clicking into an untested element's view shows a detailed breakdown of the element, including the element's selector, the number of times the element was interacted with, and the views without interactions. You can use this information to inspect the DOM snapshot of the element using your browser's developer tools and understand the context of any coverage gaps."}),"\n",(0,i.jsx)(s,{src:"/img/ui-coverage/guides/cypress-ui-coverage-untested-elements-view-drilldown.png",alt:"Cypress Cloud screenshot cropping a single untested element showing the element's selector, the number of times the element was interacted with, the views without interactions, and a full DOM snapshot of the view"}),"\n",(0,i.jsx)(t.h2,{id:"Configure-UI-Coverage",children:"Configure UI Coverage"}),"\n",(0,i.jsxs)(t.p,{children:["While UI Coverage is designed to work seamlessly out of the box, there are instances where custom configuration may be necessary to address unique application structures, testing requirements, or edge cases. Refer to the ",(0,i.jsx)(t.a,{href:"/ui-coverage/configuration/overview",children:"Configuration Guide"})," to learn how to customize UI Coverage to address these common needs:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Filtering"}),": Exclude specific elements or views from coverage reports.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/ui-coverage/configuration/elementfilters",children:"Element Filters"}),": Exclude specific elements from coverage reports."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/ui-coverage/configuration/viewfilters",children:"View Filters"}),": Exclude specific views from coverage reports."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Grouping"}),": Group similar elements together for easier analysis.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/ui-coverage/configuration/elements",children:"Elements"}),": Specify selectors to uniquely identify elements, even when they lack stable identifiers across snapshots."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/ui-coverage/configuration/elementgroups",children:"Element Grouping"}),": Group similar elements together for easier analysis."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/ui-coverage/configuration/views",children:"Views"}),": Group views together based on defined URL patterns."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Defining Attribute Patterns"}),": Define patterns for identifying and grouping elements by attributes.","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/ui-coverage/configuration/attributefilters",children:"Attribute Filters"}),": Specify patterns for attributes and their values that should not be used for identifying and grouping elements."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/ui-coverage/configuration/significantattributes",children:"Significant Attributes"}),": Define selectors to prioritize above the default attributes Cypress uses for the purpose of identification and grouping."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"Next-Steps",children:"Next Steps"}),"\n",(0,i.jsxs)(t.p,{children:["By leveraging these tools and techniques, you can effectively identify test coverage gaps. Next, read our guide on ",(0,i.jsx)(t.a,{href:"/ui-coverage/guides/address-coverage-gaps",children:"addressing coverage gaps"})," to ensure a robust and reliable application."]})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}function g(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>o});var i=s(7294);const n={},r=i.createContext(n);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);