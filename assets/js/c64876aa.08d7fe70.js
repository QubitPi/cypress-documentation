"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[5866],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),l=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=l(t),d=a,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return t?o.createElement(g,p(p({ref:n},u),{},{components:t})):o.createElement(g,p({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,p=new Array(r);p[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[c]="string"==typeof e?e:a,p[1]=i;for(var l=2;l<r;l++)p[l]=t[l];return o.createElement.apply(null,p)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2610:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const r={title:"Angular Examples",sidebar_position:30},p=void 0,i={unversionedId:"guides/component-testing/angular/examples",id:"guides/component-testing/angular/examples",title:"Angular Examples",description:"Mounting Components",source:"@site/docs/guides/component-testing/angular/examples.mdx",sourceDirName:"guides/component-testing/angular",slug:"/guides/component-testing/angular/examples",permalink:"/cypress-documentation/guides/component-testing/angular/examples",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/component-testing/angular/examples.mdx",tags:[],version:"current",lastUpdatedAt:1698216540,formattedLastUpdatedAt:"Oct 25, 2023",sidebarPosition:30,frontMatter:{title:"Angular Examples",sidebar_position:30},sidebar:"guides",previous:{title:"Angular Overview",permalink:"/cypress-documentation/guides/component-testing/angular/overview"},next:{title:"Angular API",permalink:"/cypress-documentation/guides/component-testing/angular/api"}},s={},l=[{value:"Mounting Components",id:"Mounting-Components",level:2},{value:"Using <code>cy.mount()</code>",id:"Using-cymount",level:3},{value:"Passing Data to a Component",id:"Passing-Data-to-a-Component",level:3},{value:"Testing Event Handlers",id:"Testing-Event-Handlers",level:3},{value:"Imports/Declarations/Providers",id:"ImportsDeclarationsProviders",level:3},{value:"Using Standalone",id:"Using-Standalone",level:3},{value:"Using Angular Template Syntax",id:"Using-Angular-Template-Syntax",level:3},{value:"Accessing the Component Instance",id:"Accessing-the-Component-Instance",level:3},{value:"Using createOutputSpy()",id:"Using-createOutputSpy",level:3},{value:"Using autoSpyOutputs",id:"Using-autoSpyOutputs",level:3},{value:"Custom Mount Commands",id:"Custom-Mount-Commands",level:2},{value:"Customizing <code>cy.mount()</code>",id:"Customizing-cymount",level:3},{value:"Default Declarations, Providers, or Imports",id:"Default-Declarations-Providers-or-Imports",level:3},{value:"autoSpyOutputs",id:"autoSpyOutputs",level:3}],u={toc:l};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"Mounting-Components"},"Mounting Components"),(0,a.kt)("h3",{id:"Using-cymount"},"Using ",(0,a.kt)("inlineCode",{parentName:"h3"},"cy.mount()")),(0,a.kt)("p",null,"To mount a component with ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()"),", import the component and pass it to the\nmethod:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { StepperComponent } from './stepper.component'\n\nit('mounts', () => {\n  cy.mount(StepperComponent)\n})\n")),(0,a.kt)("h3",{id:"Passing-Data-to-a-Component"},"Passing Data to a Component"),(0,a.kt)("p",null,"You can pass inputs and outputs to a component by setting\n",(0,a.kt)("a",{parentName:"p",href:"/guides/component-testing/angular/api#ComponentProperties"},"componentProperties"),"\nin the options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"cy.mount(StepperComponent, {\n  componentProperties: {\n    count: 100,\n    change: new EventEmitter(),\n  },\n})\n")),(0,a.kt)("h3",{id:"Testing-Event-Handlers"},"Testing Event Handlers"),(0,a.kt)("p",null,"Pass a Cypress ",(0,a.kt)("a",{parentName:"p",href:"/guides/guides/stubs-spies-and-clocks#Spies"},"spy")," to an event\nprop and validate it was called:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('clicking + fires a change event with the incremented value', () => {\n  cy.mount(StepperComponent, {\n    componentProperties: {\n      change: createOutputSpy('changeSpy'),\n    },\n  })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@changeSpy').should('have.been.calledWith', 1)\n})\n")),(0,a.kt)("h3",{id:"ImportsDeclarationsProviders"},"Imports/Declarations/Providers"),(0,a.kt)("p",null,"If you need to set up any additional ",(0,a.kt)("inlineCode",{parentName:"p"},"imports"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"declarations"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"providers"),"\nfor your component to mount successfully, you can set them in the options\n(similar to setting them up in ",(0,a.kt)("inlineCode",{parentName:"p"},"ngModule")," in a app):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"cy.mount(ComponentThatFetchesData, {\n  imports: [HttpClientModule],\n  declarations: [ButtonComponent],\n  providers: [DataService],\n})\n")),(0,a.kt)("p",null,"See\n",(0,a.kt)("a",{parentName:"p",href:"/guides/component-testing/angular/examples#Default-Declarations-Providers-or-Imports"},"Default Declarations, Providers, or Imports"),"\nto set up common options in a custom ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()")," command to avoid having to\nrepeat this boilerplate for each test."),(0,a.kt)("h3",{id:"Using-Standalone"},"Using Standalone"),(0,a.kt)("p",null,"Not only are ",(0,a.kt)("a",{parentName:"p",href:"https://angular.io/guide/standalone-components"},"Standalone Components")," supported, they are the simplest components to write tests for.\nStandalone Components provide the Angular compiler with everything it needs to compile through its ",(0,a.kt)("a",{parentName:"p",href:"https://angular.io/api/core/Component"},(0,a.kt)("inlineCode",{parentName:"a"},"@Component()"))," decorator.\nThis means that in most cases a Standalone Component can be mounted without ever providing any ",(0,a.kt)("inlineCode",{parentName:"p"},"imports"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"decorators"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"providers"),". Mounting then becomes as simple as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"cy.mount(MyStandaloneComponent)\n")),(0,a.kt)("h3",{id:"Using-Angular-Template-Syntax"},"Using Angular Template Syntax"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()")," method also supports the Angular template syntax when mounting\na component. Some developers might prefer this approach to the object based\nmount style:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'cy.mount(`<app-stepper [count]="100"></app-stepper>`, {\n  declarations: [StepperComponent],\n})\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"When using template syntax, the component needs to added to the declarations\nin the options parameter.")),(0,a.kt)("p",null,"Using with event emitter spy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"cy.mount('<app-button (click)=\"onClick.emit($event)\">Click me</app-button>', {\n  declarations: [ButtonComponent]\n  componentProperties: {\n    onClick: createOutputSpy('onClickSpy'),\n  },\n})\ncy.get('button').click();\ncy.get('@onClickSpy').should('have.been.called');\n")),(0,a.kt)("h3",{id:"Accessing-the-Component-Instance"},"Accessing the Component Instance"),(0,a.kt)("p",null,"There might be times when you might want to access the component instance\ndirectly in your tests. To do so, use ",(0,a.kt)("inlineCode",{parentName:"p"},".then()"),", which enables us to work with\nthe subject that was yielded from the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()")," command. In this case, mount\nyields an object that contains the rendered component and the fixture."),(0,a.kt)("p",null,"In the below example, we use the component to spy directly on the ",(0,a.kt)("inlineCode",{parentName:"p"},"change")," event\nemitter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('clicking + fires a change event with the incremented value', () => {\n  cy.mount(\n    '<app-stepper count=\"100\" (change)=\"change.emit($event)\"></app-stepper>',\n    {\n      componentProperties: { change: new EventEmitter() },\n      declarations: [StepperComponent],\n    }\n  ).then((wrapper) => {\n    console.log({ wrapper })\n    cy.spy(wrapper.component.change, 'emit').as('changeSpy')\n    return cy.wrap(wrapper).as('angular')\n  })\n  cy.get(incrementSelector).click()\n  cy.get('@changeSpy').should('have.been.calledWith', 101)\n})\n")),(0,a.kt)("h3",{id:"Using-createOutputSpy"},"Using createOutputSpy()"),(0,a.kt)("p",null,"To make spying on event emitters easier, there is a utility function called\n",(0,a.kt)("inlineCode",{parentName:"p"},"createOutputSpy()")," which can be used to automatically create an ",(0,a.kt)("inlineCode",{parentName:"p"},"EventEmitter"),"\nand setup the spy on it's ",(0,a.kt)("inlineCode",{parentName:"p"},".emit()")," method. It can be used like the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createOutputSpy } from 'cypress/angular'\n\nit('clicking + fires a change event with the incremented value', () => {\n  // Arrange\n  cy.mount('<app-stepper (change)=\"change.emit($event)\"></app-stepper>', {\n    declarations: [StepperComponent],\n    componentProperties: {\n      change: createOutputSpy<boolean>('changeSpy'),\n    },\n  })\n  cy.get(incrementSelector).click()\n  cy.get('@changeSpy').should('have.been.called')\n})\n")),(0,a.kt)("h3",{id:"Using-autoSpyOutputs"},"Using autoSpyOutputs"),(0,a.kt)("p",null,"You might find yourself repeatedly creating a ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.spy()")," for each of your\ncomponent outputs. Because of this, we created an easy mechanism to handle this\nfor you. This feature can be turned on by passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSpyOutputs")," flag into\n",(0,a.kt)("inlineCode",{parentName:"p"},"MountConfig"),". After the component has been mounted you can then access each of\nthe generated spies using the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Output()")," property name + ",(0,a.kt)("inlineCode",{parentName:"p"},"Spy"),". So our ",(0,a.kt)("inlineCode",{parentName:"p"},"change"),"\nproperty can be accessed via its alias of ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.get('@changeSpy')")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('clicking + fires a change event with the incremented value', () => {\n  cy.mount(StepperComponent, {\n    autoSpyOutputs: true,\n    componentProperties: {\n      count: 100,\n    },\n  })\n  cy.get(incrementSelector).click()\n  cy.get('@changeSpy').should('have.been.calledWith', 101)\n})\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSpyOutput")," flag only works when passing in a component to the mount\nfunction. It currently does not work with the template syntax.")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"autoSpyOutput")," is an ",(0,a.kt)("strong",{parentName:"p"},"experimental feature")," and could be removed or changed\nin the future")),(0,a.kt)("h2",{id:"Custom-Mount-Commands"},"Custom Mount Commands"),(0,a.kt)("h3",{id:"Customizing-cymount"},"Customizing ",(0,a.kt)("inlineCode",{parentName:"h3"},"cy.mount()")),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()")," is a simple passthrough to ",(0,a.kt)("inlineCode",{parentName:"p"},"mount()"),", however, you can\ncustomize ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()")," to fit your needs. For instance, you may find yourself\ndoing repetitive work during mounting. In order to reduce boilerplate you may\nfind it useful to create a custom mount command."),(0,a.kt)("h3",{id:"Default-Declarations-Providers-or-Imports"},"Default Declarations, Providers, or Imports"),(0,a.kt)("p",null,"If you find yourself registering a bunch of declarations, providers, or imports\nin your individual tests, we recommend doing them all within a custom\n",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()")," command. The overhead is usually minimal for all your tests and it\nhelps keep your spec code clean."),(0,a.kt)("p",null,"Below is a sample that registers several default component declarations while\nstill allowing additional ones to be passed in via the config param. The same\npattern can also be applied to providers and module imports."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=support/component.ts",title:"support/component.ts"},"import { Type } from '@angular/core'\nimport { mount, MountConfig } from 'cypress/angular'\nimport { ButtonComponent } from 'src/app/button/button.component'\nimport { CardComponent } from 'src/app/card/card.component'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof customMount\n    }\n  }\n}\n\nconst declarations = [ButtonComponent, CardComponent]\n\nfunction customMount<T>(component: string | Type<T>, config?: MountConfig<T>) {\n  if (!config) {\n    config = { declarations }\n  } else {\n    config.declarations = [...(config?.declarations || []), ...declarations]\n  }\n  return mount<T>(component, config)\n}\n\nCypress.Commands.add('mount', customMount)\n")),(0,a.kt)("p",null,"This custom mount command will allow you to skip manually passing in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"ButtonComponent")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"CardComponent")," as declarations into each ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()"),"\ncall."),(0,a.kt)("h3",{id:"autoSpyOutputs"},"autoSpyOutputs"),(0,a.kt)("p",null,"Here is an example of defaulting ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSpyOutputs")," for every mounted component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=support/component.ts",title:"support/component.ts"},"declare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n\nCypress.Commands.add(\n  'mount',\n  (component: Type<unknown> | string, config: MountConfig<T>) => {\n    return mount(component, {\n      ...config,\n      autoSpyOutputs: true,\n    })\n  }\n)\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSpyOutput")," flag only works when passing in a component to the mount\nfunction. It currently does not work with the template syntax.")))}c.isMDXComponent=!0}}]);