"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[3640],{732:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=i(5893),s=i(1151);const o={sidebar_label:"Production monitoring",title:"Production monitoring | Cypress Accessibility Documentation",description:"Monitor accessibility issues in production by running scheduled Cypress tests against live environments, capturing dynamic content changes, and generating automated reports for a comprehensive accessibility overview.",sidebar_position:60},r="Production monitoring",c={id:"accessibility/guides/production-monitoring",title:"Production monitoring | Cypress Accessibility Documentation",description:"Monitor accessibility issues in production by running scheduled Cypress tests against live environments, capturing dynamic content changes, and generating automated reports for a comprehensive accessibility overview.",source:"@site/docs/accessibility/guides/production-monitoring.mdx",sourceDirName:"accessibility/guides",slug:"/accessibility/guides/production-monitoring",permalink:"/accessibility/guides/production-monitoring",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/accessibility/guides/production-monitoring.mdx",tags:[],version:"current",lastUpdatedAt:1749520976,formattedLastUpdatedAt:"Jun 10, 2025",sidebarPosition:60,frontMatter:{sidebar_label:"Production monitoring",title:"Production monitoring | Cypress Accessibility Documentation",description:"Monitor accessibility issues in production by running scheduled Cypress tests against live environments, capturing dynamic content changes, and generating automated reports for a comprehensive accessibility overview.",sidebar_position:60},sidebar:"accessibility",previous:{title:"Feedback during local development",permalink:"/accessibility/guides/local-development"},next:{title:"Detect and manage changes",permalink:"/accessibility/guides/detect-changes"}},a={},l=[{value:"Using Cypress for Production Monitoring",id:"Using-Cypress-for-Production-Monitoring",level:2},{value:"Example: Automated Sitemap-Based Testing",id:"Example-Automated-Sitemap-Based-Testing",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components},{ProductHeading:i}=t;return i||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ProductHeading",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i,{product:"accessibility"}),"\n",(0,n.jsx)(t.h1,{id:"Production-monitoring",children:"Production monitoring"}),"\n",(0,n.jsx)(t.p,{children:"Cypress is commonly used in CI and local development workflows. It can also be leveraged to monitor production or staging environments through scheduled tests. This approach is particularly useful for environments involving dynamic content, such as those managed by Content Management Systems (CMS), where content changes can impact accessibility."}),"\n",(0,n.jsx)(t.p,{children:"Dynamic or externally controlled content, such as A/B tests or user-generated content, often makes it challenging to write explicit assertions. For these cases, production smoke tests can serve as high-level health checks, ensuring the accessibility of dynamic UI variations without requiring full test coverage."}),"\n",(0,n.jsx)(t.h2,{id:"Using-Cypress-for-Production-Monitoring",children:"Using Cypress for Production Monitoring"}),"\n",(0,n.jsx)(t.p,{children:"Cypress Accessibility enables you to test dynamic content seamlessly. By visiting a production URL within your Cypress tests and performing minimal UI interactions, you can capture the page's accessibility state in reports. This allows teams to detect accessibility issues introduced outside the regular development lifecycle."}),"\n",(0,n.jsx)(t.h2,{id:"Example-Automated-Sitemap-Based-Testing",children:"Example: Automated Sitemap-Based Testing"}),"\n",(0,n.jsx)(t.p,{children:"If your project lacks existing Cypress tests, a common approach is to generate test coverage from a sitemap or an array of target URLs. These URLs can be used to perform light interactions and capture accessibility reports. Below is an example of how to automate this process by using a sitemap and scrolling to the footer on each page:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"describe('Accessibility Scan', () => {\n  it('Checks accessibility with the sitemap.xml', () => {\n    cy.request('https://<YOUR_WEBSITE>/sitemap.xml').then((response) => {\n      const xmlString = response.body\n      const parser = new DOMParser()\n      const xmlDoc = parser.parseFromString(xmlString, 'application/xml')\n      const URLs = Array.from(xmlDoc.querySelectorAll('loc')).map(\n        (loc) => loc.textContent\n      )\n      Cypress._.each(URLs, (URL) => {\n        cy.visit(URL)\n        cy.contains('<YOUR_FOOTER_CONTENT>').scrollIntoView()\n      })\n    })\n  })\n})\n"})}),"\n",(0,n.jsx)(t.p,{children:"The outcome of this is a first-page-load accessibility report for every URL in the site. Any Cypress UI tests for specific workflows will increase the coverage area automatically to include the states and variations reached during the workflows."})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,i)=>{i.d(t,{Z:()=>c,a:()=>r});var n=i(7294);const s={},o=n.createContext(s);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);