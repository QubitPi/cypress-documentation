"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[4637],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var o=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,s=function(e,t){if(null==e)return{};var n,o,s={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=s,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||r;return n?o.createElement(g,a(a({ref:t},l),{},{components:n})):o.createElement(g,a({ref:t},l))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,a=new Array(r);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[m]="string"==typeof e?e:s,a[1]=i;for(var p=2;p<r;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6767:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=n(7462),s=(n(7294),n(3905));const r={title:"Svelte Examples",sidebar_position:30},a=void 0,i={unversionedId:"guides/component-testing/svelte/examples",id:"guides/component-testing/svelte/examples",title:"Svelte Examples",description:"Mounting Components",source:"@site/docs/guides/component-testing/svelte/examples.mdx",sourceDirName:"guides/component-testing/svelte",slug:"/guides/component-testing/svelte/examples",permalink:"/cypress-documentation/guides/component-testing/svelte/examples",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/component-testing/svelte/examples.mdx",tags:[],version:"current",lastUpdatedAt:1698216540,formattedLastUpdatedAt:"Oct 25, 2023",sidebarPosition:30,frontMatter:{title:"Svelte Examples",sidebar_position:30},sidebar:"guides",previous:{title:"Svelte Overview",permalink:"/cypress-documentation/guides/component-testing/svelte/overview"},next:{title:"Svelte API",permalink:"/cypress-documentation/guides/component-testing/svelte/api"}},c={},p=[{value:"Mounting Components",id:"Mounting-Components",level:2},{value:"Using <code>cy.mount()</code>",id:"Using-cymount",level:3},{value:"Passing Data to a Component",id:"Passing-Data-to-a-Component",level:3},{value:"Testing Event Handlers",id:"Testing-Event-Handlers",level:3},{value:"Accessing the Component Instance",id:"Accessing-the-Component-Instance",level:3}],l={toc:p};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"Mounting-Components"},"Mounting Components"),(0,s.kt)("h3",{id:"Using-cymount"},"Using ",(0,s.kt)("inlineCode",{parentName:"h3"},"cy.mount()")),(0,s.kt)("p",null,"To mount a component with ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.mount()"),", import the component and pass it to the\nmethod:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Stepper } from './stepper.svelte'\n\nit('mounts', () => {\n  cy.mount(Stepper)\n})\n")),(0,s.kt)("h3",{id:"Passing-Data-to-a-Component"},"Passing Data to a Component"),(0,s.kt)("p",null,"You can pass props to a component by setting props in the options: ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.mount()"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"it('mounts', () => {\n  cy.mount(Stepper, { props: { count: 100 } })\n})\n")),(0,s.kt)("h3",{id:"Testing-Event-Handlers"},"Testing Event Handlers"),(0,s.kt)("p",null,"To test emitted events from a Svelte component, we can use access the component\ninstances and use ",(0,s.kt)("inlineCode",{parentName:"p"},"$on")," method to listen to events raised. We can also pass in a\nCypress spy so we can query the spy later for results. In the example below, we\nlisten to the ",(0,s.kt)("inlineCode",{parentName:"p"},"change")," event and validate it was called as expected:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"it('clicking + fires a change event with the incremented value', () => {\n  const changeSpy = cy.spy().as('changeSpy')\n  cy.mount(Stepper).then(({ component }) => {\n    component.$on('change', changeSpy)\n  })\n  cy.get('[data-cy=increment]').click()\n  cy.get('@changeSpy').should('have.been.calledWithMatch', {\n    detail: { count: 1 },\n  })\n})\n")),(0,s.kt)("h3",{id:"Accessing-the-Component-Instance"},"Accessing the Component Instance"),(0,s.kt)("p",null,"There might be times when you might want to access the component instance\ndirectly in your tests. To do so, use ",(0,s.kt)("inlineCode",{parentName:"p"},".then()"),", which enables us to work with\nthe subject that was yielded from the ",(0,s.kt)("inlineCode",{parentName:"p"},"cy.mount()")," command."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"cy.mount(Stepper).then(({ component }) => {\n  //component is the rendered instance of Stepper\n})\n")))}m.isMDXComponent=!0}}]);