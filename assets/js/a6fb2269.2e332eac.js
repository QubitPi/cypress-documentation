"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[2146],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6804:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={title:"Cypress.Screenshot"},s=void 0,i={unversionedId:"api/cypress-api/screenshot-api",id:"api/cypress-api/screenshot-api",title:"Cypress.Screenshot",description:"The Screenshot API allows you set defaults for how screenshots are captured",source:"@site/docs/api/cypress-api/screenshot-api.mdx",sourceDirName:"api/cypress-api",slug:"/api/cypress-api/screenshot-api",permalink:"/cypress-documentation/api/cypress-api/screenshot-api",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/cypress-api/screenshot-api.mdx",tags:[],version:"current",lastUpdatedAt:1696481464,formattedLastUpdatedAt:"Oct 5, 2023",frontMatter:{title:"Cypress.Screenshot"},sidebar:"api",previous:{title:"Cypress.require",permalink:"/cypress-documentation/api/cypress-api/require"},next:{title:"Cypress.SelectorPlayground",permalink:"/cypress-documentation/api/cypress-api/selector-playground-api"}},l={},p=[{value:"Syntax",id:"Syntax",level:2},{value:"Arguments",id:"Arguments",level:3},{value:"Examples",id:"Examples",level:2},{value:"Blackout elements before screenshot",id:"Blackout-elements-before-screenshot",level:3},{value:"Take a screenshot of the entire Cypress browser window",id:"Take-a-screenshot-of-the-entire-Cypress-browser-window",level:3},{value:"Allow timers and animations to keep running",id:"Allow-timers-and-animations-to-keep-running",level:3},{value:"Disable screenshots on run failures",id:"Disable-screenshots-on-run-failures",level:3},{value:"Overwrite existing screenshots",id:"Overwrite-existing-screenshots",level:3},{value:"Scale <code>viewport</code> and <code>fullPage</code> captures",id:"Scale-viewport-and-fullPage-captures",level:3},{value:"Change the DOM using <code>onBeforeScreenshot</code> and <code>onAfterScreenshot</code>",id:"Change-the-DOM-using-onBeforeScreenshot-and-onAfterScreenshot",level:3},{value:"Get properties from the <code>onAfterScreenshot</code> callback",id:"Get-properties-from-the-onAfterScreenshot-callback",level:3},{value:"Notes",id:"Notes",level:2},{value:"Where to put screenshot configuration",id:"Where-to-put-screenshot-configuration",level:4},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},u=c("Icon"),d=c("SupportFileConfiguration"),h={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Screenshot API allows you set defaults for how screenshots are captured\nduring ",(0,a.kt)("a",{parentName:"p",href:"/api/commands/screenshot"},".screenshot")," and automatic screenshots taken\nduring test failures. You can set defaults for the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Which parts of the screen to capture."),(0,a.kt)("li",{parentName:"ul"},"Whether to scale your application under test in the screenshot."),(0,a.kt)("li",{parentName:"ul"},"Whether to disable JavaScript timers and CSS animations when taking the\nscreenshot."),(0,a.kt)("li",{parentName:"ul"},"Whether to automatically take screenshots when there are run failures."),(0,a.kt)("li",{parentName:"ul"},"Which, if any, elements to black out when taking the screenshot."),(0,a.kt)("li",{parentName:"ul"},"Whether to wait for the Command Log to synchronize before taking the\nscreenshot.")),(0,a.kt)("h2",{id:"Syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Screenshot.defaults(options)\n")),(0,a.kt)("h3",{id:"Arguments"},"Arguments"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(u,{name:"angle-right",mdxType:"Icon"})," options")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"(Object)"))),(0,a.kt)("p",null,"An object containing one or more of the following:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Option"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"blackout")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"[]")),(0,a.kt)("td",{parentName:"tr",align:null},"Array of string selectors used to match elements that should be blacked out when the screenshot is taken. Does not apply to ",(0,a.kt)("inlineCode",{parentName:"td"},"runner")," captures.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"capture")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"'fullPage'")),(0,a.kt)("td",{parentName:"tr",align:null},"Which parts of the Cypress Test Runner to capture. This value is ignored for element screenshot captures. Valid values are ",(0,a.kt)("inlineCode",{parentName:"td"},"viewport"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"fullPage"),", or ",(0,a.kt)("inlineCode",{parentName:"td"},"runner"),". When ",(0,a.kt)("inlineCode",{parentName:"td"},"viewport"),", your application under test is captured in the current viewport. When ",(0,a.kt)("inlineCode",{parentName:"td"},"fullPage"),", your application under test is captured in its entirety from top to bottom. When ",(0,a.kt)("inlineCode",{parentName:"td"},"runner"),", the entire browser viewport, including the Cypress Command Log, is captured. For screenshots automatically taken on test failure, capture is always coerced to ",(0,a.kt)("inlineCode",{parentName:"td"},"runner"),". When ",(0,a.kt)("a",{parentName:"td",href:"/guides/cloud/test-replay"},"Test Replay")," is enabled and the Runner UI is hidden, a ",(0,a.kt)("inlineCode",{parentName:"td"},"runner")," screenshot will not include the Runner UI and will instead capture the application under test only in the current viewport.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"disableTimersAndAnimations")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true")),(0,a.kt)("td",{parentName:"tr",align:null},"When true, prevents JavaScript timers (",(0,a.kt)("inlineCode",{parentName:"td"},"setTimeout"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"setInterval"),", etc) and CSS animations from running while the screenshot is taken.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"scale")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"false")),(0,a.kt)("td",{parentName:"tr",align:null},"Whether to scale the app to fit into the browser viewport. This is always coerced to ",(0,a.kt)("inlineCode",{parentName:"td"},"true")," for ",(0,a.kt)("inlineCode",{parentName:"td"},"runner")," captures.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"screenshotOnRunFailure")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true")),(0,a.kt)("td",{parentName:"tr",align:null},"When true, automatically takes a screenshot when there is a failure during ",(0,a.kt)("inlineCode",{parentName:"td"},"cypress run"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"overwrite")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"false")),(0,a.kt)("td",{parentName:"tr",align:null},"Whether to overwrite duplicate screenshot files with the same file name when saving.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"onBeforeScreenshot")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"null")),(0,a.kt)("td",{parentName:"tr",align:null},"A callback before a (non-failure) screenshot is taken. For an element capture, the argument is the element being captured. For other screenshots, the argument is the ",(0,a.kt)("inlineCode",{parentName:"td"},"$el"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"onAfterScreenshot")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"null")),(0,a.kt)("td",{parentName:"tr",align:null},"A callback after a (non-failure) screenshot is taken. For an element capture, the first argument is the element being captured. For other screenshots, the first argument is the ",(0,a.kt)("inlineCode",{parentName:"td"},"$el"),". The second argument is properties concerning the screenshot, including the path it was saved to and the dimensions of the saved screenshot.")))),(0,a.kt)("h2",{id:"Examples"},"Examples"),(0,a.kt)("h3",{id:"Blackout-elements-before-screenshot"},"Blackout elements before screenshot"),(0,a.kt)("p",null,"Elements that match the specified selectors will be blacked out from the\nscreenshot, but only when the ",(0,a.kt)("inlineCode",{parentName:"p"},"capture")," option is ",(0,a.kt)("inlineCode",{parentName:"p"},"viewport"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"blackout")," is\nignored if ",(0,a.kt)("inlineCode",{parentName:"p"},"capture")," option is ",(0,a.kt)("inlineCode",{parentName:"p"},"runner"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Screenshot.defaults({\n  blackout: ['.secret-info', '[data-hide=true]'],\n})\n")),(0,a.kt)("h3",{id:"Take-a-screenshot-of-the-entire-Cypress-browser-window"},"Take a screenshot of the entire Cypress browser window"),(0,a.kt)("p",null,"By default, ",(0,a.kt)("a",{parentName:"p",href:"/api/commands/screenshot"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.screenshot()"))," only captures your\napplication under test. You may want it to capture the entire Cypress browser\nfor debugging purposes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Screenshot.defaults({\n  capture: 'runner',\n})\n")),(0,a.kt)("h3",{id:"Allow-timers-and-animations-to-keep-running"},"Allow timers and animations to keep running"),(0,a.kt)("p",null,"By default, JavaScript timers and CSS animations are disabled to try to prevent\nchanges to your application under test while the screenshot is taken, but you\ncan turn off this behavior."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Screenshot.defaults({\n  disableTimersAndAnimations: false,\n})\n")),(0,a.kt)("h3",{id:"Disable-screenshots-on-run-failures"},"Disable screenshots on run failures"),(0,a.kt)("p",null,"By default, Cypress automatically takes a screenshot when there is a failure\nwhen running ",(0,a.kt)("inlineCode",{parentName:"p"},"cypress run"),", but you can disable this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Screenshot.defaults({\n  screenshotOnRunFailure: false,\n})\n")),(0,a.kt)("h3",{id:"Overwrite-existing-screenshots"},"Overwrite existing screenshots"),(0,a.kt)("p",null,"By default, Cypress saves unique screenshot files for every screenshot that is\ntaken within the same test. You can choose to overwrite existing screenshots\nwith the same file name using the ",(0,a.kt)("inlineCode",{parentName:"p"},"overwrite")," option."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Screenshot.defaults({\n  overwrite: true,\n})\n")),(0,a.kt)("h3",{id:"Scale-viewport-and-fullPage-captures"},"Scale ",(0,a.kt)("inlineCode",{parentName:"h3"},"viewport")," and ",(0,a.kt)("inlineCode",{parentName:"h3"},"fullPage")," captures"),(0,a.kt)("p",null,"By default, scaling the application under test is turned off during when the\n",(0,a.kt)("inlineCode",{parentName:"p"},"capture")," option is ",(0,a.kt)("inlineCode",{parentName:"p"},"viewport")," to prevent differences between screenshots on\nscreens with different resolutions. You can turn scaling on and have your app\nscaled like it is during normal use of Cypress. This is always coerced to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"\nif the ",(0,a.kt)("inlineCode",{parentName:"p"},"capture")," option is ",(0,a.kt)("inlineCode",{parentName:"p"},"runner"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Screenshot.defaults({\n  scale: true,\n})\n")),(0,a.kt)("h3",{id:"Change-the-DOM-using-onBeforeScreenshot-and-onAfterScreenshot"},"Change the DOM using ",(0,a.kt)("inlineCode",{parentName:"h3"},"onBeforeScreenshot")," and ",(0,a.kt)("inlineCode",{parentName:"h3"},"onAfterScreenshot")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"onBeforeScreenshot")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onAfterScreenshot")," callbacks provide an\nopportunity to synchronously change the DOM to create a more consistent state\nfor the screenshot."),(0,a.kt)("p",null,"In this example, imagine there is a clock in your app showing the current time.\nThis can cause screenshots to be non-deterministic, which could create false\nnegatives when screenshot diffing. You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"onBeforeScreenshot")," to hide the\nclock and then show it again with ",(0,a.kt)("inlineCode",{parentName:"p"},"onAfterScreenshot"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Screenshot.defaults({\n  onBeforeScreenshot($el) {\n    const $clock = $el.find('.clock')\n\n    if ($clock) {\n      $clock.hide()\n    }\n  },\n\n  onAfterScreenshot($el, props) {\n    const $clock = $el.find('.clock')\n\n    if ($clock) {\n      $clock.show()\n    }\n  },\n})\n")),(0,a.kt)("h3",{id:"Get-properties-from-the-onAfterScreenshot-callback"},"Get properties from the ",(0,a.kt)("inlineCode",{parentName:"h3"},"onAfterScreenshot")," callback"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"Cypress.Screenshot.defaults({\n  onAfterScreenshot($el, props) {\n    // props has information about the screenshot,\n    // including but not limited to the following:\n    // {\n    //   path: '/Users/janelane/project/screenshots/my-screenshot.png',\n    //   size: '15 kb',\n    //   dimensions: {\n    //     width: 1000,\n    //     height: 660,\n    //   },\n    //   scaled: true,\n    //   blackout: ['.foo'],\n    //   duration: 2300,\n    // }\n  },\n})\n")),(0,a.kt)("h2",{id:"Notes"},"Notes"),(0,a.kt)("h4",{id:"Where-to-put-screenshot-configuration"},"Where to put screenshot configuration"),(0,a.kt)(d,{mdxType:"SupportFileConfiguration"}),(0,a.kt)("h2",{id:"History"},"History"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Version"),(0,a.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/references/changelog#8-7-0"},"8.7.0")),(0,a.kt)("td",{parentName:"tr",align:null},"Added ",(0,a.kt)("inlineCode",{parentName:"td"},"overwrite")," configuration option.")))),(0,a.kt)("h2",{id:"See-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/commands/screenshot"},"cy.screenshot()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/guides/cloud/introduction"},"Cypress Cloud")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/guides/guides/screenshots-and-videos"},"Screenshots and Videos")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/guides/tooling/visual-testing"},"Visual Testing"))))}m.isMDXComponent=!0}}]);