"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[2999],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||s;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1268:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={title:"intercept"},i=void 0,o={unversionedId:"api/commands/intercept",id:"api/commands/intercept",title:"intercept",description:"Spy and stub network requests and responses.",source:"@site/docs/api/commands/intercept.mdx",sourceDirName:"api/commands",slug:"/api/commands/intercept",permalink:"/cypress-documentation/api/commands/intercept",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/commands/intercept.mdx",tags:[],version:"current",lastUpdatedAt:1696481464,formattedLastUpdatedAt:"Oct 5, 2023",frontMatter:{title:"intercept"},sidebar:"api",previous:{title:"hover",permalink:"/cypress-documentation/api/commands/hover"},next:{title:"log",permalink:"/cypress-documentation/api/commands/log"}},l={},p=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Arguments",id:"Arguments",level:3},{value:'<strong><Icon name="angle-right" /> method</strong> <strong><em>(String)</em></strong>',id:"Icon-nameangle-right--method-String",level:4},{value:'<strong><Icon name="angle-right" /> url</strong> <strong><em>(String, Glob, RegExp)</em></strong>',id:"Icon-nameangle-right--url-String-Glob-RegExp",level:4},{value:'<strong><Icon name="angle-right" /> routeMatcher</strong> <strong><em>(<code>RouteMatcher</code>)</em></strong>',id:"Icon-nameangle-right--routeMatcher-RouteMatcher",level:4},{value:'<Icon name="angle-right" /> staticResponse (<code>StaticResponse</code>)',id:"staticResponse-StaticResponse",level:4},{value:'<Icon name="angle-right" /> routeHandler (<code>Function</code>)',id:"routeHandler-Function",level:4},{value:'Yields <Icon name="question-circle"/>',id:"Yields",level:3},{value:"Examples",id:"Examples",level:2},{value:"Matching <code>url</code>",id:"Matching-url",level:3},{value:"Matching <code>method</code>",id:"Matching-method",level:3},{value:"Matching with RouteMatcher",id:"Matching-with-RouteMatcher",level:3},{value:"Pattern Matching",id:"Pattern-Matching",level:3},{value:"Aliasing an intercepted route",id:"Aliasing-an-intercepted-route",level:3},{value:"Aliasing individual requests",id:"Aliasing-individual-requests",level:3},{value:"Waiting on a request",id:"Waiting-on-a-request",level:3},{value:"With URL",id:"With-URL",level:4},{value:"With RouteMatcher",id:"With-RouteMatcher",level:4},{value:"Using the yielded object",id:"Using-the-yielded-object",level:4},{value:"Waiting on errors",id:"Waiting-on-errors",level:4},{value:"Stubbing a response",id:"Stubbing-a-response",level:3},{value:"With a string",id:"With-a-string",level:4},{value:"With a fixture",id:"With-a-fixture",level:4},{value:"With a <code>StaticResponse</code> object",id:"With-a-StaticResponse-object",level:4},{value:"Using the <strong><code>routeHandler</code></strong> function",id:"Using-the-routeHandler-function",level:3},{value:"Asserting on a request",id:"Asserting-on-a-request",level:4},{value:"Modifying an outgoing request",id:"Modifying-an-outgoing-request",level:4},{value:"Adding a header to an outgoing request",id:"Adding-a-header-to-an-outgoing-request",level:4},{value:"Waiting on the intercept",id:"Waiting-on-the-intercept",level:4},{value:"Add, modify or delete a header to all outgoing requests",id:"Add-modify-or-delete-a-header-to-all-outgoing-requests",level:4},{value:"Dynamically stubbing a response",id:"Dynamically-stubbing-a-response",level:4},{value:"Returning a Promise",id:"Returning-a-Promise",level:4},{value:"Passing a request to the next request handler",id:"Passing-a-request-to-the-next-request-handler",level:4},{value:"Disabling logs for a request",id:"Disabling-logs-for-a-request",level:3},{value:"Intercepting a response",id:"Intercepting-a-response",level:3},{value:"Asserting on a response",id:"Asserting-on-a-response",level:4},{value:"Returning a Promise",id:"Returning-a-Promise-1",level:4},{value:"Throttle or delay response all incoming responses",id:"Throttle-or-delay-response-all-incoming-responses",level:4},{value:"Request/Response Modification with <code>routeHandler</code>",id:"RequestResponse-Modification-with-routeHandler",level:3},{value:"Asserting on a request",id:"Asserting-on-a-request-1",level:4},{value:"Controlling the outgoing request",id:"Controlling-the-outgoing-request",level:4},{value:"Verifying the request modification",id:"Verifying-the-request-modification",level:4},{value:"Controlling the response",id:"Controlling-the-response",level:4},{value:"Returning a Promise",id:"Returning-a-Promise-2",level:4},{value:"Stubbing a response with a string",id:"Stubbing-a-response-with-a-string",level:4},{value:"Intercepted requests",id:"Intercepted-requests",level:2},{value:"Request object properties",id:"Request-object-properties",level:3},{value:"Controlling the outbound request with <code>req.continue()</code>",id:"Controlling-the-outbound-request-with-reqcontinue",level:3},{value:"Providing a stub response with <code>req.reply()</code>",id:"Providing-a-stub-response-with-reqreply",level:3},{value:"<code>req.reply()</code> shorthand",id:"reqreply-shorthand",level:4},{value:"Convenience functions",id:"Convenience-functions",level:4},{value:"Request events",id:"Request-events",level:3},{value:"Intercepted responses",id:"Intercepted-responses",level:2},{value:"Response object properties",id:"Response-object-properties",level:3},{value:"Ending the response with <code>res.send()</code>",id:"Ending-the-response-with-ressend",level:3},{value:"<code>res.send()</code> shorthand",id:"ressend-shorthand",level:4},{value:"Convenience functions",id:"Convenience-functions-1",level:4},{value:"<code>StaticResponse</code> objects",id:"StaticResponse-objects",level:2},{value:"Interception lifecycle",id:"Interception-lifecycle",level:2},{value:"Request phase",id:"Request-phase",level:3},{value:"Response phase",id:"Response-phase",level:3},{value:"Glob Pattern Matching URLs",id:"Glob-Pattern-Matching-URLs",level:2},{value:"Cypress.minimatch",id:"Cypressminimatch",level:3},{value:"minimatch options",id:"minimatch-options",level:4},{value:"<code>cy.intercept()</code> and request caching",id:"cyintercept-and-request-caching",level:2},{value:"Command Log",id:"Command-Log",level:2},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=d("Icon"),u=d("DocsImage"),h={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Spy and stub network requests and responses."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Tip"),": We recommend you read the\n",(0,r.kt)("a",{parentName:"p",href:"/guides/guides/network-requests"},"Network Requests")," guide first.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"All intercepts are automatically cleared before every test.")),(0,r.kt)("h2",{id:"Syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// spying only\ncy.intercept(url)\ncy.intercept(method, url)\ncy.intercept(routeMatcher)\n")),(0,r.kt)("p",null,"See arguments ",(0,r.kt)("a",{parentName:"p",href:"/api/commands/intercept#url-String-Glob-RegExp"},"url"),",\n",(0,r.kt)("a",{parentName:"p",href:"/api/commands/intercept#method-String"},"method")," and\n",(0,r.kt)("a",{parentName:"p",href:"/api/commands/intercept#routeMatcher-RouteMatcher"},"routeMatcher")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// spying and response stubbing\ncy.intercept(url, staticResponse)\ncy.intercept(method, url, staticResponse)\ncy.intercept(routeMatcher, staticResponse)\ncy.intercept(url, routeMatcher, staticResponse)\n")),(0,r.kt)("p",null,"See\n",(0,r.kt)("a",{parentName:"p",href:"/api/commands/intercept#staticResponse-lt-code-gtStaticResponselt-code-gt"},"staticResponse"),"\nargument"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// spying, dynamic stubbing, request modification, etc.\ncy.intercept(url, routeHandler)\ncy.intercept(method, url, routeHandler)\ncy.intercept(routeMatcher, routeHandler)\ncy.intercept(url, routeMatcher, routeHandler)\n")),(0,r.kt)("p",null,"See\n",(0,r.kt)("a",{parentName:"p",href:"/api/commands/intercept#routeHandler-lt-code-gtFunctionlt-code-gt"},"routeHandler"),"\nargument"),(0,r.kt)("h3",{id:"Usage"},"Usage"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)(c,{name:"check-circle",color:"green",mdxType:"Icon"})," Correct Usage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// spying\ncy.intercept('/users/**')\ncy.intercept('GET', '/users*')\ncy.intercept({\n  method: 'GET',\n  url: '/users*',\n  hostname: 'localhost',\n})\n\n// spying and response stubbing\ncy.intercept('POST', '/users*', {\n  statusCode: 201,\n  body: {\n    name: 'Peter Pan',\n  },\n})\n\n// spying, dynamic stubbing, request modification, etc.\ncy.intercept('/users*', { hostname: 'localhost' }, (req) => {\n  /* do something with request and/or response */\n})\n")),(0,r.kt)("h3",{id:"Arguments"},"Arguments"),(0,r.kt)("h4",{id:"Icon-nameangle-right--method-String"},(0,r.kt)("strong",{parentName:"h4"},(0,r.kt)(c,{name:"angle-right",mdxType:"Icon"})," method")," ",(0,r.kt)("strong",{parentName:"h4"},(0,r.kt)("em",{parentName:"strong"},"(String)"))),(0,r.kt)("p",null,"Match the route to a specific\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"},"HTTP method")," (",(0,r.kt)("inlineCode",{parentName:"p"},"GET"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"POST"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT"),", etc)."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If no method is defined Cypress will match all requests by default.")),(0,r.kt)("h4",{id:"Icon-nameangle-right--url-String-Glob-RegExp"},(0,r.kt)("strong",{parentName:"h4"},(0,r.kt)(c,{name:"angle-right",mdxType:"Icon"})," url")," ",(0,r.kt)("strong",{parentName:"h4"},(0,r.kt)("em",{parentName:"strong"},"(String, Glob, RegExp)"))),(0,r.kt)("p",null,"Specify the URL to match. See ",(0,r.kt)("a",{parentName:"p",href:"#Matching-url"},"Matching ",(0,r.kt)("inlineCode",{parentName:"a"},"url"))," for examples."),(0,r.kt)("p",null,"Alternatively, specify the URL via the ",(0,r.kt)("a",{parentName:"p",href:"#routeMatcher-RouteMatcher"},(0,r.kt)("inlineCode",{parentName:"a"},"routeMatcher")),"\nargument (below)."),(0,r.kt)("h4",{id:"Icon-nameangle-right--routeMatcher-RouteMatcher"},(0,r.kt)("strong",{parentName:"h4"},(0,r.kt)(c,{name:"angle-right",mdxType:"Icon"})," routeMatcher")," ",(0,r.kt)("strong",{parentName:"h4"},(0,r.kt)("em",{parentName:"strong"},"(",(0,r.kt)("inlineCode",{parentName:"em"},"RouteMatcher"),")"))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"routeMatcher")," is an object used to match the incoming HTTP requests with this\nintercepted route."),(0,r.kt)("p",null,"All properties are optional but all those that are set must match for the\nrequest to be intercepted. If a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," is passed to any property, it will be\nglob-matched against the request using\n",(0,r.kt)("a",{parentName:"p",href:"/api/utilities/minimatch"},(0,r.kt)("inlineCode",{parentName:"a"},"Cypress.minimatch"))," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"{ matchBase: true }"),"\nminimatch option applied."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"auth"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP Basic Authentication (",(0,r.kt)("inlineCode",{parentName:"td"},"object")," with keys ",(0,r.kt)("inlineCode",{parentName:"td"},"username")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"password"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"headers"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP request headers (",(0,r.kt)("inlineCode",{parentName:"td"},"object"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hostname"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP request hostname")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"https"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"),": only secure (https://) requests, ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),": only insecure (http://) requests")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"method"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP request method (matches any method by default)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"middleware"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"),": match route first and in defined order, ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),": match route in reverse order (default)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP request path after the hostname, including query parameters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pathname"),(0,r.kt)("td",{parentName:"tr",align:null},"Like ",(0,r.kt)("inlineCode",{parentName:"td"},"path"),", but without query parameters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"port"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP request port(s) (",(0,r.kt)("inlineCode",{parentName:"td"},"number")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"Array"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query"),(0,r.kt)("td",{parentName:"tr",align:null},"Parsed query string (",(0,r.kt)("inlineCode",{parentName:"td"},"object"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resourceType"),(0,r.kt)("td",{parentName:"tr",align:null},"The resource type of the request. See ",(0,r.kt)("a",{parentName:"td",href:"#Request-object-properties"},'"Request object properties"')," for a list of possible values for ",(0,r.kt)("inlineCode",{parentName:"td"},"resourceType"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"times"),(0,r.kt)("td",{parentName:"tr",align:null},"Maximum number of times to match (",(0,r.kt)("inlineCode",{parentName:"td"},"number"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"url"),(0,r.kt)("td",{parentName:"tr",align:null},"Full HTTP request URL")))),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#With-RouteMatcher"},"examples")," below."),(0,r.kt)("h4",{id:"staticResponse-StaticResponse"},(0,r.kt)(c,{name:"angle-right",mdxType:"Icon"})," staticResponse (",(0,r.kt)("code",null,(0,r.kt)("a",{parentName:"h4",href:"#StaticResponse-objects"},"StaticResponse")),")"),(0,r.kt)("p",null,"By passing in a ",(0,r.kt)("inlineCode",{parentName:"p"},"StaticResponse")," as the last argument, you can\n",(0,r.kt)("a",{parentName:"p",href:"#Stubbing-a-response"},"statically define (stub) a response")," for matched\nrequests. See ",(0,r.kt)("a",{parentName:"p",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse")," object")," for the list of\nproperties."),(0,r.kt)("p",null,"Additionally, you can pass ",(0,r.kt)("inlineCode",{parentName:"p"},"{ log: false }")," with your ",(0,r.kt)("inlineCode",{parentName:"p"},"StaticResponse")," to\ndisable command logs for this intercept. See\n",(0,r.kt)("a",{parentName:"p",href:"#Disabling-logs-for-a-request"},'"Disabling logs for a request"'),"."),(0,r.kt)("p",null,"See\n",(0,r.kt)("a",{parentName:"p",href:"#With-a-StaticResponse-object"},"Stubbing a response with a ",(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse")," object"),"\nfor an example."),(0,r.kt)("h4",{id:"routeHandler-Function"},(0,r.kt)(c,{name:"angle-right",mdxType:"Icon"})," routeHandler (",(0,r.kt)("code",null,"Function"),")"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"routeHandler")," function is called whenever a request is matched, with the\nfirst argument being the request object. From inside the callback, you have\naccess to the entire request-response where you can modify the outgoing request,\nsend a response, access the real response, and more."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#Intercepted-requests"},'"Intercepted requests"')," and\n",(0,r.kt)("a",{parentName:"p",href:"#Request-Response-Modification-with-routeHandler"},"Request/Response Modification with ",(0,r.kt)("inlineCode",{parentName:"a"},"routeHandler")),"."),(0,r.kt)("h3",{id:"Yields"},"Yields ",(0,r.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Subject-Management"},(0,r.kt)(c,{name:"question-circle",mdxType:"Icon"}))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cy.intercept()")," yields ",(0,r.kt)("inlineCode",{parentName:"li"},"null"),", but can be aliased."),(0,r.kt)("li",{parentName:"ul"},"Waiting on an aliased ",(0,r.kt)("inlineCode",{parentName:"li"},"cy.intercept()")," route using\n",(0,r.kt)("a",{parentName:"li",href:"/api/commands/wait"},"cy.wait()")," will yield an object that contains information\nabout the matching request/response cycle. See\n",(0,r.kt)("a",{parentName:"li",href:"#Using-the-yielded-object"},"Using the yielded object")," for examples of how to\nuse this object.")),(0,r.kt)("h2",{id:"Examples"},"Examples"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept")," can be used solely for spying: to passively listen for matching\nroutes and apply ",(0,r.kt)("a",{parentName:"p",href:"#Aliasing-a-Route"},"aliases")," to them without manipulating the\nrequest or its response in any way. This alone is powerful as it allows you to\n",(0,r.kt)("a",{parentName:"p",href:"#Waiting-on-a-request"},"wait")," for these requests, resulting in more reliable\ntests.")),(0,r.kt)("h3",{id:"Matching-url"},"Matching ",(0,r.kt)("inlineCode",{parentName:"h3"},"url")),(0,r.kt)("p",null,"You can provide the exact ",(0,r.kt)("a",{parentName:"p",href:"#Arguments"},"URL")," to match or use pattern-matching to\nmatch many URLs at once, either with globs or with regex. See\n",(0,r.kt)("a",{parentName:"p",href:"#Glob-Pattern-Matching-URLs"},"Glob Pattern Matching URLs"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// match any request that exactly matches the URL\ncy.intercept('https://prod.cypress.io/users')\n\n// match any request that satisfies a glob pattern\ncy.intercept('/users?_limit=*')\n\n// match any request that satisfies a regex pattern\ncy.intercept(/\\/users\\?_limit=(3|5)$/)\n")),(0,r.kt)("h3",{id:"Matching-method"},"Matching ",(0,r.kt)("inlineCode",{parentName:"h3"},"method")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If you don't pass in a ",(0,r.kt)("a",{parentName:"p",href:"#method-String"},(0,r.kt)("inlineCode",{parentName:"a"},"method")," argument"),", then all HTTP methods\n(",(0,r.kt)("inlineCode",{parentName:"p"},"GET"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"POST"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"PATCH"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE"),", etc.) will match.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/users')\n// matches this: GET http://localhost/users\n// ...and this, too: POST http://localhost/users\n\ncy.intercept('GET', '/users')\n// matches this: GET http://localhost/users\n// ...but not this: POST http://localhost/users\n")),(0,r.kt)("h3",{id:"Matching-with-RouteMatcher"},"Matching with ",(0,r.kt)("a",{parentName:"h3",href:"#routeMatcher-RouteMatcher"},"RouteMatcher")),(0,r.kt)("p",null,"Specifying a ",(0,r.kt)("inlineCode",{parentName:"p"},"method")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," to match can also be acheived by passing the\n",(0,r.kt)("inlineCode",{parentName:"p"},"routeMatcher")," object into ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept")," instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// These both yield the same result:\ncy.intercept({ method: 'GET', url: '**/users' })\ncy.intercept('GET', '**/users')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Match any type of request with the pathname `/search`\n// and the query parameter 'q=some+terms'\ncy.intercept({\n  pathname: '/search',\n  query: {\n    q: 'some terms',\n  },\n}).as('searchForTerms')\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept(\n  {\n    // this RegExp matches any URL beginning with\n    // 'http://api.example.com/' and ending with '/edit' or '/save'\n    url: /^http:\\/\\/api\\.example\\.com\\/.*\\/(edit|save)/,\n    // matching requests must also contain this header\n    headers: {\n      'x-requested-with': 'exampleClient',\n    },\n  }\n})\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// this example will cause 1 request to `/temporary-error`\n// to receive a network error and subsequent requests will\n// not match this `RouteMatcher`\ncy.intercept('/temporary-error', { times: 1 }, { forceNetworkError: true })\n")),(0,r.kt)("h3",{id:"Pattern-Matching"},"Pattern Matching"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// match updates to the `/users` endpoint using glob matching\ncy.intercept({\n  method: '+(PUT|PATCH)',\n  url: '**/users/*',\n})\n// matches:\n//   PUT /users/1\n//   PATCH /users/1\n//   doesn't match\n//   GET /users\n//   GET /users/1\n\n// same as above, but using regex\ncy.intercept({\n  method: '/PUT|PATCH/',\n  url: '**/users/*',\n})\n")),(0,r.kt)("h3",{id:"Aliasing-an-intercepted-route"},"Aliasing an intercepted route"),(0,r.kt)("p",null,"While ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept")," doesn't yield anything, you can chain\n",(0,r.kt)("a",{parentName:"p",href:"/api/commands/as"},(0,r.kt)("inlineCode",{parentName:"a"},".as"))," to it to create an\n",(0,r.kt)("a",{parentName:"p",href:"/guides/core-concepts/variables-and-aliases#Aliases"},"alias")," which can be used\nto ",(0,r.kt)("a",{parentName:"p",href:"#Waiting-on-a-request"},"wait on a request"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('GET', '/users').as('getAllUsers')\ncy.intercept('POST', '/users').as('createUser')\n")),(0,r.kt)("h3",{id:"Aliasing-individual-requests"},"Aliasing individual requests"),(0,r.kt)("p",null,"Aliases can be set on a per-request basis by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"alias")," property of the\nintercepted request. This is especially useful when intercepting GraphQL\nrequests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('POST', '/graphql', (req) => {\n  if (req.body.hasOwnProperty('query') && req.body.query.includes('mutation')) {\n    req.alias = 'gqlMutation'\n  }\n})\n\n// assert that a matching request has been made\ncy.wait('@gqlMutation')\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For more guidance around aliasing requests with GraphQL, see\n",(0,r.kt)("a",{parentName:"p",href:"/guides/end-to-end-testing/working-with-graphql"},"Working with GraphQL"),".")),(0,r.kt)("h3",{id:"Waiting-on-a-request"},"Waiting on a request"),(0,r.kt)("p",null,"Use ",(0,r.kt)("a",{parentName:"p",href:"/api/commands/wait"},"cy.wait()")," with\n",(0,r.kt)("a",{parentName:"p",href:"#aliasing-an-intercepted-route"},"aliasing an intercepted route")," to wait for the\nrequest/response cycle to complete."),(0,r.kt)("h4",{id:"With-URL"},"With URL"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('http://example.com/settings').as('getSettings')\n\n// once a request to get settings responds, 'cy.wait' will resolve\ncy.wait('@getSettings')\n")),(0,r.kt)("h4",{id:"With-RouteMatcher"},"With ",(0,r.kt)("a",{parentName:"h4",href:"#routeMatcher-RouteMatcher"},"RouteMatcher")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept({\n  url: 'http://example.com/search*',\n  query: { q: 'expected terms' },\n}).as('search')\n\n// once any type of request to search with a querystring\n// containing 'q=expected+terms' responds, 'cy.wait' will resolve\ncy.wait('@search')\n")),(0,r.kt)("h4",{id:"Using-the-yielded-object"},"Using the yielded object"),(0,r.kt)("p",null,"Using ",(0,r.kt)("a",{parentName:"p",href:"/api/commands/wait"},"cy.wait()")," on a ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," route alias yields\nan interception object which represents the request/response cycle:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.wait('@someRoute').then((interception) => {\n  // 'interception' is an object with properties\n  // 'id', 'request' and 'response'\n})\n")),(0,r.kt)("p",null,"You can chain ",(0,r.kt)("a",{parentName:"p",href:"/api/commands/its"},(0,r.kt)("inlineCode",{parentName:"a"},".its()"))," and\n",(0,r.kt)("a",{parentName:"p",href:"/api/commands/should"},(0,r.kt)("inlineCode",{parentName:"a"},".should()"))," to assert against request/response cycles:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// assert that a request to this route\n// was made with a body that included 'user'\ncy.wait('@someRoute').its('request.body').should('include', 'user')\n\n// assert that a request to this route\n// received a response with HTTP status 500\ncy.wait('@someRoute').its('response.statusCode').should('eq', 500)\n\n// assert that a request to this route\n// received a response body that includes 'id'\ncy.wait('@someRoute').its('response.body').should('include', 'id')\n")),(0,r.kt)("h4",{id:"Waiting-on-errors"},"Waiting on errors"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("a",{parentName:"p",href:"/api/commands/wait"},"cy.wait()")," to wait on requests that end with\nnetwork errors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('GET', '/should-err', { forceNetworkError: true }).as('err')\n\n// assert that this request happened\n// and that it ended in an error\ncy.wait('@err').should('have.property', 'error')\n")),(0,r.kt)("h3",{id:"Stubbing-a-response"},"Stubbing a response"),(0,r.kt)("h4",{id:"With-a-string"},"With a string"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// requests to '/update' will be fulfilled\n// with a body of \"success\"\ncy.intercept('/update', 'success')\n")),(0,r.kt)("h4",{id:"With-a-fixture"},"With a fixture"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// requests to '/users.json' will be fulfilled\n// with the contents of the \"users.json\" fixture\ncy.intercept('/users.json', { fixture: 'users.json' })\n")),(0,r.kt)("h4",{id:"With-a-StaticResponse-object"},"With a ",(0,r.kt)("inlineCode",{parentName:"h4"},"StaticResponse")," object"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse"))," object represents a response to an HTTP\nrequest, and can be used to stub routes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const staticResponse = {\n  /* some StaticResponse properties here... */\n}\n\ncy.intercept('/projects', staticResponse)\n")),(0,r.kt)("p",null,"Stub a response with a JSON body:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/projects', {\n  body: [{ projectId: '1' }, { projectId: '2' }],\n})\n")),(0,r.kt)("p",null,"Stub headers, status code, and body all at once:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/not-found', {\n  statusCode: 404,\n  body: '404 Not Found!',\n  headers: {\n    'x-not-found': 'true',\n  },\n})\n")),(0,r.kt)("p",null,"Stub response with a fixture that is read as a Buffer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/not-found', {\n  fixture: 'media/gif.mp4,null',\n})\n")),(0,r.kt)("p",null,"See also ",(0,r.kt)("a",{parentName:"p",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse")," object"),"."),(0,r.kt)("h3",{id:"Using-the-routeHandler-function"},"Using the ",(0,r.kt)("strong",{parentName:"h3"},(0,r.kt)("inlineCode",{parentName:"strong"},"routeHandler"))," function"),(0,r.kt)("p",null,"By specifying a ",(0,r.kt)("a",{parentName:"p",href:"#routeHandler-lt-code-gtstring-object-Function-StaticResponselt-code-gt"},(0,r.kt)("inlineCode",{parentName:"a"},"routeHandler"))," function as the last argument\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept"),", you'll have access to the entire request-response session,\nenabling you to modify the outgoing request, manipulate the real response, make\nassertions, etc."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"routeHandler")," takes the incoming HTTP request (",(0,r.kt)("inlineCode",{parentName:"p"},"IncomingHTTPRequest"),") as\nthe first argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/users*', (req) => {\n  /* do something with request and/or response */\n})\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Throughout these examples we will refer to the incoming HTTP request as ",(0,r.kt)("inlineCode",{parentName:"p"},"req"),".\nThose of you with ",(0,r.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express.js"),"\n",(0,r.kt)("a",{parentName:"p",href:"https://expressjs.com/en/guide/writing-middleware.html"},"middleware")," experience\nshould be familiar with this syntax.")),(0,r.kt)("h4",{id:"Asserting-on-a-request"},"Asserting on a request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('POST', '/organization', (req) => {\n  expect(req.body).to.include('Acme Company')\n})\n")),(0,r.kt)("h4",{id:"Modifying-an-outgoing-request"},"Modifying an outgoing request"),(0,r.kt)("p",null,"You can use the request handler callback to modify the ",(0,r.kt)("a",{parentName:"p",href:"#Intercepted-requests"},"intercepted request\nobject")," before it is sent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// set the request body to something different\n// before it's sent to the destination\ncy.intercept('POST', '/login', (req) => {\n  req.body = 'username=janelane&password=secret123'\n})\n\n// dynamically set the alias\ncy.intercept('POST', '/login', (req) => {\n  req.alias = 'login'\n})\n")),(0,r.kt)("h4",{id:"Adding-a-header-to-an-outgoing-request"},"Adding a header to an outgoing request"),(0,r.kt)("p",null,"You can add a header to an outgoing request, or modify an existing header"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/req-headers', (req) => {\n  req.headers['x-custom-headers'] = 'added by cy.intercept'\n})\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," the new header will NOT be shown in the browser's Network tab, as the\nrequest has already left the browser. You can still confirm the header was added\nby waiting on the intercept as shown below:"),(0,r.kt)("h4",{id:"Waiting-on-the-intercept"},"Waiting on the intercept"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/req-headers', (req) => {\n  req.headers['x-custom-headers'] = 'added by cy.intercept'\n}).as('headers')\n\n// the application makes the call ...\n// confirm the custom header was added\ncy.wait('@headers')\n  .its('request.headers')\n  .should('have.property', 'x-custom-headers', 'added by cy.intercept')\n")),(0,r.kt)("h4",{id:"Add-modify-or-delete-a-header-to-all-outgoing-requests"},"Add, modify or delete a header to all outgoing requests"),(0,r.kt)("p",null,"You can add, modify or delete a header to all outgoing requests using a\n",(0,r.kt)("inlineCode",{parentName:"p"},"beforeEach()")," in the\n",(0,r.kt)("a",{parentName:"p",href:"/guides/core-concepts/writing-and-organizing-tests#Support-file"},"supportFile"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"beforeEach(() => {\n  cy.intercept(\n    { url: 'http://localhost:3001/**', middleware: true },\n    // Delete 'if-none-match' header from all outgoing requests\n    (req) => delete req.headers['if-none-match']\n  )\n})\n")),(0,r.kt)("h4",{id:"Dynamically-stubbing-a-response"},"Dynamically stubbing a response"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("a",{parentName:"p",href:"#Providing-a-stub-response-with-reqreply"},(0,r.kt)("inlineCode",{parentName:"a"},"req.reply()"))," function to dynamically control the\nresponse to a request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/billing', (req) => {\n  // functions on 'req' can be used to\n  // dynamically respond to a request here\n\n  // send the request to the destination server\n  req.reply()\n\n  // respond to the request with a JSON object\n  req.reply({ plan: 'starter' })\n\n  // send the request to the destination server\n  // and intercept the response\n  req.continue((res) => {\n    // 'res' represents the real destination's response\n    // See \"Intercepting a response\" for more details and examples\n  })\n})\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#Intercepted-requests"},'"Intercepted requests"')," for more information on the ",(0,r.kt)("inlineCode",{parentName:"p"},"req")," object and\nits properties and methods."),(0,r.kt)("h4",{id:"Returning-a-Promise"},"Returning a Promise"),(0,r.kt)("p",null,"If a Promise is returned from the route callback, it will be awaited before\ncontinuing with the request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('POST', '/login', (req) => {\n  // you could asynchronously fetch test data...\n  return getLoginCredentials().then((credentials) => {\n    // ...and then, use it to supplement the outgoing request\n    req.headers['authorization'] = credentials\n  })\n})\n")),(0,r.kt)("h4",{id:"Passing-a-request-to-the-next-request-handler"},"Passing a request to the next request handler"),(0,r.kt)("p",null,"If ",(0,r.kt)("a",{parentName:"p",href:"#Providing-a-stub-response-with-reqreply"},(0,r.kt)("inlineCode",{parentName:"a"},"req.reply()"))," or ",(0,r.kt)("a",{parentName:"p",href:"#Controlling-the-outbound-request-with-reqcontinue"},(0,r.kt)("inlineCode",{parentName:"a"},"req.continue()"))," is not\nexplicitly called inside of a request handler, requests will pass to the next\nrequest handler until none are left."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// you could have a top-level middleware handler that\n// sets an auth token on all requests\n// but remember setting `middleware: true` will\n// cause this to always be called first\ncy.intercept('http://api.company.com/', { middleware: true }, (req) => {\n  req.headers['authorization'] = `token ${token}`\n})\n\n// and then have another handler that\n// more narrowly asserts on certain requests\ncy.intercept('POST', 'http://api.company.com/widgets', (req) => {\n  expect(req.body).to.include('analytics')\n})\n\n// a POST request to http://api.company.com/widgets would hit both\n// of those callbacks, middleware first, then the request would be\n// sent out with the modified request headers to the\n// real destination\n")),(0,r.kt)("h3",{id:"Disabling-logs-for-a-request"},"Disabling logs for a request"),(0,r.kt)("p",null,"By default, Cypress logs all requests that match any ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()"),", as well\nas all ",(0,r.kt)("inlineCode",{parentName:"p"},"XMLHttpRequest"),"s and ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch")," requests. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," to\ndisable these logs by passing ",(0,r.kt)("inlineCode",{parentName:"p"},"{ log: false }")," in the second parameter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// disable Cypress's default behavior of logging all XMLHttpRequests and fetches\ncy.intercept({ resourceType: /xhr|fetch/ }, { log: false })\n")),(0,r.kt)("p",null,"Note: Currently, you can only enable/disable a request's logs when defining the\n",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()"),", not inside of an ",(0,r.kt)("inlineCode",{parentName:"p"},"intercept")," callback. See\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/issues/26069"},"#26069"),"."),(0,r.kt)("h3",{id:"Intercepting-a-response"},"Intercepting a response"),(0,r.kt)("p",null,"Inside of a callback passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"req.continue()"),", you can access the destination\nserver's real response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/integrations', (req) => {\n  // req.continue() with a callback will send the request to\n  // the destination server\n  req.continue((res) => {\n    // 'res' represents the real destination response\n    // you can manipulate 'res' before it's sent to the browser\n  })\n})\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#Intercepted-responses"},'"Intercepted responses"')," for more information on the ",(0,r.kt)("inlineCode",{parentName:"p"},"res")," object. See\n",(0,r.kt)("a",{parentName:"p",href:"#Controlling-the-outbound-request-with-reqcontinue"},'"Controlling the outbound request with ',(0,r.kt)("inlineCode",{parentName:"a"},"req.continue()"),'"')," for\nmore information about ",(0,r.kt)("inlineCode",{parentName:"p"},"req.continue()"),"."),(0,r.kt)("h4",{id:"Asserting-on-a-response"},"Asserting on a response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/projects/2', (req) => {\n  req.continue((res) => {\n    expect(res.body).to.include('My Project')\n  })\n})\n")),(0,r.kt)("h4",{id:"Returning-a-Promise-1"},"Returning a Promise"),(0,r.kt)("p",null,"If a Promise is returned from the route callback, it will be awaited before\nsending the response to the browser."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/users', (req) => {\n  req.continue((res) => {\n    // the response will not be sent to the browser until\n    // 'waitForSomething()' resolves\n    return waitForSomething()\n  })\n})\n")),(0,r.kt)("h4",{id:"Throttle-or-delay-response-all-incoming-responses"},"Throttle or delay response all incoming responses"),(0,r.kt)("p",null,"You can throttle or delay all incoming responses using a ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeEach()")," in the\n",(0,r.kt)("a",{parentName:"p",href:"/guides/core-concepts/writing-and-organizing-tests#Support-file"},"supportFile"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Throttle API responses to simulate real-world conditions\nbeforeEach(() => {\n  cy.intercept(\n    {\n      url: 'http://localhost:3001/**',\n      middleware: true,\n    },\n    (req) => {\n      req.on('response', (res) => {\n        // Throttle the response to 1 Mbps to simulate a\n        // mobile 3G connection\n        res.setThrottle(1000)\n      })\n    }\n  )\n})\n")),(0,r.kt)("h3",{id:"RequestResponse-Modification-with-routeHandler"},"Request/Response Modification with ",(0,r.kt)("inlineCode",{parentName:"h3"},"routeHandler")),(0,r.kt)("p",null,"Specify ",(0,r.kt)("a",{parentName:"p",href:"#routeHandler-lt-code-gtstring-object-Function-StaticResponselt-code-gt"},(0,r.kt)("inlineCode",{parentName:"a"},"routeHandler"))," as the last argument to modify the\noutgoing request, stub a response, make assertions, etc."),(0,r.kt)("p",null,"If a function is passed as the ",(0,r.kt)("inlineCode",{parentName:"p"},"routeHandler"),", it will be called with the\nintercepted HTTP request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/api', (req) => {\n  // do something with the intercepted request\n})\n")),(0,r.kt)("p",null,"From here, you can do several things with the intercepted request:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"modify and make assertions on the request like its body, headers, URL, method,\netc. (",(0,r.kt)("a",{parentName:"li",href:"#Asserting-on-a-request-1"},"example"),")"),(0,r.kt)("li",{parentName:"ul"},"stub out the response without interacting with a real back-end\n(",(0,r.kt)("a",{parentName:"li",href:"#Controlling-the-response"},"example")),(0,r.kt)("li",{parentName:"ul"},"pass the request through to its destination and modify or make assertions on\nthe real response on its way back (",(0,r.kt)("a",{parentName:"li",href:"#Controlling-the-response"},"example"),")"),(0,r.kt)("li",{parentName:"ul"},"attach listeners to various events on the request\n(",(0,r.kt)("a",{parentName:"li",href:"#Controlling-the-response"},"example"),")")),(0,r.kt)("h4",{id:"Asserting-on-a-request-1"},"Asserting on a request"),(0,r.kt)("p",null,"You can use the request handler callback to make an assertion on the\n",(0,r.kt)("a",{parentName:"p",href:"#Intercepted-requests"},"intercepted request object")," before it is sent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// match requests to create a user\ncy.intercept('POST', '/users', (req) => {\n  // make an assertion on the payload contents\n  expect(req.body).to.include('Peter Pan')\n})\n")),(0,r.kt)("h4",{id:"Controlling-the-outgoing-request"},"Controlling the outgoing request"),(0,r.kt)("p",null,"The outgoing request, including its body, headers, etc., can be modified before\nit's sent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// modify the request body before it's sent to its destination\ncy.intercept('POST', '/users', (req) => {\n  req.body = {\n    name: 'Peter Pan',\n  }\n})\n\n// add a header to an outgoing request\ncy.intercept('POST', '/users', (req) => {\n  req.headers['x-custom-header'] = 'added by cy.intercept'\n})\n\n// modify an existing header\ncy.intercept('POST', '/users', (req) => {\n  req.headers['authorization'] = 'Basic YWxhZGRpbjpvcGVuc2VzYW1l'\n})\n")),(0,r.kt)("h4",{id:"Verifying-the-request-modification"},"Verifying the request modification"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('POST', '/users', (req) => {\n  req.headers['x-custom-header'] = 'added by cy.intercept'\n}).as('createUser')\n\ncy.get('button.save').click()\n// you can see the headers in the console output by selecting\n// this line in the command log:\ncy.wait('@createUser')\n  // ...or make an assertion:\n  .its('request.headers')\n  .should('have.property', 'x-custom-header', 'added by cy.intercept')\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The request modification cannot be verified by inspecting the browser's network\ntraffic (for example, in Chrome DevTools), since the browser logs network\ntraffic ",(0,r.kt)("em",{parentName:"p"},"before")," Cypress can intercept it.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," cannot be debugged using\n",(0,r.kt)("a",{parentName:"p",href:"/api/commands/request"},(0,r.kt)("inlineCode",{parentName:"a"},"cy.request()")),"! Cypress only intercepts requests made\nby your front-end application.")),(0,r.kt)("h4",{id:"Controlling-the-response"},"Controlling the response"),(0,r.kt)("p",null,"The intercepted request passed to the route handler (hereafter referred to as\n",(0,r.kt)("inlineCode",{parentName:"p"},"req"),", though you can use any name) contains methods to dynamically control the\nresponse to a request:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"req.reply()")," - stub out a response requiring no dependency on a real back-end"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"req.continue()")," - modify or make assertions on the real response"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"req.destroy()")," - destroy the request and respond with a network error"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"req.redirect()")," - respond to the request with a redirect to a specified\nlocation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"req.on()")," - modify the response by attaching to events")),(0,r.kt)("p",null,"Stubbing out a response (",(0,r.kt)("inlineCode",{parentName:"p"},"req.reply()"),"):"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"req.reply()")," takes a ",(0,r.kt)("a",{parentName:"p",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse"))," object as the first\nargument:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// stub out the response without interacting with a real back-end\ncy.intercept('POST', '/users', (req) => {\n  req.reply({\n    headers: {\n      Set-Cookie: 'newUserName=Peter Pan;'\n    },\n    statusCode: 201,\n    body: {\n      name: 'Peter Pan'\n    },\n    delay: 10, // milliseconds\n    throttleKbps: 1000, // to simulate a 3G connection\n    forceNetworkError: false // default\n  })\n})\n\n// stub out a response body using a fixture\ncy.intercept('GET', '/users', (req) => {\n  req.reply({\n    statusCode: 200, // default\n    fixture: 'users.json'\n  })\n})\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse")," objects")," below for more information."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"reply")," method also supports shorthand to avoid having to specify a\n",(0,r.kt)("inlineCode",{parentName:"p"},"StaticResponse")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// equivalent to `req.reply({ body })`\nreq.reply(body)\n\n// equivalent to `req.reply({ body, headers })`\nreq.reply(body, headers)\n\n// equivalent to `req.reply({ statusCode, body, headers})`\nreq.reply(statusCode, body, headers)\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Note: Calling ",(0,r.kt)("inlineCode",{parentName:"p"},"reply()")," will end the request phase and stop the request from\npropagating to the next matching request handler in line. See ",(0,r.kt)("a",{parentName:"p",href:"#Interception-lifecycle"},"Interception\nLifecycle"),".")),(0,r.kt)("p",null,"See also\n",(0,r.kt)("a",{parentName:"p",href:"#Providing-a-stub-response-with-req-reply"},"Providing a stub response with ",(0,r.kt)("inlineCode",{parentName:"a"},"req.reply()"))),(0,r.kt)("p",null,"Modifying the real response (",(0,r.kt)("inlineCode",{parentName:"p"},"continue"),"):"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"continue")," method accepts a function which is passed an object representing\nthe real response being intercepted on its way back to the client (your\nfront-end application)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// pass the request through and make an assertion on\n// the real response\ncy.intercept('POST', '/users', (req) => {\n  req.continue((res) => {\n    expect(res.body).to.include('Peter Pan')\n  })\n})\n")),(0,r.kt)("p",null,"See also ",(0,r.kt)("a",{parentName:"p",href:"#Controlling-the-outbound-request-with-reqcontinue"},"Controlling the outbound request with ",(0,r.kt)("inlineCode",{parentName:"a"},"req.continue()"))),(0,r.kt)("p",null,"Responding with a network error (",(0,r.kt)("inlineCode",{parentName:"p"},"destroy"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// dynamically destroy the request and\n// respond with a network error\ncy.intercept('POST', '/users', (req) => {\n  if (mustDestroy(req)) {\n    req.destroy()\n  }\n\n  function mustDestroy(req) {\n    // code that determines whether to force a network error\n    // based on the contents of `req`\n  }\n})\n")),(0,r.kt)("p",null,"Responding with a new location (",(0,r.kt)("inlineCode",{parentName:"p"},"redirect"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// respond to this request with a redirect to a new 'location'\ncy.intercept('GET', '/users', (req) => {\n  // statusCode defaults to `302`\n  req.redirect('/customers', 301)\n})\n")),(0,r.kt)("p",null,"Responding by listening to events (",(0,r.kt)("inlineCode",{parentName:"p"},"on"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('GET', '/users', (req) => {\n  req.on('before:response', (res) => {\n    // do something when the `before:response` event is triggered\n  })\n})\ncy.intercept('POST', '/users', (req) => {\n  req.on('response', (res) => {\n    // do something when the `response` event is triggered\n  })\n})\n")),(0,r.kt)("p",null,"See example for\n",(0,r.kt)("a",{parentName:"p",href:"#Throttle-or-delay-response-all-incoming-responses"},"throttling a response")," See\nmore examples of ",(0,r.kt)("a",{parentName:"p",href:"#Request-events"},"events")),(0,r.kt)("h4",{id:"Returning-a-Promise-2"},"Returning a Promise"),(0,r.kt)("p",null,"If a Promise is returned from the route callback, it will be awaited before\ncontinuing with the request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('POST', '/users', (req) => {\n  // asynchronously fetch test data\n  return getAuthToken().then((token) => {\n    // ...and apply it to the outgoing request\n    req.headers['Authorization'] = `Basic ${token}`\n  })\n})\n\ncy.intercept('POST', '/users', (req) => {\n  req.continue((res) => {\n    // the response will not be sent to the browser until\n    // `waitForSomething()` resolves:\n    return waitForSomething()\n  })\n})\n")),(0,r.kt)("h4",{id:"Stubbing-a-response-with-a-string"},"Stubbing a response with a string"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// requests to create a user will be fulfilled\n// with a body of 'success'\ncy.intercept('POST', '/users', 'success')\n// { body: 'sucess' }\n")),(0,r.kt)("h2",{id:"Intercepted-requests"},"Intercepted requests"),(0,r.kt)("p",null,"If a function is passed as the handler for a ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()"),", it will be called\nwith the first argument being an object that represents the intercepted HTTP\nrequest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/api', (req) => {\n  // `req` represents the intercepted HTTP request\n})\n")),(0,r.kt)("p",null,"From here, you can do several things with the intercepted request:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"you can modify and assert on the request's properties (body, headers, URL,\nmethod...)"),(0,r.kt)("li",{parentName:"ul"},"the request can be sent to the real upstream server",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"optionally, you can intercept the response from this"))),(0,r.kt)("li",{parentName:"ul"},"a response can be provided to stub out the request"),(0,r.kt)("li",{parentName:"ul"},"listeners can be attached to various events on the request")),(0,r.kt)("h3",{id:"Request-object-properties"},"Request object properties"),(0,r.kt)("p",null,"The request object (",(0,r.kt)("inlineCode",{parentName:"p"},"req"),") has several properties from the HTTP request itself:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  /**\n   * The body of the request.\n   * If a JSON Content-Type was used and the body was valid JSON,\n   * this will be an object.\n   * If the body was binary content, this will be a buffer.\n   */\n  body: string | object | any\n  /**\n   * The headers of the request.\n   */\n  headers: { [key: string]: string }\n  /**\n   * Request HTTP method (GET, POST, ...).\n   */\n  method: string\n  /**\n   * Request URL.\n   */\n  url: string\n  /**\n   * URL query string as object.\n   */\n  query: Record<string, string|number>\n  /**\n   * The HTTP version used in the request. Read only.\n   */\n  httpVersion: string\n  /**\n   * The resource type of the request. Read only.\n   */\n  resourceType: 'document' | 'fetch' | 'xhr' | 'websocket' | 'stylesheet'\n              | 'script' | 'image' | 'font' | 'cspviolationreport' | 'ping'\n              | 'manifest' | 'other'\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"req")," also has some optional properties which can be set to control\nCypress-specific behavior:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  /**\n   * If provided, the number of milliseconds before an upstream\n   * response to this request will time out and cause an error.\n   * By default, `responseTimeout` from config is used.\n   */\n  responseTimeout?: number\n  /**\n   * Set if redirects should be followed when this request is made.\n   * By default, requests will not follow redirects before\n   * yielding the response (the 3xx redirect is yielded).\n   */\n  followRedirect?: boolean\n  /**\n   * If set, `cy.wait` can be used to await the request/response\n   * cycle to complete for this request via `cy.wait('@alias')`.\n   */\n  alias?: string\n}\n")),(0,r.kt)("p",null,"Any modifications to the properties of ",(0,r.kt)("inlineCode",{parentName:"p"},"req")," will be persisted to other request\nhandlers, and finally merged into the actual outbound HTTP request."),(0,r.kt)("h3",{id:"Controlling-the-outbound-request-with-reqcontinue"},"Controlling the outbound request with ",(0,r.kt)("inlineCode",{parentName:"h3"},"req.continue()")),(0,r.kt)("p",null,"Calling ",(0,r.kt)("inlineCode",{parentName:"p"},"req.continue()")," without any argument will cause the request to be sent\noutgoing, and the response will be returned to the browser after any other\nlisteners have been called. For example, the following code modifies a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST"),"\nrequest and then sends it to the upstream server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('POST', '/submitStory', (req) => {\n  req.body.storyName = 'some name'\n  // send the modified request and skip any other\n  // matching request handlers\n  req.continue()\n})\n")),(0,r.kt)("p",null,"If a function is passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"req.continue()"),", the request will be sent to the\nreal upstream server, and the callback will be called with the response once the\nresponse is fully received from the server. See ",(0,r.kt)("a",{parentName:"p",href:"#Intercepted-responses"},'"Intercepted responses"')),(0,r.kt)("p",null,"Note: calling ",(0,r.kt)("inlineCode",{parentName:"p"},"req.continue()")," will stop the request from propagating to the\nnext matching request handler in line. See ",(0,r.kt)("a",{parentName:"p",href:"#Interception-lifecycle"},'"Interception lifecycle"'),"\nfor more information."),(0,r.kt)("h3",{id:"Providing-a-stub-response-with-reqreply"},"Providing a stub response with ",(0,r.kt)("inlineCode",{parentName:"h3"},"req.reply()")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"req.reply()")," function can be used to send a stub response for an\nintercepted request. By passing a string, object, or\n",(0,r.kt)("a",{parentName:"p",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse"))," to ",(0,r.kt)("inlineCode",{parentName:"p"},"req.reply()"),", the request can be\npreventing from reaching the destination server."),(0,r.kt)("p",null,"For example, the following code stubs out a JSON response from a request\ninterceptor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/billing', (req) => {\n  // dynamically get billing plan name at request-time\n  const planName = getPlanName()\n  // this object will automatically be JSON.stringified and\n  // sent as the response\n  req.reply({ plan: planName })\n})\n")),(0,r.kt)("p",null,"Instead of passing a plain object or string to ",(0,r.kt)("inlineCode",{parentName:"p"},"req.reply()"),", you can also pass\na ",(0,r.kt)("a",{parentName:"p",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse"))," object. With a\n",(0,r.kt)("a",{parentName:"p",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse")),", you can force a network error,\ndelay/throttle the response, send a fixture, and more."),(0,r.kt)("p",null,"For example, the following code serves a dynamically chosen fixture with a delay\nof 500ms:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/api/users/*', async (req) => {\n  // asynchronously retrieve fixture filename at request-time\n  const fixtureFilename = await getFixtureFilenameForUrl(req.url)\n  req.reply({\n    fixture: fixtureFilename,\n    delay: 500,\n  })\n})\n")),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse")," documentation")," for more information on\nstubbing responses in this manner."),(0,r.kt)("h4",{id:"reqreply-shorthand"},(0,r.kt)("inlineCode",{parentName:"h4"},"req.reply()")," shorthand"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"req.reply()")," also supports shorthand, similar to ",(0,r.kt)("a",{parentName:"p",href:"#Ending-the-response-with-res-send"},(0,r.kt)("inlineCode",{parentName:"a"},"res.send()")),", to\navoid having to specify a ",(0,r.kt)("inlineCode",{parentName:"p"},"StaticResponse")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// equivalent to `req.reply({ body })`\nreq.reply(body)\n\n// equivalent to `req.reply({ body, headers })`\nreq.reply(body, headers)\n\n// equivalent to `req.reply({ statusCode, body, headers})`\nreq.reply(statusCode, body, headers)\n")),(0,r.kt)("h4",{id:"Convenience-functions"},"Convenience functions"),(0,r.kt)("p",null,"There are also two convenience functions available on ",(0,r.kt)("inlineCode",{parentName:"p"},"req"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  /**\n   * Destroy the request and respond with a network error.\n   */\n  destroy(): void\n  /**\n   * Respond to this request with a redirect to a new 'location'.\n   * @param statusCode HTTP status code to redirect with. Default: 302\n   */\n  redirect(location: string, statusCode?: number): void\n}\n")),(0,r.kt)("p",null,"See examples in the ",(0,r.kt)("a",{parentName:"p",href:"#Controlling-the-response"},"Controlling the response"),"\nsection"),(0,r.kt)("p",null,"Note: calling ",(0,r.kt)("inlineCode",{parentName:"p"},"req.reply()")," will end the request phase and stop the request from\npropagating to the next matching request handler in line. See ",(0,r.kt)("a",{parentName:"p",href:"#Interception-lifecycle"},'"Interception\nlifecycle"')," for more information."),(0,r.kt)("h3",{id:"Request-events"},"Request events"),(0,r.kt)("p",null,"For advanced use, several events are available on ",(0,r.kt)("inlineCode",{parentName:"p"},"req"),", that represent\ndifferent stages of the ",(0,r.kt)("a",{parentName:"p",href:"#Interception-lifecycle"},"Interception lifecycle"),"."),(0,r.kt)("p",null,"By calling ",(0,r.kt)("inlineCode",{parentName:"p"},"req.on"),", you can subscribe to different events:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/shop', (req) => {\n  req.on('before:response', (res) => {\n    /**\n     * Emitted before `response` and before any `req.continue`\n     * handlers. Modifications to `res` will be applied to the\n     * incoming response. If a promise is returned, it will be\n     * awaited before processing other event handlers.\n     */\n  })\n\n  req.on('response', (res) => {\n    /**\n     * Emitted after `before:response` and after any\n     * `req.continue` handlers - before the response is sent\n     * to the browser. Modifications to `res` will be applied\n     * to the incoming response. If a promise is returned, it\n     * will be awaited before processing other event handlers.\n     */\n  })\n\n  req.on('after:response', (res) => {\n    /**\n     * Emitted once the response to a request has finished\n     * sending to the browser. Modifications to `res` have no\n     * impact. If a promise is returned, it will be awaited\n     * before processing other event handlers.\n     */\n  })\n})\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#Intercepted-responses"},'"Intercepted responses"')," for more details on the ",(0,r.kt)("inlineCode",{parentName:"p"},"res")," object yielded\nby ",(0,r.kt)("inlineCode",{parentName:"p"},"before:response")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"response"),". See ",(0,r.kt)("a",{parentName:"p",href:"#Interception-lifecycle"},'"Interception lifecycle"'),"\nfor more details on request ordering."),(0,r.kt)("h2",{id:"Intercepted-responses"},"Intercepted responses"),(0,r.kt)("p",null,"The response can be intercepted in two ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"by passing a callback to ",(0,r.kt)("a",{parentName:"li",href:"#Controlling-the-outbound-request-with-reqcontinue"},(0,r.kt)("inlineCode",{parentName:"a"},"req.continue()"))," within a request\nhandler"),(0,r.kt)("li",{parentName:"ul"},"by listening for the ",(0,r.kt)("inlineCode",{parentName:"li"},"before:response")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"response")," request events (see\n",(0,r.kt)("a",{parentName:"li",href:"#Request-events"},'"Request events"'),")")),(0,r.kt)("p",null,"The response object, ",(0,r.kt)("inlineCode",{parentName:"p"},"res"),", will be passed as the first argument to the handler\nfunction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/url', (req) => {\n  req.on('before:response', (res) => {\n    // this will be called before any `req.continue` or\n    // `response` handlers\n  })\n\n  req.continue((res) => {\n    // this will be called after all `before:response`\n    // handlers and before any `response` handlers\n    // by calling `req.continue`, we signal that this\n    // request handler will be the last one, and that\n    // the request should be sent outgoing at this point.\n    // for that reason, there can only be one\n    // `req.continue` handler per request.\n  })\n\n  req.on('response', (res) => {\n    // this will be called after all `before:response`\n    // handlers and after the `req.continue` handler\n    // but before the response is sent to the browser\n  })\n})\n")),(0,r.kt)("h3",{id:"Response-object-properties"},"Response object properties"),(0,r.kt)("p",null,"The response object (",(0,r.kt)("inlineCode",{parentName:"p"},"res"),") yielded to response handlers has several properties\nfrom the HTTP response itself. All of the following properties on ",(0,r.kt)("inlineCode",{parentName:"p"},"res")," can be\nmodified:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"body"),(0,r.kt)("td",{parentName:"tr",align:null},"response body (",(0,r.kt)("inlineCode",{parentName:"td"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ArrayBuffer"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"headers"),(0,r.kt)("td",{parentName:"tr",align:null},"response headers (",(0,r.kt)("inlineCode",{parentName:"td"},"object"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"statusCode"),(0,r.kt)("td",{parentName:"tr",align:null},"response status code (",(0,r.kt)("inlineCode",{parentName:"td"},"number"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"statusMessage"),(0,r.kt)("td",{parentName:"tr",align:null},"response status message (",(0,r.kt)("inlineCode",{parentName:"td"},"string"),")")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note about ",(0,r.kt)("inlineCode",{parentName:"strong"},"body"),":")," If the response header contains\n",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Type: application/json")," and the body contains valid JSON, this will be\nan ",(0,r.kt)("inlineCode",{parentName:"p"},"object"),". And if the body contains binary content, this will be a buffer."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"res")," also has some optional properties which can be set to control\nCypress-specific behavior:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"throttleKbps"),(0,r.kt)("td",{parentName:"tr",align:null},"Maximum data transfer rate of the response (kilobits/second)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delay"),(0,r.kt)("td",{parentName:"tr",align:null},"Minimum network latency or delay to add to the response time (milliseconds)")))),(0,r.kt)("p",null,"Any modifications to the properties of ",(0,r.kt)("inlineCode",{parentName:"p"},"res")," will be persisted to other response\nhandlers, and finally merged into the actual incoming HTTP response."),(0,r.kt)("h3",{id:"Ending-the-response-with-ressend"},"Ending the response with ",(0,r.kt)("inlineCode",{parentName:"h3"},"res.send()")),(0,r.kt)("p",null,"To end the response phase of the request, call ",(0,r.kt)("inlineCode",{parentName:"p"},"res.send()"),". Optionally, you can\npass a ",(0,r.kt)("a",{parentName:"p",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse"))," to ",(0,r.kt)("inlineCode",{parentName:"p"},"res.send()"),", to be merged with the\nactual response."),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"res.send()")," is called, the response phase will end immediately and no\nother response handlers will be called for the current request. Here is an\nexample of how ",(0,r.kt)("inlineCode",{parentName:"p"},"res.send()")," could be used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/notification', (req) => {\n  req.continue((res) => {\n    if (res.body.status === 'failed') {\n      // sends a fixture body instead of the existing 'res.body'\n      res.send({ fixture: 'success.json' })\n    }\n  })\n})\n")),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse")," documentation")," for more information on\nthe format."),(0,r.kt)("h4",{id:"ressend-shorthand"},(0,r.kt)("inlineCode",{parentName:"h4"},"res.send()")," shorthand"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"res.send()")," also supports shorthand, similar to ",(0,r.kt)("a",{parentName:"p",href:"#Providing-a-stub-response-with-reqreply"},(0,r.kt)("inlineCode",{parentName:"a"},"req.reply()")),", to\navoid having to specify a ",(0,r.kt)("inlineCode",{parentName:"p"},"StaticResponse")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// equivalent to `res.send({ body })`\nres.send(body)\n\n// equivalent to `res.send({ body, headers })`\nres.send(body, headers)\n\n// equivalent to `res.send({ statusCode, body, headers})`\nres.send(statusCode, body, headers)\n")),(0,r.kt)("h4",{id:"Convenience-functions-1"},"Convenience functions"),(0,r.kt)("p",null,"There are also two convenience functions available on ",(0,r.kt)("inlineCode",{parentName:"p"},"res"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  /**\n   * Wait for 'delay' milliseconds before sending the\n   * response to the client.\n   */\n  setDelay: (delay: number) => IncomingHttpResponse\n  /**\n   * Serve the response at 'throttleKbps' kilobytes per second.\n   */\n  setThrottle: (throttleKbps: number) => IncomingHttpResponse\n}\n")),(0,r.kt)("p",null,"Note: calling ",(0,r.kt)("inlineCode",{parentName:"p"},"res.send()")," will end the response phase and stop the response\nfrom propagating to the next matching response handler in line. See\n",(0,r.kt)("a",{parentName:"p",href:"#Interception-lifecycle"},'"Interception lifecycle"')," for more information."),(0,r.kt)("h2",{id:"StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"h2"},"StaticResponse")," objects"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"StaticResponse")," represents a\n",(0,r.kt)("a",{parentName:"p",href:"#Stubbing-a-response"},"statically defined response (stub)"),"."),(0,r.kt)("p",null,"The following properties are available on ",(0,r.kt)("inlineCode",{parentName:"p"},"StaticResponse"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"statusCode"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP response status code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"headers"),(0,r.kt)("td",{parentName:"tr",align:null},"HTTP response headers")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"body"),(0,r.kt)("td",{parentName:"tr",align:null},"Serve a static response body (",(0,r.kt)("inlineCode",{parentName:"td"},"object"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"ArrayBuffer"),") (when ",(0,r.kt)("inlineCode",{parentName:"td"},"fixture")," is omitted).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fixture"),(0,r.kt)("td",{parentName:"tr",align:null},"Serve a fixture as the HTTP response body (allowed when ",(0,r.kt)("inlineCode",{parentName:"td"},"body")," is omitted). Read the contents with an encoding other than the ",(0,r.kt)("a",{parentName:"td",href:"/api/commands/fixture#Encoding"},"default for the file type"),", pass the fixture like ",(0,r.kt)("inlineCode",{parentName:"td"},"path,encoding"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"forceNetworkError"),(0,r.kt)("td",{parentName:"tr",align:null},"Force an error by destroying the browser connection")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delay"),(0,r.kt)("td",{parentName:"tr",align:null},"Minimum network latency or delay to add to the response time (milliseconds)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"throttleKbps"),(0,r.kt)("td",{parentName:"tr",align:null},"Maximum data transfer rate of the response (kilobits/second)")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," All properties are optional."),(0,r.kt)("p",null,"You can supply a ",(0,r.kt)("inlineCode",{parentName:"p"},"StaticResponse")," to Cypress in 3 ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("inlineCode",{parentName:"li"},"cy.intercept()")," as\n",(0,r.kt)("a",{parentName:"li",href:"#staticResponse-lt-code-gtStaticResponselt-code-gt"},(0,r.kt)("inlineCode",{parentName:"a"},"an argument")),", to stub a\nresponse to a route: ",(0,r.kt)("inlineCode",{parentName:"li"},"cy.intercept('/url', staticResponse)")),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("a",{parentName:"li",href:"#Providing-a-stub-response-with-reqreply"},(0,r.kt)("inlineCode",{parentName:"a"},"req.reply()")),", to stub a response from a request handler:\n",(0,r.kt)("inlineCode",{parentName:"li"},"req.reply(staticResponse)")),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("a",{parentName:"li",href:"#Ending-the-response-with-res-send"},(0,r.kt)("inlineCode",{parentName:"a"},"res.send()")),", to stub a response from a response handler:\n",(0,r.kt)("inlineCode",{parentName:"li"},"res.send(staticResponse)"))),(0,r.kt)("p",null,"See\n",(0,r.kt)("a",{parentName:"p",href:"#With-a-StaticResponse-object"},'"Stubbing a response with a ',(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse"),' object"'),"\nfor examples of stubbing with ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()"),"."),(0,r.kt)("h2",{id:"Interception-lifecycle"},"Interception lifecycle"),(0,r.kt)("p",null,"The lifecycle of a ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," interception begins when an HTTP request is\nsent from your app that matches one or more registered ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," routes.\nFrom there, each interception has two phases: request and response."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," routes are matched in reverse order of definition, except for\nroutes which are defined with ",(0,r.kt)("inlineCode",{parentName:"p"},"{ middleware: true }"),", which always run first.\nThis allows you to override existing ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," declarations by defining\nan overlapping ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()"),":"),(0,r.kt)(u,{src:"/img/api/intercept/middleware-algo.png",alt:"Middleware Algorithm",mdxType:"DocsImage"}),(0,r.kt)("h3",{id:"Request-phase"},"Request phase"),(0,r.kt)("p",null,"The following steps are used to handle the request phase."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Start with the first matching route according to the above algorithm\n(middleware first, followed by handlers in reverse order)."),(0,r.kt)("li",{parentName:"ol"},"Was a handler (body, ",(0,r.kt)("a",{parentName:"li",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse")),", or function)\nsupplied to ",(0,r.kt)("inlineCode",{parentName:"li"},"cy.intercept()"),"? If not, continue to step 7."),(0,r.kt)("li",{parentName:"ol"},"If the handler was a body or ",(0,r.kt)("a",{parentName:"li",href:"#StaticResponse-objects"},(0,r.kt)("inlineCode",{parentName:"a"},"StaticResponse")),", immediately\nend the request with that response."),(0,r.kt)("li",{parentName:"ol"},"If the handler was a function, call the function with ",(0,r.kt)("inlineCode",{parentName:"li"},"req"),", the incoming\nrequest, as the first argument. See ",(0,r.kt)("a",{parentName:"li",href:"#Intercepted-requests"},'"Intercepted requests"')," for more\ninformation on the ",(0,r.kt)("inlineCode",{parentName:"li"},"req")," object.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("a",{parentName:"li",href:"#Providing-a-stub-response-with-reqreply"},(0,r.kt)("inlineCode",{parentName:"a"},"req.reply()"))," is called, immediately end the request phase\nwith the provided response. See\n",(0,r.kt)("a",{parentName:"li",href:"#Providing-a-stub-response-with-req-reply"},'"Providing a stub response with ',(0,r.kt)("inlineCode",{parentName:"a"},"req.reply()"),'"'),"."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("a",{parentName:"li",href:"#Controlling-the-outbound-request-with-reqcontinue"},(0,r.kt)("inlineCode",{parentName:"a"},"req.continue()"))," is called, immediately end the request\nphase, and send the request to the destination server. If a callback is\nprovided to ",(0,r.kt)("a",{parentName:"li",href:"#Controlling-the-outbound-request-with-reqcontinue"},(0,r.kt)("inlineCode",{parentName:"a"},"req.continue()")),", it will be called during the\n",(0,r.kt)("a",{parentName:"li",href:"#Response-phase"},"response phase")))),(0,r.kt)("li",{parentName:"ol"},"If the handler returned a Promise, wait for the Promise to resolve."),(0,r.kt)("li",{parentName:"ol"},"Merge any modifications to the request object with the real request."),(0,r.kt)("li",{parentName:"ol"},"If there is another matching ",(0,r.kt)("inlineCode",{parentName:"li"},"cy.intercept()"),", return to step 2 and continue\nfollowing steps with that route."),(0,r.kt)("li",{parentName:"ol"},"Send the request outgoing to the destination server and end the request\nphase. The ",(0,r.kt)("a",{parentName:"li",href:"#Response-phase"},"response phase")," will begin once a response is\nreceived.")),(0,r.kt)("h3",{id:"Response-phase"},"Response phase"),(0,r.kt)("p",null,"Once the HTTP response is received from the upstream server, the following steps\nare applied:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Get a list of registered ",(0,r.kt)("inlineCode",{parentName:"li"},"before:response")," event listeners."),(0,r.kt)("li",{parentName:"ol"},"For each ",(0,r.kt)("inlineCode",{parentName:"li"},"before:response")," listener (if any), call it with the ",(0,r.kt)("a",{parentName:"li",href:"#Intercepted-responses"},(0,r.kt)("inlineCode",{parentName:"a"},"res")),"\nobject.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("a",{parentName:"li",href:"#Ending-the-response-with-res-send"},(0,r.kt)("inlineCode",{parentName:"a"},"res.send()"))," is called, end the response phase and merge any\npassed arguments with the response."),(0,r.kt)("li",{parentName:"ul"},"If a Promise is returned, await it. Merge any modified response properties\nwith the real response."))),(0,r.kt)("li",{parentName:"ol"},"If a ",(0,r.kt)("inlineCode",{parentName:"li"},"req.continue()")," with callback is declared for this route, call the\ncallback with the ",(0,r.kt)("a",{parentName:"li",href:"#Intercepted-responses"},(0,r.kt)("inlineCode",{parentName:"a"},"res"))," object.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("a",{parentName:"li",href:"#Ending-the-response-with-res-send"},(0,r.kt)("inlineCode",{parentName:"a"},"res.send()"))," is called, end the response phase and merge any\npassed arguments with the response."),(0,r.kt)("li",{parentName:"ul"},"If a Promise is returned, await it. Merge any modified response properties\nwith the real response."))),(0,r.kt)("li",{parentName:"ol"},"Get a list of registered ",(0,r.kt)("inlineCode",{parentName:"li"},"response")," event listeners."),(0,r.kt)("li",{parentName:"ol"},"For each ",(0,r.kt)("inlineCode",{parentName:"li"},"response")," listener (if any), call it with the ",(0,r.kt)("a",{parentName:"li",href:"#Intercepted-responses"},(0,r.kt)("inlineCode",{parentName:"a"},"res"))," object.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("a",{parentName:"li",href:"#Ending-the-response-with-res-send"},(0,r.kt)("inlineCode",{parentName:"a"},"res.send()"))," is called, end the response phase and merge any\npassed arguments with the response."),(0,r.kt)("li",{parentName:"ul"},"If a Promise is returned, await it. Merge any modified response properties\nwith the real response."))),(0,r.kt)("li",{parentName:"ol"},"Send the response to the browser."),(0,r.kt)("li",{parentName:"ol"},"Once the response is complete, get a list of registered ",(0,r.kt)("inlineCode",{parentName:"li"},"after:response"),"\nevent listeners."),(0,r.kt)("li",{parentName:"ol"},"For each ",(0,r.kt)("inlineCode",{parentName:"li"},"after:response")," listener (if any), call it with the ",(0,r.kt)("a",{parentName:"li",href:"#Intercepted-responses"},(0,r.kt)("inlineCode",{parentName:"a"},"res")),"\nobject (minus ",(0,r.kt)("inlineCode",{parentName:"li"},"res.send"),")",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If a Promise is returned, await it."))),(0,r.kt)("li",{parentName:"ol"},"End the response phase.")),(0,r.kt)("h2",{id:"Glob-Pattern-Matching-URLs"},"Glob Pattern Matching URLs"),(0,r.kt)("p",null,"When ",(0,r.kt)("a",{parentName:"p",href:"#Matching-url"},"matching a URL"),", providing an exact URL to match can be too\nrestrictive. For example, what if you wanted to run your tests on a different\nhost?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// match any request that exactly matches the URL\ncy.intercept('https://prod.cypress.io/users')\n// matches this: https://prod.cypress.io/users\n// ...but not this: https://staging.cypress.io/users\n// ...or this: http://localhost/users\n")),(0,r.kt)("p",null,"Glob pattern matching provides the necessary flexibility:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"cy.intercept('/users')\n// matches all of these:\n//   https://prod.cypress.io/users\n//   https://staging.cypress.io/users\n//   http://localhost/users\n\ncy.intercept('/users?_limit=+(3|5)')\n// matches all of these:\n//   https://prod.cypress.io/users?_limit=3\n//   http://localhost/users?_limit=5\n")),(0,r.kt)("h3",{id:"Cypressminimatch"},"Cypress.minimatch"),(0,r.kt)("p",null,"Under the hood, ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept")," uses the ",(0,r.kt)("a",{parentName:"p",href:"/api/utilities/minimatch"},"minimatch"),"\nlibrary with the ",(0,r.kt)("inlineCode",{parentName:"p"},"{ matchBase: true }")," option applied for glob matching and\nprovides access to it via the ",(0,r.kt)("inlineCode",{parentName:"p"},"Cypress")," global. This enables you to test your\npattern in your spec or in the Cypress browser console."),(0,r.kt)("p",null,"You can invoke the ",(0,r.kt)("inlineCode",{parentName:"p"},"Cypress.minimatch")," with just two arguments - the URL\n(",(0,r.kt)("inlineCode",{parentName:"p"},"string"),") and the pattern (",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"), respectively - and if it yields ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),",\nthen you have a match!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"expect(\n  Cypress.minimatch('http://localhost/users?_limit=3', '**/users?_limit=+(3|5)')\n).to.be.true\nexpect(\n  Cypress.minimatch('http://localhost/users?_limit=5', '/users?_limit=+(3|5)', {\n    matchBase: true,\n  })\n).to.be.true\nexpect(\n  Cypress.minimatch('http://localhost/users?_limit=7', '**/users?_limit=+(3|5)')\n).to.be.false\n")),(0,r.kt)("h4",{id:"minimatch-options"},"minimatch options"),(0,r.kt)("p",null,"You can also pass in options (",(0,r.kt)("inlineCode",{parentName:"p"},"object"),") as the third argument, one of which is\n",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," which if set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", will yield verbose output that could help you\nunderstand why your pattern isn't working as you expect:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"Cypress.minimatch('http://localhost/users?_limit=3', '**/users?_limit=+(3|5)', {\n  debug: true,\n})\n// true (plus debug messages)\n")),(0,r.kt)("h2",{id:"cyintercept-and-request-caching"},(0,r.kt)("inlineCode",{parentName:"h2"},"cy.intercept()")," and request caching"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," intercepts requests at the network layer. This can cause\nconfusion when trying to intercept a request that has already been cached by the\nbrowser. If a request is served from the browser cache, it will never hit the\nnetwork layer, and ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," will never fire."),(0,r.kt)("p",null,"To see if this is affecting your app, check the Developer Tools. In the\nfollowing example, all of the requests circled in red have been served from\ncache, and will not send an HTTP request. Thus, they cannot be intercepted by\n",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()"),":"),(0,r.kt)(u,{src:"/img/api/intercept/devtools-cached-responses.png",alt:"Screenshot of Chrome DevTools showing cached responses.",mdxType:"DocsImage"}),(0,r.kt)("p",null,"If you would like to intercept resources that normally send cache headers, here\nare some workarounds:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Turn off cache headers on your development server when in testing mode."),(0,r.kt)("li",{parentName:"ul"},"Disable caching on responses by adding a top-level ",(0,r.kt)("inlineCode",{parentName:"li"},"cy.intercept()")," that\nremoves cache headers from desired requests. For example:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"beforeEach(() => {\n  cy.intercept(\n    'https://api.example.com/**/*',\n    { middleware: true },\n    (req) => {\n      req.on('before:response', (res) => {\n        // force all API responses to not be cached\n        res.headers['cache-control'] = 'no-store'\n      })\n    }\n  )\n})\n"))),(0,r.kt)("li",{parentName:"ul"},"Chromium-family browsers only: Use ",(0,r.kt)("inlineCode",{parentName:"li"},"remote:debugger:protocol")," to disable cache\nentirely. For more information, see\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress/issues/14459#issuecomment-768616195"},"this comment on issue #14459"))),(0,r.kt)("h2",{id:"Command-Log"},"Command Log"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.intercept('/accounts*').as('accountsGet')\ncy.intercept('/company', { companyId: 1 }).as('companyGet')\ncy.intercept('/teams*', [{ teamId: 2 }]).as('teamsGet')\n")),(0,r.kt)("p",null,"Whenever you create ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," rules, Cypress will display a new\nInstrument Panel called ",(0,r.kt)("em",{parentName:"p"},"Routes"),". It will list the routing table in the\nInstrument Panel, including the ",(0,r.kt)("inlineCode",{parentName:"p"},"method"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"RouteMatcher"),", if the route is\nstubbed, any alias, and number of matched requests:"),(0,r.kt)(u,{src:"/img/api/intercept/command-log-routes-ui.png",alt:"Screenshot of Command Log Routes UI",mdxType:"DocsImage"}),(0,r.kt)("p",null,"When HTTP requests are made, Cypress will log them in the Command Log and\nindicate whether they matched a ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," by the presence of a yellow\nbadge on the right hand side:"),(0,r.kt)(u,{src:"/img/api/intercept/command-log-fetches.png",alt:"Screenshot of example fetches",mdxType:"DocsImage"}),(0,r.kt)("p",null,"The circular indicator is filled if the request went to the destination server,\nbut unfilled if the request was stubbed with a response."),(0,r.kt)("p",null,"Clicking on a request that matched a ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.intercept()")," will print additional\ninformation about the request and response to the console:"),(0,r.kt)(u,{src:"/img/api/intercept/console-props.png",alt:"Screenshot of cy.intercept console output",mdxType:"DocsImage"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/guides/guides/network-requests#Command-Log"},"Read more about request logging in Cypress.")),(0,r.kt)("h2",{id:"History"},"History"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/guides/references/changelog#12-2-0"},"12.2.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Added ",(0,r.kt)("inlineCode",{parentName:"td"},"resourceType")," property to ",(0,r.kt)("inlineCode",{parentName:"td"},"req")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"RouteMatcher"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/guides/references/changelog#7-0-0"},"7.6.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Added ",(0,r.kt)("inlineCode",{parentName:"td"},"query")," option to ",(0,r.kt)("inlineCode",{parentName:"td"},"req")," (The incoming request object yielded to request handler functions).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/guides/references/changelog#7-0-0"},"7.0.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Removed ",(0,r.kt)("inlineCode",{parentName:"td"},"matchUrlAgainstPath")," option from ",(0,r.kt)("inlineCode",{parentName:"td"},"RouteMatcher"),", reversed handler ordering, added request events, removed substring URL matching, removed ",(0,r.kt)("inlineCode",{parentName:"td"},"cy.route2")," alias, added ",(0,r.kt)("inlineCode",{parentName:"td"},"middleware")," RouteMatcher option, renamed ",(0,r.kt)("inlineCode",{parentName:"td"},"res.delay()")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"res.setDelay()")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"res.throttle()")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"res.setThrottle()"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/guides/references/changelog#6-4-0"},"6.4.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Renamed ",(0,r.kt)("inlineCode",{parentName:"td"},"delayMs")," property to ",(0,r.kt)("inlineCode",{parentName:"td"},"delay")," (backwards-compatible).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/guides/references/changelog#6-2-0"},"6.2.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Added ",(0,r.kt)("inlineCode",{parentName:"td"},"matchUrlAgainstPath")," option to ",(0,r.kt)("inlineCode",{parentName:"td"},"RouteMatcher"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/guides/references/changelog#6-0-0"},"6.0.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Renamed ",(0,r.kt)("inlineCode",{parentName:"td"},"cy.route2()")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"cy.intercept()"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/guides/references/changelog#6-0-0"},"6.0.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Removed ",(0,r.kt)("inlineCode",{parentName:"td"},"experimentalNetworkStubbing")," option and made it the default behavior.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/guides/references/changelog#5-1-0"},"5.1.0")),(0,r.kt)("td",{parentName:"tr",align:null},"Added experimental ",(0,r.kt)("inlineCode",{parentName:"td"},"cy.route2()")," command under ",(0,r.kt)("inlineCode",{parentName:"td"},"experimentalNetworkStubbing")," option.")))),(0,r.kt)("h2",{id:"See-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/commands/as"},(0,r.kt)("inlineCode",{parentName:"a"},".as()"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/commands/wait"},(0,r.kt)("inlineCode",{parentName:"a"},"cy.wait()"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/guides/guides/network-requests"},"Network Requests Guide")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress-example-recipes#stubbing-and-spying"},"Cypress Example Recipes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/cypress-io/cypress-example-kitchensink/blob/master/cypress/e2e/2-advanced-examples/network_requests.cy.js"},"Kitchen Sink Examples")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/smart-graphql-stubbing/"},"Smart GraphQL Stubbing in Cypress"),"\nblog post"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://slides.com/bahmutov/how-cy-intercept-works"},"How cy.intercept works")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://glebbahmutov.com/blog/cypress-intercept-problems/"},"Cypress ",(0,r.kt)("inlineCode",{parentName:"a"},"cy.intercept()")," Problems"))))}m.isMDXComponent=!0}}]);