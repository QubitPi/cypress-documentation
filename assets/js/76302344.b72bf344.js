"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[3520],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,k=m["".concat(p,".").concat(u)]||m[u]||c[u]||r;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},676:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>k,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={title:"type",slug:"/api/commands/type"},l=void 0,o={unversionedId:"api/actions/type",id:"api/actions/type",title:"type",description:"Type into a DOM element.",source:"@site/docs/api/actions/type.mdx",sourceDirName:"api/actions",slug:"/api/commands/type",permalink:"/cypress-documentation/api/commands/type",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/actions/type.mdx",tags:[],version:"current",lastUpdatedAt:1702621628,formattedLastUpdatedAt:"Dec 15, 2023",frontMatter:{title:"type",slug:"/api/commands/type"},sidebar:"api",previous:{title:"trigger",permalink:"/cypress-documentation/api/commands/trigger"},next:{title:"uncheck",permalink:"/cypress-documentation/api/commands/uncheck"}},p={},s=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Arguments",id:"Arguments",level:3},{value:'Yields <Icon name="question-circle"/>',id:"Yields",level:3},{value:"Examples",id:"Examples",level:2},{value:"Input/Textarea",id:"InputTextarea",level:3},{value:"Type into a textarea.",id:"Type-into-a-textarea",level:4},{value:"Type into a login form",id:"Type-into-a-login-form",level:4},{value:"Mimic user typing behavior",id:"Mimic-user-typing-behavior",level:4},{value:"&#39;Selecting&#39; an option from datalist",id:"Selecting-an-option-from-datalist",level:4},{value:"Tabindex",id:"Tabindex",level:3},{value:"Type into a non-input or non-textarea element with <code>tabindex</code>",id:"Type-into-a-non-input-or-non-textarea-element-with-tabindex",level:4},{value:"Date Inputs",id:"Date-Inputs",level:3},{value:"Month Inputs",id:"Month-Inputs",level:3},{value:"Week Inputs",id:"Week-Inputs",level:3},{value:"Time Inputs",id:"Time-Inputs",level:3},{value:"Key Combinations",id:"Key-Combinations",level:3},{value:"Type a key combination",id:"Type-a-key-combination",level:4},{value:"Type literal <code>{</code> or <code>}</code> characters",id:"Type-literal--or--characters",level:4},{value:"Hold down modifier key and type a word",id:"Hold-down-modifier-key-and-type-a-word",level:4},{value:"Release behavior",id:"Release-behavior",level:4},{value:"Global Shortcuts",id:"Global-Shortcuts",level:3},{value:"Use keyboard shortcuts in body",id:"Use-keyboard-shortcuts-in-body",level:4},{value:"Do a shift + click",id:"Do-a-shift--click",level:4},{value:"Options",id:"Options",level:3},{value:"Force typing regardless of its actionable state",id:"Force-typing-regardless-of-its-actionable-state",level:4},{value:"Notes",id:"Notes",level:2},{value:"Supported Elements",id:"Supported-Elements",level:3},{value:"Actionability",id:"Actionability",level:3},{value:"Events",id:"Events",level:3},{value:"When element is not in focus",id:"When-element-is-not-in-focus",level:4},{value:"Events that fire",id:"Events-that-fire",level:4},{value:"Event Firing",id:"Event-Firing",level:4},{value:"Event Cancellation",id:"Event-Cancellation",level:4},{value:"Preventing <code>mousedown</code> does not prevent typing",id:"Preventing-mousedown-does-not-prevent-typing",level:4},{value:"Key Events Table",id:"Key-Events-Table",level:4},{value:"Tabbing",id:"Tabbing",level:3},{value:"Typing <code>tab</code> key does not work",id:"Typing-tab-key-does-not-work",level:4},{value:"Modifiers",id:"Modifiers",level:3},{value:"Modifier effects",id:"Modifier-effects",level:4},{value:"Form Submission",id:"Form-Submission",level:3},{value:"Implicit form submission behavior",id:"Implicit-form-submission-behavior",level:4},{value:"Rules",id:"Rules",level:2},{value:'Requirements <Icon name="question-circle"/>',id:"Requirements",level:3},{value:'Assertions <Icon name="question-circle"/>',id:"Assertions",level:3},{value:'Timeouts <Icon name="question-circle"/>',id:"Timeouts",level:3},{value:"Command Log",id:"Command-Log",level:2},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)},m=d("Icon"),c=d("DocsImage"),u={toc:s};function k(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Type into a DOM element."),(0,i.kt)("p",null,"It is ",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/retry-ability#Only-queries-are-retried"},"unsafe")," to\nchain further commands that rely on the subject after ",(0,i.kt)("inlineCode",{parentName:"p"},".type()"),"."),(0,i.kt)("h2",{id:"Syntax"},"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},".type(text)\n.type(text, options)\n")),(0,i.kt)("h3",{id:"Usage"},"Usage"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(m,{name:"check-circle",color:"green",mdxType:"Icon"})," Correct Usage")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('input').type('Hello, World') // Type 'Hello, World' into the 'input'\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(m,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Incorrect Usage")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.type('Welcome') // Errors, cannot be chained off 'cy'\ncy.clock().type('www.cypress.io') // Errors, 'clock' does not yield DOM elements\n")),(0,i.kt)("h3",{id:"Arguments"},"Arguments"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(m,{name:"angle-right",mdxType:"Icon"})," text")," ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"(String)"))),(0,i.kt)("p",null,"The text to be typed into the DOM element."),(0,i.kt)("p",null,"Text passed to ",(0,i.kt)("inlineCode",{parentName:"p"},".type()")," may include any of the special character sequences\nbelow. These characters will pass along the correct ",(0,i.kt)("inlineCode",{parentName:"p"},"keyCode"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"key"),", and\n",(0,i.kt)("inlineCode",{parentName:"p"},"which")," codes to any events issued during ",(0,i.kt)("inlineCode",{parentName:"p"},".type()"),". Some of the special\ncharacter sequences may perform actions during typing such as ",(0,i.kt)("inlineCode",{parentName:"p"},"{moveToEnd}"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"{moveToStart}"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"{selectAll}"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To disable parsing special characters sequences, set the\n",(0,i.kt)("inlineCode",{parentName:"p"},"parseSpecialCharSequences")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Sequence"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{{}")),(0,i.kt)("td",{parentName:"tr",align:null},"Types the literal ",(0,i.kt)("inlineCode",{parentName:"td"},"{")," key")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{backspace}")),(0,i.kt)("td",{parentName:"tr",align:null},"Deletes character to the left of the cursor")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{del}")),(0,i.kt)("td",{parentName:"tr",align:null},"Deletes character to the right of the cursor")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{downArrow}")),(0,i.kt)("td",{parentName:"tr",align:null},"Moves cursor down")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{end}")),(0,i.kt)("td",{parentName:"tr",align:null},"Moves cursor to the end of the line")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{enter}")),(0,i.kt)("td",{parentName:"tr",align:null},"Types the Enter key")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{esc}")),(0,i.kt)("td",{parentName:"tr",align:null},"Types the Escape key")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{home}")),(0,i.kt)("td",{parentName:"tr",align:null},"Moves cursor to the start of the line")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{insert}")),(0,i.kt)("td",{parentName:"tr",align:null},"Inserts character to the right of the cursor")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{leftArrow}")),(0,i.kt)("td",{parentName:"tr",align:null},"Moves cursor left")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{moveToEnd}")),(0,i.kt)("td",{parentName:"tr",align:null},"Moves cursor to end of typeable element")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{moveToStart}")),(0,i.kt)("td",{parentName:"tr",align:null},"Moves cursor to the start of typeable element")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{pageDown}")),(0,i.kt)("td",{parentName:"tr",align:null},"Scrolls down")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{pageUp}")),(0,i.kt)("td",{parentName:"tr",align:null},"Scrolls up")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{rightArrow}")),(0,i.kt)("td",{parentName:"tr",align:null},"Moves cursor right")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{selectAll}")),(0,i.kt)("td",{parentName:"tr",align:null},"Selects all text by creating a ",(0,i.kt)("inlineCode",{parentName:"td"},"selection range"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{upArrow}")),(0,i.kt)("td",{parentName:"tr",align:null},"Moves cursor up")))),(0,i.kt)("p",null,"Text passed to ",(0,i.kt)("inlineCode",{parentName:"p"},".type()")," may also include any of these modifier character\nsequences:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Sequence"),(0,i.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{alt}")),(0,i.kt)("td",{parentName:"tr",align:null},"Activates the ",(0,i.kt)("inlineCode",{parentName:"td"},"altKey")," modifier. Aliases: ",(0,i.kt)("inlineCode",{parentName:"td"},"{option}"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{ctrl}")),(0,i.kt)("td",{parentName:"tr",align:null},"Activates the ",(0,i.kt)("inlineCode",{parentName:"td"},"ctrlKey")," modifier. Aliases: ",(0,i.kt)("inlineCode",{parentName:"td"},"{control}"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{meta}")),(0,i.kt)("td",{parentName:"tr",align:null},"Activates the ",(0,i.kt)("inlineCode",{parentName:"td"},"metaKey")," modifier. Aliases: ",(0,i.kt)("inlineCode",{parentName:"td"},"{command}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{cmd}"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{shift}")),(0,i.kt)("td",{parentName:"tr",align:null},"Activates the ",(0,i.kt)("inlineCode",{parentName:"td"},"shiftKey")," modifier.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)(m,{name:"angle-right",mdxType:"Icon"})," options")," ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"(Object)"))),(0,i.kt)("p",null,"Pass in an options object to change the default behavior of ",(0,i.kt)("inlineCode",{parentName:"p"},".type()"),"."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Option"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"animationDistanceThreshold")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/configuration#Actionability"},(0,i.kt)("inlineCode",{parentName:"a"},"animationDistanceThreshold"))),(0,i.kt)("td",{parentName:"tr",align:null},"The distance in pixels an element must exceed over time to be ",(0,i.kt)("a",{parentName:"td",href:"/guides/core-concepts/interacting-with-elements#Animations"},"considered animating"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"delay")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"10")),(0,i.kt)("td",{parentName:"tr",align:null},"Delay after each keypress")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"force")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},"Forces the action, disables ",(0,i.kt)("a",{parentName:"td",href:"#Assertions"},"waiting for actionability"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"log")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"Displays the command in the ",(0,i.kt)("a",{parentName:"td",href:"/guides/core-concepts/cypress-app#Command-Log"},"Command log"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"parseSpecialCharSequences")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"Parse special characters for strings surrounded by ",(0,i.kt)("inlineCode",{parentName:"td"},"{}"),", such as ",(0,i.kt)("inlineCode",{parentName:"td"},"{esc}"),". Set to ",(0,i.kt)("inlineCode",{parentName:"td"},"false")," to type the literal characters instead")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"release")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"Keep a modifier activated between commands")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"scrollBehavior")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/configuration#Actionability"},(0,i.kt)("inlineCode",{parentName:"a"},"scrollBehavior"))),(0,i.kt)("td",{parentName:"tr",align:null},"Viewport position to where an element ",(0,i.kt)("a",{parentName:"td",href:"/guides/core-concepts/interacting-with-elements#Scrolling"},"should be scrolled")," before executing the command")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"timeout")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/configuration#Timeouts"},(0,i.kt)("inlineCode",{parentName:"a"},"defaultCommandTimeout"))),(0,i.kt)("td",{parentName:"tr",align:null},"Time to wait for ",(0,i.kt)("inlineCode",{parentName:"td"},".type()")," to resolve before ",(0,i.kt)("a",{parentName:"td",href:"#Timeouts"},"timing out"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"waitForAnimations")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/configuration#Actionability"},(0,i.kt)("inlineCode",{parentName:"a"},"waitForAnimations"))),(0,i.kt)("td",{parentName:"tr",align:null},"Whether to wait for elements to ",(0,i.kt)("a",{parentName:"td",href:"/guides/core-concepts/interacting-with-elements#Animations"},"finish animating")," before executing the command.")))),(0,i.kt)("h3",{id:"Yields"},"Yields ",(0,i.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Subject-Management"},(0,i.kt)(m,{name:"question-circle",mdxType:"Icon"}))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".type()")," yields the same subject it was given."),(0,i.kt)("li",{parentName:"ul"},"It is ",(0,i.kt)("a",{parentName:"li",href:"/guides/core-concepts/retry-ability#Only-queries-are-retried"},"unsafe"),"\nto chain further commands that rely on the subject after ",(0,i.kt)("inlineCode",{parentName:"li"},".type()"),".")),(0,i.kt)("h2",{id:"Examples"},"Examples"),(0,i.kt)("h3",{id:"InputTextarea"},"Input/Textarea"),(0,i.kt)("h4",{id:"Type-into-a-textarea"},"Type into a textarea."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('textarea').type('Hello world') // yields <textarea>\n")),(0,i.kt)("h4",{id:"Type-into-a-login-form"},"Type into a login form"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"/examples/recipes#Logging-In"},"Check out our example recipe of logging in by typing username and password in HTML web forms"))),(0,i.kt)("h4",{id:"Mimic-user-typing-behavior"},"Mimic user typing behavior"),(0,i.kt)("p",null,"Each keypress is delayed 10ms by default in order to simulate how a very fast\nuser types!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('[contenteditable]').type('some text!')\n")),(0,i.kt)("h4",{id:"Selecting-an-option-from-datalist"},"'Selecting' an option from datalist"),(0,i.kt)("p",null,"For 'selecting' an option, just type it into the input."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<input list="fruit" />\n<datalist id="fruit">\n  <option>Apple</option>\n  <option>Banana</option>\n  <option>Cantaloupe</option>\n</datalist>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('input').type('Apple')\n")),(0,i.kt)("h3",{id:"Tabindex"},"Tabindex"),(0,i.kt)("h4",{id:"Type-into-a-non-input-or-non-textarea-element-with-tabindex"},"Type into a non-input or non-textarea element with ",(0,i.kt)("inlineCode",{parentName:"h4"},"tabindex")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<body>\n  <div id="el" tabindex="1">This div can receive focus!</div>\n</body>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('#el').type('supercalifragilisticexpialidocious')\n")),(0,i.kt)("h3",{id:"Date-Inputs"},"Date Inputs"),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},".type()")," on a date input (",(0,i.kt)("inlineCode",{parentName:"p"},'<input type="date">'),") requires specifying a\nvalid date in the format:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"yyyy-MM-dd")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"1999-12-31"),")")),(0,i.kt)("p",null,"This isn't exactly how a user would type into a date input, but is a workaround\nsince date input support varies between browsers and the format varies based on\nlocale. ",(0,i.kt)("inlineCode",{parentName:"p"},"yyyy-MM-dd")," is the format required by\n",(0,i.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/html/infrastructure.html#dates-and-times"},"the W3 spec"),"\nand is what the input's ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," will be set to regardless of browser or locale."),(0,i.kt)("p",null,"Special characters (",(0,i.kt)("inlineCode",{parentName:"p"},"{leftArrow}"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"{selectAll}"),", etc.) are not permitted."),(0,i.kt)("h3",{id:"Month-Inputs"},"Month Inputs"),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},".type()")," on a month input (",(0,i.kt)("inlineCode",{parentName:"p"},'<input type="month">'),") requires specifying a\nvalid month in the format:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"yyyy-MM")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"1999-12"),")")),(0,i.kt)("p",null,"This isn't exactly how a user would type into a month input, but is a workaround\nsince month input support varies between browsers and the format varies based on\nlocale. ",(0,i.kt)("inlineCode",{parentName:"p"},"yyyy-MM")," is the format required by\n",(0,i.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/html/infrastructure.html#months"},"the W3 spec")," and is what\nthe input's ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," will be set to regardless of browser or locale."),(0,i.kt)("p",null,"Special characters (",(0,i.kt)("inlineCode",{parentName:"p"},"{leftArrow}"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"{selectAll}"),", etc.) are not permitted."),(0,i.kt)("h3",{id:"Week-Inputs"},"Week Inputs"),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},".type()")," on a week input (",(0,i.kt)("inlineCode",{parentName:"p"},'<input type="week">'),") requires specifying a\nvalid week in the format:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"yyyy-Www")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"1999-W23"),")")),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"W")," is the literal character 'W' and ",(0,i.kt)("inlineCode",{parentName:"p"},"ww")," is the number of the week\n(01-53)."),(0,i.kt)("p",null,"This isn't exactly how a user would type into a week input, but is a workaround\nsince week input support varies between browsers and the format varies based on\nlocale. ",(0,i.kt)("inlineCode",{parentName:"p"},"yyyy-Www")," is the format required by\n",(0,i.kt)("a",{parentName:"p",href:"https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-week-string"},"the W3 spec"),"\nand is what the input's ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," will be set to regardless of browser or locale."),(0,i.kt)("p",null,"Special characters (",(0,i.kt)("inlineCode",{parentName:"p"},"{leftArrow}"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"{selectAll}"),", etc.) are not permitted."),(0,i.kt)("h3",{id:"Time-Inputs"},"Time Inputs"),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},".type()")," on a time input (",(0,i.kt)("inlineCode",{parentName:"p"},'<input type="time">'),") requires specifying a\nvalid time in the format:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HH:mm")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"01:30")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"23:15"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HH:mm:ss")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"10:00:30"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HH:mm:ss.SSS")," (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"12:00:00.384"),")")),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"HH")," is 00-23, ",(0,i.kt)("inlineCode",{parentName:"p"},"mm")," is 00-59, ",(0,i.kt)("inlineCode",{parentName:"p"},"ss")," is 00-59, and ",(0,i.kt)("inlineCode",{parentName:"p"},"SSS")," is 000-999."),(0,i.kt)("p",null,"Special characters (",(0,i.kt)("inlineCode",{parentName:"p"},"{leftArrow}"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"{selectAll}"),", etc.) are not permitted."),(0,i.kt)("h3",{id:"Key-Combinations"},"Key Combinations"),(0,i.kt)("p",null,"When using special character sequences, it's possible to activate modifier keys\nand type key combinations, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"CTRL+R")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"SHIFT+ALT+b"),". Single key\ncombinations can be specified with ",(0,i.kt)("inlineCode",{parentName:"p"},"{modifier+key}")," syntax."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"keydown")," event is fired when a modifier is activated and a ",(0,i.kt)("inlineCode",{parentName:"p"},"keyup")," event is\nfired when it is released."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You can also use key combinations during\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/click#Click-with-key-combinations"},".click()"),",\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/rightclick#Right-click-with-key-combinations"},".rightclick()")," and\n",(0,i.kt)("a",{parentName:"p",href:"/api/commands/dblclick#Double-click-with-key-combinations"},".dblclick()")," through\ntheir options. See each doc for more information.")),(0,i.kt)("h4",{id:"Type-a-key-combination"},"Type a key combination"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// This is the same as a user holding down SHIFT and ALT, then pressing b\n// The modifiers are released before typing 'hello'\ncy.get('input').type('{shift+alt+b}hello')\n")),(0,i.kt)("p",null,"When a modifier is specified on its own, it will remain activated for the\nduration of the ",(0,i.kt)("inlineCode",{parentName:"p"},".type()")," command, and is released when all subsequent\ncharacters are typed. However, ",(0,i.kt)("a",{parentName:"p",href:"#Options"},"{release: false}")," can be passed as an\n",(0,i.kt)("a",{parentName:"p",href:"#Key-Combinations"},"option"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// This is the same as a user holding down SHIFT and ALT, then typing 'hello'\n// The modifiers are held for the duration of the command.\ncy.get('input').type('{shift}{alt}hello')\n")),(0,i.kt)("h4",{id:"Type-literal--or--characters"},"Type literal ",(0,i.kt)("inlineCode",{parentName:"h4"},"{")," or ",(0,i.kt)("inlineCode",{parentName:"h4"},"}")," characters"),(0,i.kt)("p",null,"To disable parsing special characters sequences, set the\n",(0,i.kt)("inlineCode",{parentName:"p"},"parseSpecialCharSequences")," option to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"cy.get('#code-input')\n  // will not escape { } characters\n  .type('function (num) {return num * num;}', {\n    parseSpecialCharSequences: false,\n  })\n")),(0,i.kt)("h4",{id:"Hold-down-modifier-key-and-type-a-word"},"Hold down modifier key and type a word"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// all characters after {ctrl} will have 'ctrlKey'\n// set to 'true' on their key events\ncy.get('input').type('{ctrl}test')\n")),(0,i.kt)("h4",{id:"Release-behavior"},"Release behavior"),(0,i.kt)("p",null,"By default, modifiers are released after each type command."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// 'ctrlKey' will be true for each event while 'test' is typed\n// but false while 'everything' is typed\ncy.get('input').type('{ctrl}test').type('everything')\n")),(0,i.kt)("p",null,"To keep a modifier activated between commands, specify ",(0,i.kt)("inlineCode",{parentName:"p"},"{release: false}")," in the\noptions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// 'altKey' will be true while typing 'foo'\ncy.get('input').type('{alt}foo', { release: false })\n// 'altKey' will also be true during 'get' and 'click' commands\ncy.get('button').click()\n")),(0,i.kt)("p",null,"Modifiers are automatically released between tests, even with\n",(0,i.kt)("inlineCode",{parentName:"p"},"{release: false}"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"it('has modifiers activated', () => {\n  // 'altKey' will be true while typing 'foo'\n  cy.get('input').type('{alt}foo', { release: false })\n})\n\nit('does not have modifiers activated', () => {\n  // 'altKey' will be false while typing 'bar'\n  cy.get('input').type('bar')\n})\n")),(0,i.kt)("p",null,"To manually release modifiers within a test after using ",(0,i.kt)("inlineCode",{parentName:"p"},"{release: false}"),", use\nanother ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," command and the modifier will be released after it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// 'altKey' will be true while typing 'foo'\ncy.get('input').type('{alt}foo', { release: false })\n// 'altKey' will be true during the 'get' and 'click' commands\ncy.get('button').click()\n// 'altKey' will be released after this command\ncy.get('input').type('{alt}')\n// 'altKey' will be false during the 'get' and 'click' commands\ncy.get('button').click()\n")),(0,i.kt)("h3",{id:"Global-Shortcuts"},"Global Shortcuts"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},".type()")," requires a focusable element as the subject, since it's usually\nintended to type into something that's an input or textarea. Although there\n",(0,i.kt)("em",{parentName:"p"},"are"),' a few cases where it\'s valid to "type" into something other than an input\nor textarea:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Keyboard shortcuts where the listener is on the ",(0,i.kt)("inlineCode",{parentName:"li"},"document")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"body"),"."),(0,i.kt)("li",{parentName:"ul"},"Holding modifier keys and clicking an arbitrary element.")),(0,i.kt)("p",null,"To support this, the ",(0,i.kt)("inlineCode",{parentName:"p"},"body")," can be used as the DOM element to type into (even\nthough it's ",(0,i.kt)("em",{parentName:"p"},"not")," a focusable element)."),(0,i.kt)("h4",{id:"Use-keyboard-shortcuts-in-body"},"Use keyboard shortcuts in body"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// all of the type events are fired on the body\ncy.get('body').type(\n  '{upArrow}{upArrow}{downArrow}{downArrow}{leftArrow}{rightArrow}{leftArrow}{rightArrow}ba'\n)\n")),(0,i.kt)("h4",{id:"Do-a-shift--click"},"Do a shift + click"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// execute a SHIFT + click on the first <li>\n// {release: false} is necessary so that\n// SHIFT will not be released after the type command\ncy.get('body').type('{shift}', { release: false }).get('li:first').click()\n")),(0,i.kt)("h3",{id:"Options"},"Options"),(0,i.kt)("h4",{id:"Force-typing-regardless-of-its-actionable-state"},"Force typing regardless of its actionable state"),(0,i.kt)("p",null,"Forcing typing overrides the\n",(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/interacting-with-elements#Forcing"},"actionable checks"),"\nCypress applies and will automatically fire the events."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('input[type=text]').type('Test all the things', { force: true })\n")),(0,i.kt)("h2",{id:"Notes"},"Notes"),(0,i.kt)("h3",{id:"Supported-Elements"},"Supported Elements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"^HTML ",(0,i.kt)("inlineCode",{parentName:"li"},"<body>")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"<textarea>")," elements."),(0,i.kt)("li",{parentName:"ul"},"Elements with a defined ",(0,i.kt)("inlineCode",{parentName:"li"},"tabindex")," attribute."),(0,i.kt)("li",{parentName:"ul"},"Elements with a defined ",(0,i.kt)("inlineCode",{parentName:"li"},"contenteditable")," attribute."),(0,i.kt)("li",{parentName:"ul"},"^HTML ",(0,i.kt)("inlineCode",{parentName:"li"},"<input>")," elements with a defined ",(0,i.kt)("inlineCode",{parentName:"li"},"type")," attribute of one of the\nfollowing:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"text")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"email")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"number")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"date")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"week")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"month")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"time")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"datetime-local")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"search")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"url")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tel"))))),(0,i.kt)("h3",{id:"Actionability"},"Actionability"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},".type()"),' is an "action command" that follows all the rules of\n',(0,i.kt)("a",{parentName:"p",href:"/guides/core-concepts/interacting-with-elements"},"Actionability"),"."),(0,i.kt)("h3",{id:"Events"},"Events"),(0,i.kt)("h4",{id:"When-element-is-not-in-focus"},"When element is not in focus"),(0,i.kt)("p",null,"If the element is currently not in focus, before issuing any keystrokes Cypress\nwill first issue a ",(0,i.kt)("a",{parentName:"p",href:"/api/commands/click"},(0,i.kt)("inlineCode",{parentName:"a"},".click()"))," to the element to bring it\ninto focus."),(0,i.kt)("h4",{id:"Events-that-fire"},"Events that fire"),(0,i.kt)("p",null,"Once the element is in focus, Cypress will begin firing keyboard events."),(0,i.kt)("p",null,"The following events will be fired based on what key was pressed identical to\nthe event spec:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"keydown")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"keypress")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"beforeinput")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"textInput")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"input")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"keyup"))),(0,i.kt)("p",null,"Additionally ",(0,i.kt)("inlineCode",{parentName:"p"},"change")," events will be fired either when the ",(0,i.kt)("inlineCode",{parentName:"p"},"{enter}")," key is\npressed (and the value has changed since the last focus event), or whenever the\nelement loses focus. This matches browser behavior."),(0,i.kt)("p",null,"Events that should not fire on non input types such as elements with ",(0,i.kt)("inlineCode",{parentName:"p"},"tabindex"),"\ndo not fire their ",(0,i.kt)("inlineCode",{parentName:"p"},"textInput")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," events. Only typing into elements which\ncause the actual value or text to change will fire those events."),(0,i.kt)("h4",{id:"Event-Firing"},"Event Firing"),(0,i.kt)("p",null,"The following rules have been implemented that match real browser behavior (and\nthe spec):"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Cypress respects not firing subsequent events if previous ones were canceled."),(0,i.kt)("li",{parentName:"ol"},"Cypress will fire ",(0,i.kt)("inlineCode",{parentName:"li"},"keypress")," ",(0,i.kt)("em",{parentName:"li"},"only")," if that key is supposed to actually fire\n",(0,i.kt)("inlineCode",{parentName:"li"},"keypress"),"."),(0,i.kt)("li",{parentName:"ol"},"Cypress will fire ",(0,i.kt)("inlineCode",{parentName:"li"},"textInput")," ",(0,i.kt)("em",{parentName:"li"},"only")," if typing that key would have inserted\nan actual character."),(0,i.kt)("li",{parentName:"ol"},"Cypress will fire ",(0,i.kt)("inlineCode",{parentName:"li"},"input")," ",(0,i.kt)("em",{parentName:"li"},"only")," if typing that key modifies or changes the\nvalue of the element.")),(0,i.kt)("h4",{id:"Event-Cancellation"},"Event Cancellation"),(0,i.kt)("p",null,"Cypress respects all default browser behavior when events are canceled."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// prevent the characters from being inserted\n// by canceling keydown, keypress, or textInput\n$('#username').on('keydown', (e) => {\n  e.preventDefault()\n})\n\n// Cypress will not insert any characters if keydown, keypress, or textInput\n// are cancelled - which matches the default browser behavior\ncy.get('#username').type('bob@gmail.com').should('have.value', '') // true\n")),(0,i.kt)("h4",{id:"Preventing-mousedown-does-not-prevent-typing"},"Preventing ",(0,i.kt)("inlineCode",{parentName:"h4"},"mousedown")," does not prevent typing"),(0,i.kt)("p",null,"In a real browser, preventing ",(0,i.kt)("inlineCode",{parentName:"p"},"mousedown")," on a form field will prevent it from\nreceiving focus and thus prevent it from being able to be typed into. Currently,\nCypress does not factor this in.\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/issues/new/choose"},"open an issue")," if you\nneed this to be fixed."),(0,i.kt)("h4",{id:"Key-Events-Table"},"Key Events Table"),(0,i.kt)("p",null,"Cypress prints out a table of key events that detail the keys that were pressed\nwhen clicking on type within the ",(0,i.kt)("a",{parentName:"p",href:"#Command-Log"},"Command Log"),". Each character\nwill contain the ",(0,i.kt)("inlineCode",{parentName:"p"},"which")," character code and the events that happened as a result\nof that key press."),(0,i.kt)("p",null,"Events that were ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultPrevented")," may prevent other events from firing and\nthose will show up as empty. For instance, canceling ",(0,i.kt)("inlineCode",{parentName:"p"},"keydown")," will not fire\n",(0,i.kt)("inlineCode",{parentName:"p"},"keypress")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"textInput")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"input"),", but will fire ",(0,i.kt)("inlineCode",{parentName:"p"},"keyup")," (which matches the\nspec)."),(0,i.kt)("p",null,"Additionally, events that cause a ",(0,i.kt)("inlineCode",{parentName:"p"},"change")," event to fire (such as typing\n",(0,i.kt)("inlineCode",{parentName:"p"},"{enter}"),") will display with the ",(0,i.kt)("inlineCode",{parentName:"p"},"change")," event column as ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"Any modifiers activated for the event are also listed in a ",(0,i.kt)("inlineCode",{parentName:"p"},"modifiers")," column."),(0,i.kt)(c,{src:"/img/api/type/key-events-table-shown-in-console-for-testing-typing.png",alt:"Cypress .type() key events table",mdxType:"DocsImage"}),(0,i.kt)("h3",{id:"Tabbing"},"Tabbing"),(0,i.kt)("h4",{id:"Typing-tab-key-does-not-work"},"Typing ",(0,i.kt)("inlineCode",{parentName:"h4"},"tab")," key does not work"),(0,i.kt)("p",null,"In the meantime, you can use the experimental\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Bkucera/cypress-plugin-tab"},"cypress-plugin-tab")," and can\nthumbs up ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/issues/299"},"this issue"),"."),(0,i.kt)("h3",{id:"Modifiers"},"Modifiers"),(0,i.kt)("h4",{id:"Modifier-effects"},"Modifier effects"),(0,i.kt)("p",null,"In a real browser, if a user holds ",(0,i.kt)("inlineCode",{parentName:"p"},"SHIFT")," and types ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),", a capital ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," will be\ntyped into the input. Currently, Cypress does not simulate that behavior."),(0,i.kt)("p",null,"Modifiers are simulated by setting their corresponding values to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," for key\nand click events. So, for example, activating the ",(0,i.kt)("inlineCode",{parentName:"p"},"{shift}")," modifier will set\n",(0,i.kt)("inlineCode",{parentName:"p"},"event.shiftKey")," to true for any key events, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"keydown"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// app code\ndocument.querySelector('input:first').addEventListener('keydown', (e) => {\n  // e.shiftKey will be true\n})\n\n// in test\ncy.get('input:first').type('{shift}a')\n")),(0,i.kt)("p",null,"In the example above, a lowercase ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," will be typed, because that's the literal\ncharacter specified. To type a capital ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", you can use ",(0,i.kt)("inlineCode",{parentName:"p"},".type('{shift}A')")," (or\n",(0,i.kt)("inlineCode",{parentName:"p"},".type('A')")," if you don't care about the ",(0,i.kt)("inlineCode",{parentName:"p"},"shiftKey")," property on any key events)."),(0,i.kt)("p",null,"This holds true for other special key combinations as well (that may be\nOS-specific). For example, on OSX, typing ",(0,i.kt)("inlineCode",{parentName:"p"},"ALT + SHIFT + K")," creates the special\ncharacter ",(0,i.kt)("inlineCode",{parentName:"p"},"\uf8ff"),". Like with capitalization, ",(0,i.kt)("inlineCode",{parentName:"p"},".type()")," will not output ",(0,i.kt)("inlineCode",{parentName:"p"},"\uf8ff"),", but the\nletter ",(0,i.kt)("inlineCode",{parentName:"p"},"k"),"."),(0,i.kt)("p",null,"Similarly, modifiers will not affect arrow keys or deletion keys. For example\n",(0,i.kt)("inlineCode",{parentName:"p"},"{ctrl}{backspace}")," will not delete an entire word.\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cypress-io/cypress/issues/new"},"open an issue")," if you need\nmodifier effects to be implemented."),(0,i.kt)("h3",{id:"Form-Submission"},"Form Submission"),(0,i.kt)("h4",{id:"Implicit-form-submission-behavior"},"Implicit form submission behavior"),(0,i.kt)("p",null,"Cypress automatically matches the spec and browser behavior for pressing the\n",(0,i.kt)("inlineCode",{parentName:"p"},"{enter}")," key when the input belongs to a ",(0,i.kt)("inlineCode",{parentName:"p"},"<form>"),"."),(0,i.kt)("p",null,"This behavior is defined here:\n",(0,i.kt)("a",{parentName:"p",href:"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#implicit-submission"},"Form Implicit Submission"),"."),(0,i.kt)("p",null,"For instance the following will submit the form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<form action="/login">\n  <input id="username" />\n  <input id="password" />\n  <button type="submit">Log In</button>\n</form>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('#username').type('bob@burgers.com')\ncy.get('#password').type('password123{enter}')\n")),(0,i.kt)("p",null,"Because there are multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")," and one ",(0,i.kt)("inlineCode",{parentName:"p"},"submit")," button, Cypress submits the\nform (and fires submit events) as well as a synthetic ",(0,i.kt)("inlineCode",{parentName:"p"},"click")," event to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"button"),"."),(0,i.kt)("p",null,'The spec defines the "submit" button as the first ',(0,i.kt)("inlineCode",{parentName:"p"},"input[type=submit]")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"button[type!=button]")," from the form."),(0,i.kt)("p",null,"Additionally Cypress handles these 4 other situations as defined in the spec:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Does not submit a form if there are multiple inputs and no ",(0,i.kt)("inlineCode",{parentName:"li"},"submit")," button."),(0,i.kt)("li",{parentName:"ol"},"Does not submit a form if the ",(0,i.kt)("inlineCode",{parentName:"li"},"submit")," button is disabled."),(0,i.kt)("li",{parentName:"ol"},"Submits a form, but does not fire synthetic ",(0,i.kt)("inlineCode",{parentName:"li"},"click")," event, if there is 1\n",(0,i.kt)("inlineCode",{parentName:"li"},"input")," and no ",(0,i.kt)("inlineCode",{parentName:"li"},"submit")," button"),(0,i.kt)("li",{parentName:"ol"},"Submits form and fires a synthetic ",(0,i.kt)("inlineCode",{parentName:"li"},"click")," event to the ",(0,i.kt)("inlineCode",{parentName:"li"},"submit")," when it\nexists.")),(0,i.kt)("p",null,"If the form's ",(0,i.kt)("inlineCode",{parentName:"p"},"submit")," event is ",(0,i.kt)("inlineCode",{parentName:"p"},"preventedDefault")," the form will not actually be\nsubmitted."),(0,i.kt)("h2",{id:"Rules"},"Rules"),(0,i.kt)("h3",{id:"Requirements"},"Requirements ",(0,i.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Chains-of-Commands"},(0,i.kt)(m,{name:"question-circle",mdxType:"Icon"}))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".type()")," requires being chained off a command that yields DOM element(s).")),(0,i.kt)("h3",{id:"Assertions"},"Assertions ",(0,i.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Assertions"},(0,i.kt)(m,{name:"question-circle",mdxType:"Icon"}))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".type()")," will automatically wait for the element to reach an\n",(0,i.kt)("a",{parentName:"li",href:"/guides/core-concepts/interacting-with-elements"},"actionable state"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".type()")," will automatically ",(0,i.kt)("a",{parentName:"li",href:"/guides/core-concepts/retry-ability"},"retry"),"\nuntil all chained assertions have passed.")),(0,i.kt)("h3",{id:"Timeouts"},"Timeouts ",(0,i.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Timeouts"},(0,i.kt)(m,{name:"question-circle",mdxType:"Icon"}))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".type()")," can time out waiting for the element to reach an\n",(0,i.kt)("a",{parentName:"li",href:"/guides/core-concepts/interacting-with-elements"},"actionable state"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".type()")," can time out waiting for assertions you've added to pass.")),(0,i.kt)("h2",{id:"Command-Log"},"Command Log"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Type into the input")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"cy.get('input[name=firstName]').type('Jane Lane')\n")),(0,i.kt)("p",null,"The commands above will display in the Command Log as:"),(0,i.kt)(c,{src:"/img/api/type/type-in-input-shown-in-command-log.png",alt:"Command Log type",mdxType:"DocsImage"}),(0,i.kt)("p",null,"When clicking on ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," within the command log, the console outputs the\nfollowing:"),(0,i.kt)(c,{src:"/img/api/type/console-log-of-typing-with-entire-key-events-table-for-each-character.png",alt:"Console Log type",mdxType:"DocsImage"}),(0,i.kt)("h2",{id:"History"},"History"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Version"),(0,i.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#6-1-0"},"6.1.0")),(0,i.kt)("td",{parentName:"tr",align:null},"Added option ",(0,i.kt)("inlineCode",{parentName:"td"},"scrollBehavior"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#5.6.0"},"5.6.0")),(0,i.kt)("td",{parentName:"tr",align:null},"Support single key combination syntax")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#5.5.0"},"5.5.0")),(0,i.kt)("td",{parentName:"tr",align:null},"Support ",(0,i.kt)("inlineCode",{parentName:"td"},"beforeinput")," event")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#3-4-1"},"3.4.1")),(0,i.kt)("td",{parentName:"tr",align:null},"Added ",(0,i.kt)("inlineCode",{parentName:"td"},"parseSpecialCharSequences")," option")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#3-3-0"},"3.3.0")),(0,i.kt)("td",{parentName:"tr",align:null},"Added ",(0,i.kt)("inlineCode",{parentName:"td"},"{insert}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{pageup}")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"{pagedown}")," character sequences")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#3-2-0"},"3.2.0")),(0,i.kt)("td",{parentName:"tr",align:null},"Added ",(0,i.kt)("inlineCode",{parentName:"td"},"{home}")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"{end}")," character sequences")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#0-20-0"},"0.20.0")),(0,i.kt)("td",{parentName:"tr",align:null},"Supports for typing in inputs of type ",(0,i.kt)("inlineCode",{parentName:"td"},"date"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"time"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"month"),", and ",(0,i.kt)("inlineCode",{parentName:"td"},"week"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#0-17-1"},"0.17.1")),(0,i.kt)("td",{parentName:"tr",align:null},"Added ",(0,i.kt)("inlineCode",{parentName:"td"},"ctrl"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"cmd"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"shift"),", and ",(0,i.kt)("inlineCode",{parentName:"td"},"alt")," keyboard modifiers")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#0-16-3"},"0.16.3")),(0,i.kt)("td",{parentName:"tr",align:null},"Supports for typing in elements with ",(0,i.kt)("inlineCode",{parentName:"td"},"tabindex")," attribute")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#0-16-2"},"0.16.2")),(0,i.kt)("td",{parentName:"tr",align:null},"Added ",(0,i.kt)("inlineCode",{parentName:"td"},"{downarrow}")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"{uparrow}")," character sequences")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#0-8-0"},"0.8.0")),(0,i.kt)("td",{parentName:"tr",align:null},"Outputs Key Events Table to console on click")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#0-8-0"},"0.8.0")),(0,i.kt)("td",{parentName:"tr",align:null},"Added ",(0,i.kt)("inlineCode",{parentName:"td"},"{selectall}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{del}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{backspace}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{esc}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{{}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{enter}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{leftarrow}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{rightarrow}")," character sequences")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#0-8-0"},"0.8.0")),(0,i.kt)("td",{parentName:"tr",align:null},"Added small delay (10ms) between each keystroke during ",(0,i.kt)("inlineCode",{parentName:"td"},"cy.type()"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/guides/references/changelog#0-6-12"},"0.6.12")),(0,i.kt)("td",{parentName:"tr",align:null},"Added option ",(0,i.kt)("inlineCode",{parentName:"td"},"force"))))),(0,i.kt)("h2",{id:"See-also"},"See also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/commands/blur"},(0,i.kt)("inlineCode",{parentName:"a"},".blur()"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/commands/clear"},(0,i.kt)("inlineCode",{parentName:"a"},".clear()"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/commands/click"},(0,i.kt)("inlineCode",{parentName:"a"},".click()"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/commands/focus"},(0,i.kt)("inlineCode",{parentName:"a"},".focus()"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/commands/submit"},(0,i.kt)("inlineCode",{parentName:"a"},".submit()"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/api/cypress-api/keyboard-api"},(0,i.kt)("inlineCode",{parentName:"a"},"Cypress.Keyboard")))))}k.isMDXComponent=!0}}]);