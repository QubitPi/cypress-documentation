"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[4292],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var s=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)t=i[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=s.createContext({}),l=function(e){var n=s.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return s.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},f=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(t),f=r,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||i;return t?s.createElement(m,a(a({ref:n},c),{},{components:t})):s.createElement(m,a({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=f;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[d]="string"==typeof e?e:r,a[1]=o;for(var l=2;l<i;l++)a[l]=t[l];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2214:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var s=t(7462),r=(t(7294),t(3905));const i={title:"After Spec API"},a=void 0,o={unversionedId:"api/plugins/after-spec-api",id:"api/plugins/after-spec-api",title:"After Spec API",description:"The after:spec event fires after a spec file is run. When running cypress via",source:"@site/docs/api/plugins/after-spec-api.mdx",sourceDirName:"api/plugins",slug:"/api/plugins/after-spec-api",permalink:"/api/plugins/after-spec-api",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/plugins/after-spec-api.mdx",tags:[],version:"current",lastUpdatedAt:1717543864,formattedLastUpdatedAt:"Jun 4, 2024",frontMatter:{title:"After Spec API"},sidebar:"api",previous:{title:"After Screenshot API",permalink:"/api/plugins/after-screenshot-api"},next:{title:"Before Run API",permalink:"/api/plugins/before-run-api"}},p={},l=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:2},{value:"Log the relative spec path to stdout after the spec is run",id:"Log-the-relative-spec-path-to-stdout-after-the-spec-is-run",level:3},{value:"Examples",id:"Examples",level:2},{value:"Delete the recorded video if the spec passed",id:"Delete-the-recorded-video-if-the-spec-passed",level:3},{value:"Delete the recorded video if no tests retried",id:"Delete-the-recorded-video-if-no-tests-retried",level:3},{value:"See also",id:"See-also",level:2}],c=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)},d=c("WarningSetupNodeEvents"),u=c("CypressConfigFileTabs"),f=c("Icon"),m={toc:l};function g(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,s.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"after:spec")," event fires after a spec file is run. When running cypress via\n",(0,r.kt)("inlineCode",{parentName:"p"},"cypress open"),", the event will fire when the browser closes."),(0,r.kt)("h2",{id:"Syntax"},"Syntax"),(0,r.kt)(d,{mdxType:"WarningSetupNodeEvents"}),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"\u26a0\ufe0f When running via ",(0,r.kt)("inlineCode",{parentName:"p"},"cypress open"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"after:spec")," event only fires if the\n",(0,r.kt)("a",{parentName:"p",href:"/guides/references/configuration#Experiments"},"experimentalInteractiveRunEvents flag"),"\nis enabled.")),(0,r.kt)("cypress-config-plugin-example",null,(0,r.kt)(u,{mdxType:"CypressConfigFileTabs"},(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        /* ... */\n      })\n    },\n  },\n})\n")),(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        /* ... */\n      })\n    },\n  },\n})\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)(f,{name:"angle-right",mdxType:"Icon"})," spec")," ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"(Object)"))),(0,r.kt)("p",null,"Details of the spec file, including the following properties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},"The base name of the spec file (e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"login.cy.js"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"relative")),(0,r.kt)("td",{parentName:"tr",align:null},"The path to the spec file, relative to the project root (e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"cypress/e2e/login.cy.js"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"absolute")),(0,r.kt)("td",{parentName:"tr",align:null},"The absolute path to the spec file (e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"/Users/janelane/my-app/cypress/e2e/login.cy.js"),")")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)(f,{name:"angle-right",mdxType:"Icon"})," results")," ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"(Object)"))),(0,r.kt)("p",null,"Details of the spec file's results, including numbers of passes/failures/etc and\ndetails on the tests themselves."),(0,r.kt)("p",null,"Results are only provided when running via ",(0,r.kt)("inlineCode",{parentName:"p"},"cypress run"),". When running via\n",(0,r.kt)("inlineCode",{parentName:"p"},"cypress open"),", the results will be undefined."),(0,r.kt)("h2",{id:"Usage"},"Usage"),(0,r.kt)("p",null,"You can return a promise from the ",(0,r.kt)("inlineCode",{parentName:"p"},"after:spec")," event handler and it will be\nawaited before Cypress proceeds with processing the spec's video or moving on to\nfurther specs if there are any."),(0,r.kt)("h3",{id:"Log-the-relative-spec-path-to-stdout-after-the-spec-is-run"},"Log the relative spec path to stdout after the spec is run"),(0,r.kt)("cypress-config-plugin-example",null,(0,r.kt)(u,{mdxType:"CypressConfigFileTabs"},(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        // spec will look something like this:\n        // {\n        //   name: 'login.cy.js',\n        //   relative: 'cypress/e2e/login.cy.js',\n        //   absolute: '/Users/janelane/my-app/cypress/e2e/login.cy.js',\n        // }\n        // results will look something like this:\n        // {\n        //   stats: {\n        //     suites: 0,\n        //     tests: 1,\n        //     passes: 1,\n        //     pending: 0,\n        //     skipped: 0,\n        //     failures: 0,\n        //     // ...more properties\n        //   }\n        //   reporter: 'spec',\n        //   tests: [\n        //     {\n        //       title: ['login', 'logs user in'],\n        //       state: 'passed',\n        //       // ...more properties...\n        //     }\n        //   ],\n        //   error: null,\n        //   video: '/Users/janelane/my-app/cypress/videos/login.cy.js.mp4',\n        //   screenshots: [],\n        //   // ...more properties...\n        // }\n        console.log('Finished running', spec.relative)\n      })\n    },\n  },\n})\n")),(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        // spec will look something like this:\n        // {\n        //   name: 'login.cy.js',\n        //   relative: 'cypress/e2e/login.cy.js',\n        //   absolute: '/Users/janelane/my-app/cypress/e2e/login.cy.js',\n        // }\n        // results will look something like this:\n        // {\n        //   stats: {\n        //     suites: 0,\n        //     tests: 1,\n        //     passes: 1,\n        //     pending: 0,\n        //     skipped: 0,\n        //     failures: 0,\n        //     // ...more properties\n        //   }\n        //   reporter: 'spec',\n        //   tests: [\n        //     {\n        //       title: ['login', 'logs user in'],\n        //       state: 'passed',\n        //       // ...more properties...\n        //     }\n        //   ],\n        //   error: null,\n        //   video: '/Users/janelane/my-app/cypress/videos/login.cy.js.mp4',\n        //   screenshots: [],\n        //   // ...more properties...\n        // }\n        console.log('Finished running', spec.relative)\n      })\n    },\n  },\n})\n")))),(0,r.kt)("h2",{id:"Examples"},"Examples"),(0,r.kt)("h3",{id:"Delete-the-recorded-video-if-the-spec-passed"},"Delete the recorded video if the spec passed"),(0,r.kt)("p",null,"You can delete the recorded video for a spec when certain conditions are met.\nThis will skip the compression and uploading of the video when recording to\nCypress Cloud."),(0,r.kt)("p",null,"The example below shows how to delete the recorded video for specs with no\nfailing tests."),(0,r.kt)("cypress-config-plugin-example",null,(0,r.kt)(u,{mdxType:"CypressConfigFileTabs"},(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\nconst fs = require('fs')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        // Do we have failures?\n        if (results && results.video && results.stats.failures === 0) {\n          // delete the video if the spec passed\n          fs.unlinkSync(results.video)\n        }\n      })\n    },\n  },\n})\n")),(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\nimport fs from 'fs'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on(\n        'after:spec',\n        (spec: Cypress.Spec, results: CypressCommandLine.RunResult) => {\n          // Do we have failures?\n          if (results && results.video && results.stats.failures === 0) {\n            // delete the video if the spec passed\n            fs.unlinkSync(results.video)\n          }\n        }\n      )\n    },\n  },\n})\n")))),(0,r.kt)("h3",{id:"Delete-the-recorded-video-if-no-tests-retried"},"Delete the recorded video if no tests retried"),(0,r.kt)("p",null,"You can delete the recorded video for a spec when certain conditions are met.\nThis will skip the compression and uploading of the video when recording to\nCypress Cloud."),(0,r.kt)("p",null,"The example below shows how to delete the recorded video for specs that had no\nretry attempts when using Cypress ",(0,r.kt)("a",{parentName:"p",href:"/guides/guides/test-retries"},"test retries"),"."),(0,r.kt)("cypress-config-plugin-example",null,(0,r.kt)(u,{mdxType:"CypressConfigFileTabs"},(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { defineConfig } = require('cypress')\nconst fs = require('fs')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('after:spec', (spec, results) => {\n        if (results && results.video) {\n          // Do we have failures for any retry attempts?\n          const failures = results.tests.some((test) =>\n            test.attempts.some((attempt) => attempt.state === 'failed')\n          )\n          if (!failures) {\n            // delete the video if the spec passed and no tests retried\n            fs.unlinkSync(results.video)\n          }\n        }\n      })\n    },\n  },\n})\n")),(0,r.kt)("pre",{parentName:"cypress-config-plugin-example"},(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defineConfig } from 'cypress'\nimport fs from 'fs'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on(\n        'after:spec',\n        (spec: Cypress.Spec, results: CypressCommandLine.RunResult) => {\n          if (results && results.video) {\n            // Do we have failures for any retry attempts?\n            const failures = results.tests.some((test) =>\n              test.attempts.some((attempt) => attempt.state === 'failed')\n            )\n            if (!failures) {\n              // delete the video if the spec passed and no tests retried\n              fs.unlinkSync(results.video)\n            }\n          }\n        }\n      )\n    },\n  },\n})\n")))),(0,r.kt)("h2",{id:"See-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/plugins/before-spec-api"},"Before Spec API")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/plugins/before-run-api"},"Before Run API")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/plugins/after-run-api"},"After Run API")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/guides/tooling/plugins-guide"},"Plugins Guide")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/plugins/writing-a-plugin"},"Writing a Plugin"))))}g.isMDXComponent=!0}}]);