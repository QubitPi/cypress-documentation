"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[1947],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,s=function(e,t){if(null==e)return{};var n,i,s={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=p(n),g=s,m=u["".concat(l,".").concat(g)]||u[g]||d[g]||r;return n?i.createElement(m,o(o({ref:t},c),{},{components:n})):i.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=g;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:s,o[1]=a;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7781:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var i=n(7462),s=(n(7294),n(3905));const r={title:"Working with GitHub Actions",slug:"/guides/end-to-end-testing/working-with-github-actions"},o=void 0,a={unversionedId:"guides/end-to-end-testing/testing-strategies/working-with-github-actions",id:"guides/end-to-end-testing/testing-strategies/working-with-github-actions",title:"Working with GitHub Actions",description:"What we'll learn",source:"@site/docs/guides/end-to-end-testing/testing-strategies/working-with-github-actions.mdx",sourceDirName:"guides/end-to-end-testing/testing-strategies",slug:"/guides/end-to-end-testing/working-with-github-actions",permalink:"/cypress-documentation/guides/end-to-end-testing/working-with-github-actions",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/end-to-end-testing/testing-strategies/working-with-github-actions.mdx",tags:[],version:"current",frontMatter:{title:"Working with GitHub Actions",slug:"/guides/end-to-end-testing/working-with-github-actions"},sidebar:"guides",previous:{title:"Social Authentication",permalink:"/cypress-documentation/guides/end-to-end-testing/social-authentication"},next:{title:"Working with GraphQL",permalink:"/cypress-documentation/guides/end-to-end-testing/working-with-graphql"}},l={},p=[],c=(u="Icon",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.kt)("div",e)});var u;const d={toc:p};function g(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("h2",{parentName:"admonition",id:"What-well-learn"},(0,s.kt)(c,{name:"graduation-cap",mdxType:"Icon"})," What we'll learn"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"Best practices to deduplicate and parallelize E2E tests in GitHub Action"))),(0,s.kt)("p",null,'Running Cypress E2E tests are very costly, especially when software becomes large with tens of spec files. Although\nCypress offers "dashboard" feature, which claims to offere parallel testing, it is better to confine all CI/CD logics,\nincluding testing, inside GitHub realm. Unfortunately, GitHub Actions offers limited parallelism which make things a\nlittle hard. '),(0,s.kt)("p",null,"What we would like to achieve is the following"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"All CI/CD logics, inclusing tests, stays in GitHub"),(0,s.kt)("li",{parentName:"ul"},"Each ",(0,s.kt)("inlineCode",{parentName:"li"},"spec.ts")," file is a workflow job, so that CI/CD can parallelize E2E tests at test file granularity"),(0,s.kt)("li",{parentName:"ul"},"All E2E tests run (an in parallel as well) in two environments: dev & prod"),(0,s.kt)("li",{parentName:"ul"},"No code duplication, i.e. configuration in dev tests never repeats in prod tests")),(0,s.kt)("p",null,"The purpose of having dev and prod environments is to answer the following question during test:"),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"If a test in production environment fails, is this a code bug or simply because our environment got screwed up?")),(0,s.kt)("p",null,"For example, when a login page is not showing up, it could be someone's new code put login page into an\nundesirable state, in which case it's a bug, or our production server puts our app in a wront HTTP port, in which case\nit's an configuration management issue."),(0,s.kt)("p",null,"The way we package and run web app in the two environments will be very different. In dev\n(",(0,s.kt)("inlineCode",{parentName:"p"},"./.github/scripts/dev-e2e-test-script.sh"),"):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nyarn start &\nyarn wait-on-dev\nyarn e2e --spec "$SPEC_FILE_PATH"\n')),(0,s.kt)("p",null,"In prod (",(0,s.kt)("inlineCode",{parentName:"p"},"./.github/scripts/prod-e2e-test-script.sh"),"):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nyarn build\nnpm install -g serve\nserve -s dist -l 8080 &\nyarn wait-on-prod\nyarn e2e --spec "$SPEC_FILE_PATH"\n')),(0,s.kt)("p",null,"The main CI/CD workflow looks like this:"),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The ",(0,s.kt)("inlineCode",{parentName:"p"},"list-e2e-test-specs")," step scans spec folder using\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/marketplace/actions/list-files-action"},"List Files Action")," so that team member won't need to risk\nremembing add new spec file into ",(0,s.kt)("inlineCode",{parentName:"p"},"test_spec")," field below")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'---\n\n...\n\njobs:\n\n  ...\n\n  list-e2e-test-specs:\n    runs-on: ubuntu-latest\n    outputs:\n      paths: ${{ steps.list-e2e-test-specs.outputs.paths }}\n    steps:\n      - name: List Files\n        id: list-e2e-test-specs\n        uses: mirko-felice/list-files-action@v3.0.5\n        with:\n          repo: ${{ github.repository }}\n          ref: ${{ github.ref }}\n          path: "cypress/e2e"\n          ext: ".ts"\n\n  e2e-tests:\n    name: E2E Tests\n    strategy:\n      fail-fast: false\n      matrix:\n        test_env: ["dev", "prod"]\n        test_spec: ${{ fromJson(needs.list-e2e-test-specs.outputs.paths) }}\n    uses: ./.github/workflows/e2e-tests.yml\n    secrets: inherit\n    with:\n      testing_env: ${{ matrix.test_env }}\n      spec_file_path: ${{ matrix.test_spec }}\n\n  ...\n``\n\nNext, the `e2e-tests.yml` is dedicated to running a specific spec file in a specific evironment:\n\n```yaml\n---\nname: CI/CD E2E Tests\n\n"on":\n  workflow_call:\n    inputs:\n      testing_env:\n        required: true\n        type: string\n      spec_file_path:\n        required: true\n        type: string\n\njobs:\n  e2e-tests:\n    name: E2E Tests (${{ inputs.spec_file_path }}) in ${{ inputs.testing_env }} Mode\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        node_version: [16]\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Set node version to ${{ matrix.node_version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ matrix.node_version }}\n      - name: Install dependencies\n        run: yarn install\n      - name: Load app environment variables\n        run: |\n          touch .env\n          if [[ ${{ inputs.testing_env }} == \'dev\' ]]; then\n              echo "NODE_ENV=development" >> .env\n          else\n              echo "NODE_ENV=production" >> .env\n          fi\n      - name: Run E2E tests in ${{ inputs.testing_env }} mode\n        shell: bash\n        run: |\n          if [[ ${{ inputs.testing_env }} == \'dev\' ]]; then\n              .github/scripts/dev-e2e-test-script.sh\n          else\n              .github/scripts/prod-e2e-test-script.sh\n          fi\n        env:\n          SPEC_FILE_PATH: ${{ inputs.spec_file_path }}\n      - name: Upload test videos and screenshots on test failure\n        if: failure()\n        uses: actions/upload-artifact@v3\n        with:\n          name: ${{ inputs.testing_env }}-${{ inputs.spec_file_path }}-${{ matrix.node_version }}\n          path: |\n            ./cypress/videos\n            ./cypress/screenshots\n')))}g.isMDXComponent=!0}}]);