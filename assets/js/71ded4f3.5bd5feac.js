"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[6845],{4847:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var s=i(5893),r=i(1151);const o={title:"Writing a Plugin"},t=void 0,c={id:"api/plugins/writing-a-plugin",title:"Writing a Plugin",description:"The Plugins API allows you to hook into and extend Cypress behavior.",source:"@site/docs/api/plugins/writing-a-plugin.mdx",sourceDirName:"api/plugins",slug:"/api/plugins/writing-a-plugin",permalink:"/api/plugins/writing-a-plugin",draft:!1,unlisted:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/plugins/writing-a-plugin.mdx",tags:[],version:"current",lastUpdatedAt:1728611023,formattedLastUpdatedAt:"Oct 11, 2024",frontMatter:{title:"Writing a Plugin"},sidebar:"api",previous:{title:"Preprocessors API",permalink:"/api/plugins/preprocessors-api"}},d={},l=[{value:"Plugins API",id:"Plugins-API",level:2},{value:"on",id:"on",level:3},{value:"config",id:"config",level:3},{value:"List of events",id:"List-of-events",level:3},{value:"The following events are available:",id:"The-following-events-are-available",level:4},{value:"Execution context",id:"Execution-context",level:2},{value:"npm modules",id:"npm-modules",level:3},{value:"Error handling",id:"Error-handling",level:2},{value:"File changes",id:"File-changes",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components},{CypressConfigFileTabs:i,WarningPluginsFile:o}=n;return i||u("CypressConfigFileTabs",!0),o||u("WarningPluginsFile",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The Plugins API allows you to hook into and extend Cypress behavior."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," This document assumes you have read the\n",(0,s.jsx)(n.a,{href:"/guides/tooling/plugins-guide",children:"Plugins Guide"}),"."]})}),"\n",(0,s.jsx)(o,{}),"\n",(0,s.jsx)(n.h2,{id:"Plugins-API",children:"Plugins API"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"/guides/references/configuration#setupNodeEvents",children:(0,s.jsx)(n.code,{children:"setupNodeEvents"})}),"\nfunction (or deprecated ",(0,s.jsx)(n.a,{href:"/guides/references/legacy-configuration#Plugins",children:"plugins file"})," function) receives 2\narguments: ",(0,s.jsx)(n.a,{href:"#on",children:(0,s.jsx)(n.code,{children:"on"})})," and ",(0,s.jsx)(n.a,{href:"#config",children:(0,s.jsx)(n.code,{children:"config"})}),". It can return a synchronous\nvalue or can also return a Promise, which will be awaited until it resolves.\nThis enables you to perform asynchronous actions such as reading files in from\nthe filesystem."]}),"\n",(0,s.jsxs)(n.p,{children:["If you return or resolve with an object, Cypress will then merge this object\ninto the ",(0,s.jsx)(n.code,{children:"config"})," which enables you to overwrite configuration or environment\nvariables."]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      // configure plugins here\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      // configure plugins here\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"on",children:"on"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"on"})," is a function that you will use to register listeners on various ",(0,s.jsx)(n.strong,{children:"events"}),"\nthat Cypress exposes."]}),"\n",(0,s.jsx)(n.p,{children:"Registering to listen on an event looks like this:"}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('<event>', (arg1, arg2) => {\n        // plugin stuff here\n      })\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      on('<event>', (arg1, arg2) => {\n        // plugin stuff here\n      })\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsxs)(n.p,{children:["Each event documents its own argument signature. To understand how to use them,\nplease ",(0,s.jsx)(n.a,{href:"#List-of-events",children:"refer to the docs for each one"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"config",children:"config"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"config"})," is the resolved\n",(0,s.jsx)(n.a,{href:"/guides/references/configuration",children:"Cypress configuration"})," of the opened project."]}),"\n",(0,s.jsx)(n.p,{children:"This configuration contains all of the values that get passed into the browser\nfor your project."}),"\n",(0,s.jsx)(n.p,{children:"Some plugins may utilize or require these values, so they can take certain\nactions based on the configuration. If these values are programmatically\nmodified, Cypress will use the new values."}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"config"})," object also includes the following extra values that are not part\nof the standard configuration. ",(0,s.jsx)(n.strong,{children:"These values are read only and cannot be\nmodified from the plugins file."})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"configFile"}),": The absolute path to the\n",(0,s.jsx)(n.a,{href:"/guides/references/configuration",children:"Cypress configuration file"}),". See the\n",(0,s.jsx)(n.a,{href:"/guides/guides/command-line#cypress-open",children:"--config-file"})," and\n",(0,s.jsx)(n.a,{href:"/guides/guides/module-api",children:"configFile"})," docs for more information on this\nvalue."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"projectRoot"}),": The absolute path to the root of the project (e.g.\n",(0,s.jsx)(n.code,{children:"/Users/me/dev/my-project"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"version"}),": The version number of Cypress. This can be used to handle breaking\nchanges."]}),"\n"]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/api/plugins/configuration-api",children:"Please check out our API docs for modifying configuration here."})}),"\n",(0,s.jsx)(n.h3,{id:"List-of-events",children:"List of events"}),"\n",(0,s.jsx)(n.h4,{id:"The-following-events-are-available",children:"The following events are available:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Event"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api/plugins/after-run-api",children:(0,s.jsx)(n.code,{children:"after:run"})})}),(0,s.jsx)(n.td,{children:"Occurs after the run is finished."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api/plugins/after-screenshot-api",children:(0,s.jsx)(n.code,{children:"after:screenshot"})})}),(0,s.jsx)(n.td,{children:"Occurs after a screenshot is taken."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api/plugins/after-spec-api",children:(0,s.jsx)(n.code,{children:"after:spec"})})}),(0,s.jsx)(n.td,{children:"Occurs after a spec is finished running."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api/plugins/browser-launch-api",children:(0,s.jsx)(n.code,{children:"before:browser:launch"})})}),(0,s.jsx)(n.td,{children:"Occurs immediately before launching a browser."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api/plugins/before-run-api",children:(0,s.jsx)(n.code,{children:"before:run"})})}),(0,s.jsx)(n.td,{children:"Occurs before the run starts."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api/plugins/before-spec-api",children:(0,s.jsx)(n.code,{children:"before:spec"})})}),(0,s.jsx)(n.td,{children:"Occurs when a spec is about to be run."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api/plugins/preprocessors-api",children:(0,s.jsx)(n.code,{children:"file:preprocessor"})})}),(0,s.jsx)(n.td,{children:"Occurs when a spec or spec-related file needs to be transpiled for the browser."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/api/commands/task",children:(0,s.jsx)(n.code,{children:"task"})})}),(0,s.jsxs)(n.td,{children:["Occurs in conjunction with the ",(0,s.jsx)(n.code,{children:"cy.task"})," command."]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"Execution-context",children:"Execution context"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"/guides/references/configuration#setupNodeEvents",children:(0,s.jsx)(n.code,{children:"setupNodeEvents"})}),"\nfunction (or deprecated ",(0,s.jsx)(n.a,{href:"/guides/references/legacy-configuration#Plugins",children:"plugins file"})," function) is invoked\nwhen Cypress opens a project."]}),"\n",(0,s.jsxs)(n.p,{children:["Cypress does this by spawning an independent ",(0,s.jsx)(n.code,{children:"child_process"})," which then\n",(0,s.jsx)(n.code,{children:"requires"})," the ",(0,s.jsx)(n.a,{href:"/guides/references/configuration",children:"Cypress configuration file"}),".\nThis is similar to the way Visual Studio Code or Atom works."]}),"\n",(0,s.jsx)(n.p,{children:"This code will be executed using the the Node version that launched Cypress."}),"\n",(0,s.jsx)(n.h3,{id:"npm-modules",children:"npm modules"}),"\n",(0,s.jsxs)(n.p,{children:["When Cypress executes the\n",(0,s.jsx)(n.a,{href:"/guides/references/configuration#setupNodeEvents",children:(0,s.jsx)(n.code,{children:"setupNodeEvents"})})," function\n(or deprecated ",(0,s.jsx)(n.a,{href:"/guides/references/legacy-configuration#Plugins",children:"plugins file"})," function) it will execute with\n",(0,s.jsx)(n.code,{children:"process.cwd()"})," set to your project's path. Additionally - you will be able to\n",(0,s.jsx)(n.code,{children:"require"})," ",(0,s.jsx)(n.strong,{children:"any node module"})," you have installed, including local files inside\nyour project."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if your ",(0,s.jsx)(n.code,{children:"package.json"})," looked like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "name": "My Project",\n  "dependencies": {\n    "debug": "x.x.x"\n  },\n  "devDependencies": {\n    "lodash": "x.x.x"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Then you could do any of the following in your ",(0,s.jsx)(n.code,{children:"setupNodeEvents"})," function:"]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:"",children:"const { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      const _ = require('lodash') // yup, dev dependencies\n      const path = require('path') // yup, core node library\n      const debug = require('debug') // yup, dependencies\n      const User = require('./lib/models/user') // yup, relative local modules\n\n      console.log(__dirname) // /Users/janelane/Dev/my-project\n      console.log(process.cwd()) // /Users/janelane/Dev/my-project\n    },\n  },\n})\n"})}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"",children:"import { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  // setupNodeEvents can be defined in either\n  // the e2e or component configuration\n  e2e: {\n    setupNodeEvents(on, config) {\n      const _ = require('lodash') // yup, dev dependencies\n      const path = require('path') // yup, core node library\n      const debug = require('debug') // yup, dependencies\n      const User = require('./lib/models/user') // yup, relative local modules\n\n      console.log(__dirname) // /Users/janelane/Dev/my-project\n      console.log(process.cwd()) // /Users/janelane/Dev/my-project\n    },\n  },\n})\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"Error-handling",children:"Error handling"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"/guides/references/configuration",children:"Cypress configuration file"})," is loaded in\nits own child process so it is isolated away from the context that Cypress\nitself runs in. That means you cannot accidentally modify or change Cypress's\nown execution in any way."]}),"\n",(0,s.jsxs)(n.p,{children:["If your ",(0,s.jsx)(n.a,{href:"/guides/references/configuration#setupNodeEvents",children:(0,s.jsx)(n.code,{children:"setupNodeEvents"})}),"\nfunction (or deprecated ",(0,s.jsx)(n.a,{href:"/guides/references/legacy-configuration#Plugins",children:"plugins file"})," function) has an\nuncaught exception, an unhandled rejection from a promise, or a syntax error -\nCypress will automatically catch those and display them to you inside of the\nconsole and even in Cypress itself."]}),"\n",(0,s.jsxs)(n.p,{children:["Errors in your ",(0,s.jsx)(n.code,{children:"setupNodeEvents"})," function ",(0,s.jsx)(n.em,{children:"will not crash"})," Cypress."]}),"\n",(0,s.jsx)(n.h2,{id:"File-changes",children:"File changes"}),"\n",(0,s.jsx)(n.p,{children:"Normally when writing code in Node, you typically have to restart the process\nafter changing any files."}),"\n",(0,s.jsxs)(n.p,{children:["Cypress automatically watches your\n",(0,s.jsx)(n.a,{href:"/guides/references/configuration",children:"Cypress configuration file"})," and any changes\nmade will take effect immediately. We will read the file in and execute the\nexported function again."]}),"\n",(0,s.jsx)(n.p,{children:"This enables you to iterate on plugin code even with Cypress already running."})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},1151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>t});var s=i(7294);const r={},o=s.createContext(r);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);