"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[5073],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(n),y=o,m=u["".concat(c,".").concat(y)]||u[y]||d[y]||i;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=y;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},7530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={title:"Content Security Policy",e2eSpecific:!0},s=void 0,a={unversionedId:"guides/guides/content-security-policy",id:"guides/guides/content-security-policy",title:"Content Security Policy",description:"Content Security Policy (CSP) is a browser security feature that allows you to",source:"@site/docs/guides/guides/content-security-policy.mdx",sourceDirName:"guides/guides",slug:"/guides/guides/content-security-policy",permalink:"/cypress-documentation/guides/guides/content-security-policy",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/guides/content-security-policy.mdx",tags:[],version:"current",lastUpdatedAt:1698908846,formattedLastUpdatedAt:"Nov 2, 2023",frontMatter:{title:"Content Security Policy",e2eSpecific:!0},sidebar:"guides",previous:{title:"Command Line",permalink:"/cypress-documentation/guides/guides/command-line"},next:{title:"Cross Browser Testing",permalink:"/cypress-documentation/guides/guides/cross-browser-testing"}},c={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Content Security Policy (CSP) is a browser security feature that allows you to\nrestrict the resources that can be loaded into your application. This can be\nproblematic for Cypress, because it needs to inject JavaScript into your\napplication in order to run tests and interact with the DOM. This page describes\nhow Cypress handles CSP and how to configure it to work with your application."),(0,o.kt)("p",null,"There are two ways to implement CSP:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#http-equiv"},"Meta tag")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy"},"HTTP header"))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"<meta>")," tag implementation is fully supported by Cypress without any\nconfiguration required. This is because Cypress loads the necessary ",(0,o.kt)("inlineCode",{parentName:"p"},"<script>"),"\ntags into your application before any ",(0,o.kt)("inlineCode",{parentName:"p"},"<meta>")," tag is parsed. This prevents any\nCSP directives from being applied to the script loaded by Cypress."),(0,o.kt)("p",null,"The second implementation requires you to configure Cypress to allow the headers\nto be sent to your application. By default, Cypress will remove any CSP headers\nfrom the response before it is sent to the browser. This is done to prevent\nCypress from being blocked by the browser's CSP implementation."),(0,o.kt)("p",null,"For most application tests, this should not cause any issues. However, if you\nare testing your application's CSP implementation, you will need to configure\nCypress to allow the headers to be sent to the browser. You can do this by\nsetting the\n",(0,o.kt)("a",{parentName:"p",href:"/guides/references/experiments#Experimental-CSP-Allow-List"},(0,o.kt)("inlineCode",{parentName:"a"},"experimentalCspAllowList")),"\nconfiguration option."),(0,o.kt)("p",null,"For more information on CSP, see the\n",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"},"Content Security Policy"),"\ndocumentation on MDN."))}u.isMDXComponent=!0}}]);