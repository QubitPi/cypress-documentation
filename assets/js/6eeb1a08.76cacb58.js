"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[4655],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return t?i.createElement(g,o(o({ref:n},p),{},{components:t})):i.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=t(7462),a=(t(7294),t(3905));const r={title:"origin",e2eSpecific:!0},o=void 0,s={unversionedId:"api/commands/origin",id:"api/commands/origin",title:"origin",description:"Visit multiple domains of different",source:"@site/docs/api/commands/origin.mdx",sourceDirName:"api/commands",slug:"/api/commands/origin",permalink:"/cypress-documentation/api/commands/origin",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/api/commands/origin.mdx",tags:[],version:"current",lastUpdatedAt:1696480553,formattedLastUpdatedAt:"Oct 5, 2023",frontMatter:{title:"origin",e2eSpecific:!0},sidebar:"api",previous:{title:"mount",permalink:"/cypress-documentation/api/commands/mount"},next:{title:"pause",permalink:"/cypress-documentation/api/commands/pause"}},l={},c=[{value:"Syntax",id:"Syntax",level:2},{value:"Usage",id:"Usage",level:3},{value:"Arguments",id:"Arguments",level:3},{value:'Yields <Icon name="question-circle"/>',id:"Yields",level:3},{value:"Examples",id:"Examples",level:2},{value:"Using dynamic data in a secondary origin",id:"Using-dynamic-data-in-a-secondary-origin",level:3},{value:"Yielding a value",id:"Yielding-a-value",level:3},{value:"Navigating to secondary origin with cy.visit",id:"Navigating-to-secondary-origin-with-cyvisit",level:3},{value:"Alternative navigation",id:"Alternative-navigation",level:4},{value:'<Icon name="exclamation-triangle" color="red" /> Incorrect Usage',id:"Incorrect-Usage",level:4},{value:"Navigating to secondary origin with UI",id:"Navigating-to-secondary-origin-with-UI",level:3},{value:"Navigating to multiple secondary origins in succession",id:"Navigating-to-multiple-secondary-origins-in-succession",level:3},{value:"SSO login custom command",id:"SSO-login-custom-command",level:3},{value:"Learn More",id:"Learn-More",level:2},{value:"How to Test Multiple Origins",id:"How-to-Test-Multiple-Origins",level:3},{value:"Notes",id:"Notes",level:2},{value:"Serialization",id:"Serialization",level:3},{value:"Dependencies / Sharing Code",id:"Dependencies--Sharing-Code",level:3},{value:"Example",id:"Example",level:4},{value:"Custom commands",id:"Custom-commands",level:4},{value:"Shared execution context",id:"Shared-execution-context",level:4},{value:"Callback restrictions",id:"Callback-restrictions",level:3},{value:"Other limitations",id:"Other-limitations",level:3},{value:"History",id:"History",level:2},{value:"See also",id:"See-also",level:2}],p=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)},m=p("Icon"),d=p("DocsVideo"),u={toc:c};function g(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Visit multiple domains of different\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#definition_of_an_origin"},"origin"),"\nin a single test."),(0,a.kt)("p",null,"In normal use, a single Cypress test may only run commands in a single origin, a\nlimitation determined by standard web security features of the browser. The\n",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()")," command allows your tests to bypass this limitation."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("strong",null,(0,a.kt)(m,{name:"exclamation-triangle",mdxType:"Icon"})," Obstructive Third Party Code"),(0,a.kt)("p",{parentName:"admonition"},"By default Cypress will search through the response streams coming from your\nserver on first party ",(0,a.kt)("inlineCode",{parentName:"p"},".html")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".js")," files and replace code that matches\npatterns commonly found in framebusting. When using the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()")," command,\nthe third party code may also need to be modified for framebusting techniques.\nThis can be enabled by setting the\n",(0,a.kt)("a",{parentName:"p",href:"/guides/references/experiments"},(0,a.kt)("inlineCode",{parentName:"a"},"experimentalModifyObstructiveThirdPartyCode")),"\nflag to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," in the Cypress configuration. More information about this\nexperimental flag can be found on our\n",(0,a.kt)("a",{parentName:"p",href:"/guides/guides/web-security#Modifying-Obstructive-Third-Party-Code"},"Web Security"),"\npage.")),(0,a.kt)("h2",{id:"Syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"cy.origin(url, callbackFn)\ncy.origin(url, options, callbackFn)\n")),(0,a.kt)("h3",{id:"Usage"},"Usage"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(m,{name:"check-circle",color:"green",mdxType:"Icon"})," Correct Usage")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const hits = getHits() // Defined elsewhere\n// Run commands in secondary origin, passing in serializable values\ncy.origin('https://example.cypress.io', { args: { hits } }, ({ hits }) => {\n  // Inside callback baseUrl is https://example.cypress.io\n  cy.visit('/history/founder')\n  // Commands are executed in secondary origin\n  cy.get('h1').contains('About our Founder')\n  // Passed in values are accessed via callback args\n  cy.get('#hitcounter').contains(hits)\n})\n// Even though we're outside the secondary origin block,\n// we're still on cypress.io so return to baseUrl\ncy.visit('/')\n// Continue running commands on primary origin\ncy.get('h1').contains('My cool site under test')\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(m,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Incorrect Usage")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const hits = getHits()\ncy.visit('https://example.cypress.io/history/founder')\n// To interact with cross-origin content, move this inside cy.origin() callback\ncy.get('h1').contains('About our Founder')\n// Domain must be a precise match including subdomain, i.e. example.cypress.io\ncy.origin('cypress.io', () => {\n  cy.visit('/history/founder')\n  cy.get('h1').contains('About our Founder')\n  // Fails because hits is not passed in via args\n  cy.get('#hitcounter').contains(hits)\n})\n// Won't work because still on cypress.io\ncy.get('h1').contains('My cool site under test')\n")),(0,a.kt)("h3",{id:"Arguments"},"Arguments"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(m,{name:"angle-right",mdxType:"Icon"})," url")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"(String)"))),(0,a.kt)("p",null,"A URL specifying the secondary origin in which the callback is to be executed.\nThis should at the very least contain a hostname, and may also include the\nprotocol, port number & path. The hostname must precisely match that of the\nsecondary origin, including all subdomains. Query params are not supported."),(0,a.kt)("p",null,"This argument will be used in two ways:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"It uniquely identifies a secondary origin in which the commands in the\ncallback will be executed. Cypress will inject itself into this origin, and\nthen send it code to evaluate in that origin, without violating the browser's\nsame-origin policy.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"It overrides the ",(0,a.kt)("inlineCode",{parentName:"p"},"baseUrl")," configured in your\n",(0,a.kt)("a",{parentName:"p",href:"/guides/references/configuration#Global"},"global configuration")," while inside\nthe callback. So ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.visit()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.request()")," will use this URL as a\nprefix, not the configured ",(0,a.kt)("inlineCode",{parentName:"p"},"baseUrl"),"."))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(m,{name:"angle-right",mdxType:"Icon"})," options")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"(Object)"))),(0,a.kt)("p",null,"Pass in an options object to control the behavior of ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()"),"."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"option"),(0,a.kt)("th",{parentName:"tr",align:null},"description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"args"),(0,a.kt)("td",{parentName:"tr",align:null},"Plain JavaScript object which will be serialized and sent from the primary origin to the secondary origin, where it will be deserialized and passed into the callback function as its first and only argument.")))),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"args")," object is the ",(0,a.kt)("strong",{parentName:"p"},"only")," mechanism via which data may be injected into\nthe callback, the callback is ",(0,a.kt)("strong",{parentName:"p"},"not")," a closure and does not retain access to\nthe JavaScript context in which it was declared. Values passed into ",(0,a.kt)("inlineCode",{parentName:"p"},"args"),"\n",(0,a.kt)("strong",{parentName:"p"},"must")," be serializable.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(m,{name:"angle-right",mdxType:"Icon"})," callbackFn")," ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"(Function)"))),(0,a.kt)("p",null,"The function containing the commands to be executed in the secondary origin."),(0,a.kt)("p",null,"This function will be stringified, sent to the Cypress instance in the secondary\norigin and evaluated. If the ",(0,a.kt)("inlineCode",{parentName:"p"},"args")," option is specified, the deserialized args\nobject will be passed into the function as its first and only argument."),(0,a.kt)("p",null,"There are a number of limitations placed on commands run inside the callback,\nplease see ",(0,a.kt)("a",{parentName:"p",href:"#Callback-restrictions"},"Callback restrictions")," section below for a\nfull list."),(0,a.kt)("h3",{id:"Yields"},"Yields ",(0,a.kt)("a",{parentName:"h3",href:"/guides/core-concepts/introduction-to-cypress#Subject-Management"},(0,a.kt)(m,{name:"question-circle",mdxType:"Icon"}))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cy.origin()")," yields the value yielded by the last Cypress command in the\ncallback function."),(0,a.kt)("li",{parentName:"ul"},"If the callback contains no Cypress commands, ",(0,a.kt)("inlineCode",{parentName:"li"},"cy.origin()")," yields the return\nvalue of the function."),(0,a.kt)("li",{parentName:"ul"},"In either of the two cases above, if the value is not serializable, attempting\nto access the yielded value will throw an error.")),(0,a.kt)("h2",{id:"Examples"},"Examples"),(0,a.kt)("h3",{id:"Using-dynamic-data-in-a-secondary-origin"},"Using dynamic data in a secondary origin"),(0,a.kt)("p",null,"Callbacks are executed inside an entirely separate instance of Cypress, so\narguments must be transmitted to the other instance by means of\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm"},"the structured clone algorithm"),".\nThe interface for this mechanism is the ",(0,a.kt)("inlineCode",{parentName:"p"},"args")," option."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const sentArgs = { username: 'username', password: 'P@55w0rd!' }\ncy.origin(\n  'supersecurelogons.com',\n  // Send the args here...\n  { args: sentArgs },\n  // ...and receive them at the other end here!\n  ({ username, password }) => {\n    cy.visit('/login')\n    cy.get('input#username').type(username)\n    cy.get('input#password').type(password)\n    cy.contains('button', 'Login').click()\n  }\n)\n")),(0,a.kt)("h3",{id:"Yielding-a-value"},"Yielding a value"),(0,a.kt)("p",null,"Values returned or yielded from the callback function ",(0,a.kt)("strong",{parentName:"p"},"must")," be serializable\nor they will not be returned to the primary origin. For example, the following\nwill not work:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(m,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Incorrect Usage")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"cy.origin('https://example.cypress.io', () => {\n  cy.visit('/')\n  cy.get('h1') // Yields an element, which can't be serialized...\n}).contains('CYPRESS') // ...so this will fail\n")),(0,a.kt)("p",null,"Instead, you must explicitly yield a serializable value:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(m,{name:"check-circle",color:"green",mdxType:"Icon"})," Correct Usage")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"cy.origin('https://example.cypress.io', () => {\n  cy.visit('/')\n  cy.get('h1').invoke('textContent') // Yields a string...\n}).should('equal', 'CYPRESS') // \ud83d\udc4d\n")),(0,a.kt)("h3",{id:"Navigating-to-secondary-origin-with-cyvisit"},"Navigating to secondary origin with cy.visit"),(0,a.kt)("p",null,"When navigating to a secondary origin using ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.visit()"),", you can either\nnavigate prior to or after the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin")," block. Errors are no longer thrown on\ncross-origin navigation, but instead when commands interact with a cross-origin\npage."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Do things in primary origin...\n\ncy.origin('example.cypress.io', () => {\n  // Visit https://example.cypress.io/history/founder\n  cy.visit('/history/founder')\n  cy.get('h1').contains('About our Founder')\n})\n")),(0,a.kt)("p",null,"Here the ",(0,a.kt)("inlineCode",{parentName:"p"},"baseUrl")," inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()")," callback is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"www.cypress.io"),"\nand the protocol defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"https"),". When ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.visit()")," is called with the path\n",(0,a.kt)("inlineCode",{parentName:"p"},"/history/founder"),", the three are concatenated to make\n",(0,a.kt)("inlineCode",{parentName:"p"},"https://www.cypress.io/history/founder"),"."),(0,a.kt)("h4",{id:"Alternative-navigation"},"Alternative navigation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Do things in primary origin...\n\ncy.visit('https://example.cypress.io/history/founder')\n\n// The cy.origin block is required to interact with the cross-origin page.\ncy.origin('example.cypress.io', () => {\n  cy.get('h1').contains('About our Founder')\n})\n")),(0,a.kt)("p",null,"Here the cross-origin page is visited prior to the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin")," block, but any\ninteractions with the window are performed within the block which can\ncommunicate with the cross-origin page"),(0,a.kt)("h4",{id:"Incorrect-Usage"},(0,a.kt)(m,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Incorrect Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Do things in primary origin...\n\ncy.visit('https://www.cypress.io/history/founder')\n\n// This command will fail, it's executed on localhost but the application is at cypress.io\ncy.get('h1').contains('About our Founder, Marvin Acme')\n")),(0,a.kt)("p",null,"Here ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.get('h1')")," fails because we are trying to interact with a cross-origin\npage outside of the cy.origin block, due to 'same-origin' restrictions, the\n'localhost' javascript context can't communicate with 'cypress.io'."),(0,a.kt)("h3",{id:"Navigating-to-secondary-origin-with-UI"},"Navigating to secondary origin with UI"),(0,a.kt)("p",null,"Navigating to a secondary origin by clicking a link or button in the primary\norigin is supported."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Button in primary origin goes to https://example.cypress.io\ncy.contains('button', 'Go').click()\n\ncy.origin('example.cypress.io', () => {\n  // No cy.visit is needed as the button brought us here\n  cy.get('h1').contains('CYPRESS')\n})\n")),(0,a.kt)("h3",{id:"Navigating-to-multiple-secondary-origins-in-succession"},"Navigating to multiple secondary origins in succession"),(0,a.kt)("p",null,"Callbacks may ",(0,a.kt)("strong",{parentName:"p"},"not")," themselves contain ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()")," calls, so when visiting\nmultiple origins, do so at the top level of the test."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"cy.origin('example.cypress.com', () => {\n  cy.visit('/')\n  cy.url().should('contain', 'example.cypress.com')\n})\n\ncy.origin('cypress-dx.com', () => {\n  cy.visit('/')\n  cy.url().should('contain', 'cypress-dx.com')\n})\n")),(0,a.kt)("h3",{id:"SSO-login-custom-command"},"SSO login custom command"),(0,a.kt)("p",null,"A very common requirement is logging in to a site before running a test. If\nlogin itself is not the specific focus of the test, it's good to encapsulate\nthis functionality in a ",(0,a.kt)("inlineCode",{parentName:"p"},"login"),"\n",(0,a.kt)("a",{parentName:"p",href:"/api/cypress-api/custom-commands"},"custom command")," so you don't have to\nduplicate this login code in every test. Here's an idealized example of how to\ndo this with ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(m,{name:"exclamation-triangle",color:"#f0ad4e",mdxType:"Icon"})," Inefficient Usage")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Cypress.Commands.add('login', (username, password) => {\n  // Remember to pass in arguments via `args`\n  const args = { username, password }\n  cy.origin('cypress.io', { args }, ({ username, password }) => {\n    // Go to https://example.cypress.com/login\n    cy.visit('/login')\n    cy.contains('Username').find('input').type(username)\n    cy.contains('Password').find('input').type(password)\n    cy.get('button').contains('Login').click()\n  })\n  // Confirm we're back at the primary origin before continuing\n  cy.url().should('contain', '/home')\n})\n")),(0,a.kt)("p",null,"Having to go through an entire login flow before every test is not very\nperformant. Up until now you could get around this problem by putting login code\nin the first test of your file, then performing subsequent tests reusing the\nsame session."),(0,a.kt)("p",null,"However, this is no longer possible, since all session state is now cleared\nbetween tests. So to avoid this overhead we recommend you leverage the\n",(0,a.kt)("a",{parentName:"p",href:"/api/commands/session"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.session()"))," command, which allows you to easily\ncache session information and reuse it across tests. So now let's enhance our\ncustom login command with ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.session()")," for a complete syndicated login flow\nwith session caching and validation. No mocking, no workarounds, no third-party\nplugins!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Cypress.Commands.add('login', (username, password) => {\n  const args = { username, password }\n  cy.session(\n    // Username & password can be used as the cache key too\n    args,\n    () => {\n      cy.origin('cypress.io', { args }, ({ username, password }) => {\n        cy.visit('/login')\n        cy.contains('Username').find('input').type(username)\n        cy.contains('Password').find('input').type(password)\n        cy.get('button').contains('Login').click()\n      })\n      cy.url().should('contain', '/home')\n    },\n    {\n      validate() {\n        cy.request('/api/user').its('status').should('eq', 200)\n      },\n    }\n  )\n})\n")),(0,a.kt)("h2",{id:"Learn-More"},"Learn More"),(0,a.kt)("h3",{id:"How-to-Test-Multiple-Origins"},"How to Test Multiple Origins"),(0,a.kt)(d,{src:"https://youtube.com/embed/Fohrq5GZSD8",mdxType:"DocsVideo"}),(0,a.kt)("p",null,"In this video we walk through how to test multiple origins in a single test. We\nalso look at how to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.session()")," command to cache session information\nand reuse it across tests."),(0,a.kt)("h2",{id:"Notes"},"Notes"),(0,a.kt)("h3",{id:"Serialization"},"Serialization"),(0,a.kt)("p",null,"When entering a ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()")," block, Cypress injects itself at runtime, with all\nyour configuration settings, into the requested origin, and sets up\nbidirectional communication with that instance. This coordination model requires\nthat any data sent from one instance to another be\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Glossary/Serialization"},"serialized"),"\nfor transmission. It is very important to understand that variables ",(0,a.kt)("strong",{parentName:"p"},"inside"),"\nthe callback are not shared with the scope ",(0,a.kt)("strong",{parentName:"p"},"outside")," the callback. For example\nthis will not work:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(m,{name:"exclamation-triangle",color:"red",mdxType:"Icon"})," Incorrect Usage")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const foo = 1\ncy.origin('cypress.io', () => {\n  cy.visit('/')\n  // This line will throw a ReferenceError because\n  // `foo` is not defined in the scope of the callback\n  cy.get('input').type(foo)\n})\n")),(0,a.kt)("p",null,"Instead, the variable must be explicitly passed into the callback using the\n",(0,a.kt)("inlineCode",{parentName:"p"},"args")," option:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)(m,{name:"check-circle",color:"green",mdxType:"Icon"})," Correct Usage")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const foo = 1\ncy.origin('cypress.io', { args: { foo } }, ({ foo }) => {\n  cy.visit('/')\n  // Now it will pass\n  cy.get('input').type(foo)\n})\n")),(0,a.kt)("p",null,"Cypress uses\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm"},"the structured clone algorithm"),"\nto transfer the ",(0,a.kt)("inlineCode",{parentName:"p"},"args")," option to the secondary origin. This introduces a number\nof\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#things_that_dont_work_with_structured_clone"},"restrictions on the data which may be passed"),"\ninto the callback."),(0,a.kt)("h3",{id:"Dependencies--Sharing-Code"},"Dependencies / Sharing Code"),(0,a.kt)("p",null,"Within the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()")," callback,\n",(0,a.kt)("a",{parentName:"p",href:"/api/cypress-api/require"},(0,a.kt)("inlineCode",{parentName:"a"},"Cypress.require()"))," can be utilized to include\n",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/"},"npm")," packages and other files. It is functionally the\nsame as using\n",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/en/knowledge/getting-started/what-is-require/"},"CommonJS ",(0,a.kt)("inlineCode",{parentName:"a"},"require()")),"\nin browser-targeted code."),(0,a.kt)("p",null,"Note that it is not possible to use\n",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/en/knowledge/getting-started/what-is-require/"},"CommonJS ",(0,a.kt)("inlineCode",{parentName:"a"},"require()")),"\nor\n",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports"},"ES module ",(0,a.kt)("inlineCode",{parentName:"a"},"import()")),"\nwithin the callback."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"Cypress.require()")," within the callback requires enabling the\n",(0,a.kt)("a",{parentName:"p",href:"/guides/references/experiments"},(0,a.kt)("inlineCode",{parentName:"a"},"experimentalOriginDependencies"))," option in the\nCypress configuration.")),(0,a.kt)("p",null,"Read more in the ",(0,a.kt)("a",{parentName:"p",href:"/api/cypress-api/require"},(0,a.kt)("inlineCode",{parentName:"a"},"Cypress.require()")," doc")," itself."),(0,a.kt)("h4",{id:"Example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"cy.origin('cypress.io', () => {\n  const _ = Cypress.require('lodash')\n  const utils = Cypress.require('../support/utils')\n\n  // ... use lodash and utils ...\n})\n")),(0,a.kt)("h4",{id:"Custom-commands"},"Custom commands"),(0,a.kt)("p",null,"This makes it possible to share custom commands between tests run in primary and\nsecondary origins. We recommend this pattern for setting up your\n",(0,a.kt)("a",{parentName:"p",href:"/guides/core-concepts/writing-and-organizing-tests#Support-file"},"support file"),"\nand setting up custom commands to run within the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()")," callback:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cypress/support/commands.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"Cypress.Commands.add('clickLink', (label) => {\n  cy.get('a').contains(label).click()\n})\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cypress/support/e2e.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// makes custom commands available to all Cypress tests in this spec,\n// outside of cy.origin() callbacks\nimport './commands'\n\n// code we only want run per test, so it shouldn't be run as part of\n// the execution of cy.origin() as well\nbeforeEach(() => {\n  // ... code to run before each test ...\n})\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cypress/e2e/spec.cy.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"before(() => {\n  // makes custom commands available to all subsequent cy.origin('cypress.io)\n  // calls in this spec. put it in your support file to make them available to\n  // all specs\n  cy.origin('cypress.io', () => {\n    Cypress.require('../support/commands')\n  })\n})\n\nit('tests cypress.io', () => {\n  cy.origin('cypress.io', () => {\n    cy.visit('/page')\n    cy.clickLink('Click Me')\n  })\n})\n")),(0,a.kt)("h4",{id:"Shared-execution-context"},"Shared execution context"),(0,a.kt)("p",null,"The JavaScript execution context is persisted between ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()")," callbacks\nthat share the same origin. This can be utilized to share code between\nsuccessive ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()")," calls."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"before(() => {\n  cy.origin('cypress.io', () => {\n    // makes commands defined in this file available to all callbacks\n    // for cypress.io\n    Cypress.require('../support/commands')\n  })\n})\n\nit('uses cy.origin() + custom command', () => {\n  cy.origin('cypress.io', () => {\n    cy.visit('/page')\n    cy.clickLink('Click Me')\n  })\n})\n\nit('also uses cy.origin() + custom command', () => {\n  cy.origin('cypress.io', () => {\n    cy.visit('/page')\n    cy.clickLink('Click Me')\n  })\n\n  cy.origin('cypress-dx.com', () => {\n    // WARNING: cy.clickLink() will not be available because it is a\n    // different origin\n  })\n})\n")),(0,a.kt)("h3",{id:"Callback-restrictions"},"Callback restrictions"),(0,a.kt)("p",null,"Because of the way in which the callback is transmitted and executed, there are\ncertain limitations on what code may be run inside it. In particular, the\nfollowing Cypress commands will throw errors if used in the callback:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cy.origin()")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/commands/intercept"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.intercept()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/commands/session"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.session()")))),(0,a.kt)("h3",{id:"Other-limitations"},"Other limitations"),(0,a.kt)("p",null,"There are other testing scenarios which are not currently covered by\n",(0,a.kt)("inlineCode",{parentName:"p"},"cy.origin()"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"It cannot run commands\n",(0,a.kt)("a",{parentName:"li",href:"/guides/references/trade-offs#Multiple-browsers-open-at-the-same-time"},"in a different browser window")),(0,a.kt)("li",{parentName:"ul"},"It cannot run commands\n",(0,a.kt)("a",{parentName:"li",href:"/guides/references/trade-offs#Multiple-tabs"},"in a different browser tab")),(0,a.kt)("li",{parentName:"ul"},"It cannot run commands\n",(0,a.kt)("a",{parentName:"li",href:"/faq/questions/using-cypress-faq#How-do-I-test-elements-inside-an-iframe"},"inside an ",(0,a.kt)("inlineCode",{parentName:"a"},"<iframe>")," element"))),(0,a.kt)("p",null,"However, ",(0,a.kt)("inlineCode",{parentName:"p"},"<iframe>")," support is on ",(0,a.kt)("a",{parentName:"p",href:"/guides/references/roadmap"},"our roadmap")," for\ninclusion in a future version of Cypress."),(0,a.kt)("h2",{id:"History"},"History"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Version"),(0,a.kt)("th",{parentName:"tr",align:null},"Changes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/references/changelog#10-7-0"},"12.6.0")),(0,a.kt)("td",{parentName:"tr",align:null},"Support for ",(0,a.kt)("inlineCode",{parentName:"td"},"Cypress.require()")," added and support for CommonJS ",(0,a.kt)("inlineCode",{parentName:"td"},"require()")," and ES module ",(0,a.kt)("inlineCode",{parentName:"td"},"import()")," removed")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/references/changelog#10-7-0"},"10.11.0")),(0,a.kt)("td",{parentName:"tr",align:null},"Support for CommonJS ",(0,a.kt)("inlineCode",{parentName:"td"},"require()")," and ES module ",(0,a.kt)("inlineCode",{parentName:"td"},"import()")," added and support for ",(0,a.kt)("inlineCode",{parentName:"td"},"Cypress.require()")," removed")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/guides/references/changelog#10-7-0"},"10.7.0")),(0,a.kt)("td",{parentName:"tr",align:null},"Support for ",(0,a.kt)("inlineCode",{parentName:"td"},"Cypress.require()")," added")))),(0,a.kt)("h2",{id:"See-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://cypress.io/blog/2022/04/25/cypress-9-6-0-easily-test-multi-domain-workflows-with-cy-origin/"},"Easily test multi-domain workflows with cy.origin")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/cypress-api/custom-commands"},"Custom Commands")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/cypress-api/require"},(0,a.kt)("inlineCode",{parentName:"a"},"Cypress.require()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/commands/session"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.session()"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/api/commands/visit"},(0,a.kt)("inlineCode",{parentName:"a"},"cy.visit()")))))}g.isMDXComponent=!0}}]);