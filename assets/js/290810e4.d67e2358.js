"use strict";(self.webpackChunkcypress_docusaurus_ts=self.webpackChunkcypress_docusaurus_ts||[]).push([[2194],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),u=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(p.Provider,{value:t},e.children)},m="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,g=m["".concat(p,".").concat(d)]||m[d]||l[d]||r;return n?o.createElement(g,s(s({ref:t},c),{},{components:n})):o.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<r;u++)s[u]=n[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2750:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var o=n(7462),a=(n(7294),n(3905));const r={title:"React Examples",sidebar_position:30},s=void 0,i={unversionedId:"guides/component-testing/react/examples",id:"guides/component-testing/react/examples",title:"React Examples",description:"Mounting Components",source:"@site/docs/guides/component-testing/react/examples.mdx",sourceDirName:"guides/component-testing/react",slug:"/guides/component-testing/react/examples",permalink:"/cypress-documentation/guides/component-testing/react/examples",draft:!1,editUrl:"https://github.com/cypress-io/cypress-documentation/tree/main/docs/guides/component-testing/react/examples.mdx",tags:[],version:"current",lastUpdatedAt:1698216540,formattedLastUpdatedAt:"Oct 25, 2023",sidebarPosition:30,frontMatter:{title:"React Examples",sidebar_position:30},sidebar:"guides",previous:{title:"React Overview",permalink:"/cypress-documentation/guides/component-testing/react/overview"},next:{title:"React API",permalink:"/cypress-documentation/guides/component-testing/react/api"}},p={},u=[{value:"Mounting Components",id:"Mounting-Components",level:2},{value:"Mounting a Component",id:"Mounting-a-Component",level:3},{value:"Passing Data to a Component",id:"Passing-Data-to-a-Component",level:3},{value:"Testing Event Handlers",id:"Testing-Event-Handlers",level:3},{value:"Custom Mount Commands",id:"Custom-Mount-Commands",level:2},{value:"Customizing <code>cy.mount()</code>",id:"Customizing-cymount",level:3},{value:"React Router",id:"React-Router",level:3},{value:"Redux",id:"Redux",level:3}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},m=c("Tabs"),l=c("TabItem"),d={toc:u};function g(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"Mounting-Components"},"Mounting Components"),(0,a.kt)("h3",{id:"Mounting-a-Component"},"Mounting a Component"),(0,a.kt)("p",null,"The first step in testing a component is to mount it. This renders the component\ninto a testbed and enable's the use of the Cypress API to select elements,\ninteract with them, and run assertions."),(0,a.kt)("p",null,"To mount a React component, import the component into your spec and pass the\ncomponent to the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { Stepper } from './stepper'\n\nit('mounts', () => {\n  cy.mount(<Stepper />)\n  //Stepper should have initial count of 0 (default)\n  cy.get('[data-cy=counter]').should('have.text', '0')\n})\n")),(0,a.kt)("h3",{id:"Passing-Data-to-a-Component"},"Passing Data to a Component"),(0,a.kt)("p",null,"You can pass props to a component by setting them on the JSX passed into\n",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('mounts', () => {\n  cy.mount(<Stepper initial={100} />)\n  //Stepper should have initial count of 100\n  cy.get('[data-cy=counter]').should('have.text', '100')\n})\n")),(0,a.kt)("h3",{id:"Testing-Event-Handlers"},"Testing Event Handlers"),(0,a.kt)("p",null,"Pass a Cypress ",(0,a.kt)("a",{parentName:"p",href:"/guides/guides/stubs-spies-and-clocks#Spies"},"spy")," to an event\nprop and validate it was called:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"it('clicking + fires a change event with the incremented value', () => {\n  const onChangeSpy = cy.spy().as('onChangeSpy')\n  cy.mount(<Stepper onChange={onChangeSpy} />)\n  cy.get('[data-cy=increment]').click()\n  cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n})\n")),(0,a.kt)("h2",{id:"Custom-Mount-Commands"},"Custom Mount Commands"),(0,a.kt)("h3",{id:"Customizing-cymount"},"Customizing ",(0,a.kt)("inlineCode",{parentName:"h3"},"cy.mount()")),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()")," is a simple passthrough to ",(0,a.kt)("inlineCode",{parentName:"p"},"mount()"),", however, you can\ncustomize ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.mount()")," to fit your needs. For instance, if you are using\nproviders or other global app-level setups in your React app, you can configure\nthem here."),(0,a.kt)("p",null,"Below are a few examples that demonstrate using a custom mount command. These\nexamples can be adjusted for most other providers that you will need to support."),(0,a.kt)("h3",{id:"React-Router"},"React Router"),(0,a.kt)("p",null,"If you have a component that consumes a hook or component from\n",(0,a.kt)("a",{parentName:"p",href:"https://reactrouter.com/"},"React Router"),", make sure the component has access to\na React Router provider. Below is a sample mount command that uses\n",(0,a.kt)("inlineCode",{parentName:"p"},"MemoryRouter")," to wrap the component."),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(l,{value:"cypress/support/component.js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { mount } from 'cypress/react'\nimport { MemoryRouter } from 'react-router-dom'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  const { routerProps = { initialEntries: ['/'] }, ...mountOptions } = options\n\n  const wrapped = <MemoryRouter {...routerProps}>{component}</MemoryRouter>\n\n  return mount(wrapped, mountOptions)\n})\n"))),(0,a.kt)(l,{value:"Typings",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { MountOptions, MountReturn } from 'cypress/react'\nimport { MemoryRouterProps } from 'react-router-dom'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Mounts a React node\n       * @param component React Node to mount\n       * @param options Additional options to pass into mount\n       */\n      mount(\n        component: React.ReactNode,\n        options?: MountOptions & { routerProps?: MemoryRouterProps }\n      ): Cypress.Chainable<MountReturn>\n    }\n  }\n}\n")))),(0,a.kt)("p",null,"To set up certain scenarios, pass in props that will get passed to\n",(0,a.kt)("inlineCode",{parentName:"p"},"MemoryRouter")," in the options. Below is an example test that ensures an active\nlink has the correct class applied to it by initializing the router with\n",(0,a.kt)("inlineCode",{parentName:"p"},"initialEntries")," pointed to a particular route:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Navigation } from './Navigation'\n\nit('home link should be active when url is \"/\"', () => {\n  // No need to pass in custom initialEntries as default url is '/'\n  cy.mount(<Navigation />)\n\n  cy.get('a').contains('Home').should('have.class', 'active')\n})\n\nit('login link should be active when url is \"/login\"', () => {\n  cy.mount(<Navigation />, {\n    routerProps: {\n      initialEntries: ['/login'],\n    },\n  })\n\n  cy.get('a').contains('Login').should('have.class', 'active')\n})\n")),(0,a.kt)("h3",{id:"Redux"},"Redux"),(0,a.kt)("p",null,"To use a component that consumes state or actions from a\n",(0,a.kt)("a",{parentName:"p",href:"https://react-redux.js.org/"},"Redux")," store, create a ",(0,a.kt)("inlineCode",{parentName:"p"},"mount")," command that will\nwrap your component in a Redux Provider:"),(0,a.kt)(m,{mdxType:"Tabs"},(0,a.kt)(l,{value:"cypress/support/component.js",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { mount } from 'cypress/react'\nimport { Provider } from 'react-redux'\nimport { getStore } from '../../src/store'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Use the default store if one is not provided\n  const { reduxStore = getStore(), ...mountOptions } = options\n\n  const wrapped = <Provider store={reduxStore}>{component}</Provider>\n\n  return mount(wrapped, mountOptions)\n})\n"))),(0,a.kt)(l,{value:"Typings",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { MountOptions, MountReturn } from 'cypress/react'\nimport { EnhancedStore } from '@reduxjs/toolkit'\nimport { RootState } from './src/StoreState'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      /**\n       * Mounts a React node\n       * @param component React Node to mount\n       * @param options Additional options to pass into mount\n       */\n      mount(\n        component: React.ReactNode,\n        options?: MountOptions & { reduxStore?: EnhancedStore<RootState> }\n      ): Cypress.Chainable<MountReturn>\n    }\n  }\n}\n")))),(0,a.kt)("p",null,"The options param can have a store that is already initialized with data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { getStore } from '../redux/store'\nimport { setUser } from '../redux/userSlice'\nimport { UserProfile } from './UserProfile'\n\nit('User profile should display user name', () => {\n  const user = { name: 'test person' }\n\n  // getStore is a factory method that creates a new store\n  const store = getStore()\n\n  // setUser is an action exported from the user slice\n  store.dispatch(setUser(user))\n\n  cy.mount(<UserProfile />, { reduxStore: store })\n\n  cy.get('div.name').should('have.text', user.name)\n})\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"getStore")," method is a factory method that initializes a new Redux store. It\nis important that the store be initialized with each new test to ensure changes\nto the store don't affect other tests.")))}g.isMDXComponent=!0}}]);